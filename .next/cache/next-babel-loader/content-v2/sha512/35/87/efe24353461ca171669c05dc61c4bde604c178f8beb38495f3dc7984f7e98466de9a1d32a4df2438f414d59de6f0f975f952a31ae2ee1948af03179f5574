{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\overlayForm\\\\DetailForm.js\";\nimport React, { Fragment } from \"react\";\nimport classes from \"./DetailForm.module.css\";\nimport { useRef, useState } from \"react\";\n\nconst DetailForm = props => {\n  const {\n    ItemTitle,\n    PostID,\n    PosterID,\n    Question,\n    Answer\n  } = props.senderData;\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const ResponseData = useRef();\n\n  async function sendMessage(enteredInformations, ItemTitle, PostID, PosterID, Question, combinedDateTime, Answer) {\n    const response = await fetch(\"/api/answers/sendResponse\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        enteredInformations,\n        ItemTitle,\n        PostID,\n        PosterID,\n        Question,\n        combinedDateTime,\n        Answer\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsLoading(false);\n    }\n\n    return data;\n  }\n\n  const currentDate = new Date();\n  const formattedDate = currentDate.toLocaleDateString(\"en-US\");\n  const formattedTime = currentDate.toLocaleTimeString(\"en-US\");\n  const combinedDateTime = `${formattedDate} ${formattedTime}`;\n\n  async function InfosubmitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredInformations = ResponseData.current.value;\n    const result = await sendMessage(enteredInformations, ItemTitle, PostID, PosterID, Question, combinedDateTime, Answer);\n    event.target.reset();\n    setIsLoading(false);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: \"1.5rem\"\n      },\n      children: \"Submiting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: InfosubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"contactInformations\",\n        children: \"Enter Contact Informations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        name: \"contactInformations\",\n        rows: \"4\",\n        cols: \"40\",\n        placeholder: \"your Gmail or cell number.\",\n        ref: ResponseData,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.twobtn,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button89,\n          type: \"submit\",\n          role: \"button\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button89,\n          type: \"button\",\n          role: \"button\",\n          onClick: props.close,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DetailForm;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/overlayForm/DetailForm.js"],"names":["React","Fragment","classes","useRef","useState","DetailForm","props","ItemTitle","PostID","PosterID","Question","Answer","senderData","isLoading","setIsLoading","ResponseData","sendMessage","enteredInformations","combinedDateTime","response","fetch","method","body","JSON","stringify","headers","data","json","ok","currentDate","Date","formattedDate","toLocaleDateString","formattedTime","toLocaleTimeString","InfosubmitHandler","event","preventDefault","current","value","result","target","reset","fontSize","form","twobtn","button89","close"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport classes from \"./DetailForm.module.css\";\r\nimport { useRef, useState } from \"react\";\r\n\r\nconst DetailForm = (props) => {\r\n  const { ItemTitle, PostID, PosterID, Question, Answer } = props.senderData;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const ResponseData = useRef();\r\n\r\n  async function sendMessage(\r\n    enteredInformations,\r\n    ItemTitle,\r\n    PostID,\r\n    PosterID,\r\n    Question,\r\n    combinedDateTime,\r\n    Answer\r\n  ) {\r\n    const response = await fetch(\"/api/answers/sendResponse\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        enteredInformations,\r\n        ItemTitle,\r\n        PostID,\r\n        PosterID,\r\n        Question,\r\n        combinedDateTime,\r\n        Answer,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  const currentDate = new Date();\r\n  const formattedDate = currentDate.toLocaleDateString(\"en-US\");\r\n  const formattedTime = currentDate.toLocaleTimeString(\"en-US\");\r\n  const combinedDateTime = `${formattedDate} ${formattedTime}`;\r\n\r\n  async function InfosubmitHandler(event) {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    const enteredInformations = ResponseData.current.value;\r\n\r\n    const result = await sendMessage(\r\n      enteredInformations,\r\n      ItemTitle,\r\n      PostID,\r\n      PosterID,\r\n      Question,\r\n      combinedDateTime,\r\n      Answer\r\n    );\r\n    event.target.reset();\r\n    setIsLoading(false);\r\n  }\r\n\r\n  if (isLoading) {\r\n    return <div style={{ fontSize: \"1.5rem\" }}>Submiting...</div>;\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <form className={classes.form} onSubmit={InfosubmitHandler}>\r\n        <label for=\"contactInformations\">Enter Contact Informations</label>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"contactInformations\"\r\n          rows=\"4\"\r\n          cols=\"40\"\r\n          placeholder=\"your Gmail or cell number.\"\r\n          ref={ResponseData}\r\n          required\r\n        ></textarea>\r\n\r\n        <div className={classes.twobtn}>\r\n          <button className={classes.button89} type=\"submit\" role=\"button\">\r\n            Submit\r\n          </button>\r\n          <button\r\n            className={classes.button89}\r\n            type=\"button\"\r\n            role=\"button\"\r\n            onClick={props.close}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DetailForm;\r\n"]},"metadata":{},"sourceType":"module"}