{"ast":null,"code":"import _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { connectToDatabase } from \"../../lib/db\";\nexport function getAllPosts() {\n  return _getAllPosts.apply(this, arguments);\n}\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, db, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connectToDatabase();\n\n          case 2:\n            client = _context.sent;\n            db = client.db();\n            _context.next = 6;\n            return db.collection(\"PostedItem\").find({}).toArray();\n\n          case 6:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getPostsById(_x) {\n  return _getPostsById.apply(this, arguments);\n} // export async function getFeaturedEvents() {\n//   const allEvents = await getAllEvents();\n//   return allEvents.filter((event) => event.isFeatured);\n// }\n// export async function getFilteredEvents(dateFilter) {\n//   const { year, month } = dateFilter;\n//   const allEvents = await getAllEvents();\n//   let filteredEvents = allEvents.filter((event) => {\n//     const eventDate = new Date(event.date);\n//     return (\n//       eventDate.getFullYear() === year && eventDate.getMonth() === month - 1\n//     );\n//   });\n//   return filteredEvents;\n// }\n\nfunction _getPostsById() {\n  _getPostsById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var allPosts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getAllPosts();\n\n          case 2:\n            allPosts = _context2.sent;\n            return _context2.abrupt(\"return\", allPosts.find(function (event) {\n              return event.id === id;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPostsById.apply(this, arguments);\n}","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/helpers/api-util.js"],"names":["connectToDatabase","getAllPosts","client","db","collection","find","toArray","data","getPostsById","id","allPosts","event"],"mappings":";;AAAA,SAASA,iBAAT,QAAkC,cAAlC;AAEA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBD,iBAAiB,EADjC;;AAAA;AACCE,YAAAA,MADD;AAECC,YAAAA,EAFD,GAEMD,MAAM,CAACC,EAAP,EAFN;AAAA;AAAA,mBAIcA,EAAE,CAACC,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAJd;;AAAA;AAICC,YAAAA,IAJD;AAAA,6CAMEA,IANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,gBAAsBC,YAAtB;AAAA;AAAA,C,CAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;2EAvBO,kBAA4BC,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBR,WAAW,EAD7B;;AAAA;AACCS,YAAAA,QADD;AAAA,8CAEEA,QAAQ,CAACL,IAAT,CAAc,UAACM,KAAD;AAAA,qBAAWA,KAAK,CAACF,EAAN,KAAaA,EAAxB;AAAA,aAAd,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { connectToDatabase } from \"../../lib/db\";\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  return data;\n}\n\nexport async function getPostsById(id) {\n  const allPosts = await getAllPosts();\n  return allPosts.find((event) => event.id === id);\n}\n\n// export async function getFeaturedEvents() {\n//   const allEvents = await getAllEvents();\n//   return allEvents.filter((event) => event.isFeatured);\n// }\n\n// export async function getFilteredEvents(dateFilter) {\n//   const { year, month } = dateFilter;\n\n//   const allEvents = await getAllEvents();\n\n//   let filteredEvents = allEvents.filter((event) => {\n//     const eventDate = new Date(event.date);\n//     return (\n//       eventDate.getFullYear() === year && eventDate.getMonth() === month - 1\n//     );\n//   });\n\n//   return filteredEvents;\n// }\n"]},"metadata":{},"sourceType":"module"}