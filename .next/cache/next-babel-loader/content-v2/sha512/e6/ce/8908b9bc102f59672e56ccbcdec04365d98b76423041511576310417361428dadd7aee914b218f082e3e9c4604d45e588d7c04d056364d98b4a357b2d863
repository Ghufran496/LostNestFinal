{"ast":null,"code":"import { MongoClient } from \"mongodb\";\nimport { useMongoDB } from \"../store/MongoDBContext\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\"); //let cachedClient = null;\n//let clientSet = false;\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true,\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n//   return client;\n// }\n// let cachedClient = null;\n// export async function connectToDatabase() {\n//   if (cachedClient !== null) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true, // Pass the useUnifiedTopology option here\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n//   cachedClient = client;\n//   console.log(\"return new client\");\n//   return client;\n// }\n//et cachedPosts = null;\n//console.log(cachedPosts);\n\n\nexport async function getAllPosts() {\n  // if (cachedPosts !== null) {\n  //   console.log(\"return already stored posts\");\n  //   return cachedPosts;\n  // }\n  const {\n    connectToDatabase\n  } = useMongoDB();\n  const client = await connectToDatabase();\n  const db = client.db(); //const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  const data = await db.collection(\"PostedItem\").find({}).toArray(); //cachedPosts = data;\n  //console.log(\"return new posts\");\n\n  return data;\n}\nexport async function getPostsByEmail(email) {\n  //console.log(email);\n  const allPosts = await getAllPosts(); //console.log(allPosts);\n  // return allPosts.find((event) => event.posterEmail === email);\n\n  return allPosts.filter(event => event.posterEmail === email);\n}\nexport async function getPostDataById(id) {\n  const allPosts = await getAllPosts(); //w\n\n  const postobjectId = new ObjectId(id); //console.log(postobjectId);\n  // return allPosts.find((event) => event._id === postobjectId);\n\n  return allPosts.find(event => event._id.toString() === postobjectId.toString());\n}\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"QAnswers\").find({}).toArray(); //console.log(data);\n\n  return data.filter(event => event.PostID === id);\n} // export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/lib/db.js"],"names":["MongoClient","useMongoDB","ObjectId","require","getAllPosts","connectToDatabase","client","db","data","collection","find","toArray","getPostsByEmail","email","allPosts","filter","event","posterEmail","getPostDataById","id","postobjectId","_id","toString","getResponseDataById","PostID"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA,OAAO,eAAeC,WAAf,GAA6B;AAClC;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBJ,UAAU,EAAxC;AACA,QAAMK,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;AACA,QAAME,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX,CAPkC,CASlC;;AACA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB,CAVkC,CAWlC;AACA;;AACA,SAAOH,IAAP;AACD;AAED,OAAO,eAAeI,eAAf,CAA+BC,KAA/B,EAAsC;AAC3C;AACA,QAAMC,QAAQ,GAAG,MAAMV,WAAW,EAAlC,CAF2C,CAG3C;AACA;;AACA,SAAOU,QAAQ,CAACC,MAAT,CAAiBC,KAAD,IAAWA,KAAK,CAACC,WAAN,KAAsBJ,KAAjD,CAAP;AACD;AAED,OAAO,eAAeK,eAAf,CAA+BC,EAA/B,EAAmC;AACxC,QAAML,QAAQ,GAAG,MAAMV,WAAW,EAAlC,CADwC,CACF;;AAEtC,QAAMgB,YAAY,GAAG,IAAIlB,QAAJ,CAAaiB,EAAb,CAArB,CAHwC,CAIxC;AAEA;;AACA,SAAOL,QAAQ,CAACJ,IAAT,CACJM,KAAD,IAAWA,KAAK,CAACK,GAAN,CAAUC,QAAV,OAAyBF,YAAY,CAACE,QAAb,EAD/B,CAAP;AAGD;AAED,OAAO,eAAeC,mBAAf,CAAmCJ,EAAnC,EAAuC;AAC5C,QAAMb,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;AACA,QAAME,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,IAA1B,CAA+B,EAA/B,EAAmCC,OAAnC,EAAnB,CAJ4C,CAM5C;;AACA,SAAOH,IAAI,CAACO,MAAL,CAAaC,KAAD,IAAWA,KAAK,CAACQ,MAAN,KAAiBL,EAAxC,CAAP;AACD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { MongoClient } from \"mongodb\";\nimport { useMongoDB } from \"../store/MongoDBContext\";\nconst { ObjectId } = require(\"mongodb\");\n\n//let cachedClient = null;\n//let clientSet = false;\n\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true,\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n\n//   return client;\n// }\n// let cachedClient = null;\n// export async function connectToDatabase() {\n//   if (cachedClient !== null) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true, // Pass the useUnifiedTopology option here\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n//   cachedClient = client;\n//   console.log(\"return new client\");\n//   return client;\n// }\n\n//et cachedPosts = null;\n//console.log(cachedPosts);\nexport async function getAllPosts() {\n  // if (cachedPosts !== null) {\n  //   console.log(\"return already stored posts\");\n  //   return cachedPosts;\n  // }\n  const { connectToDatabase } = useMongoDB();\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  //const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  //cachedPosts = data;\n  //console.log(\"return new posts\");\n  return data;\n}\n\nexport async function getPostsByEmail(email) {\n  //console.log(email);\n  const allPosts = await getAllPosts();\n  //console.log(allPosts);\n  // return allPosts.find((event) => event.posterEmail === email);\n  return allPosts.filter((event) => event.posterEmail === email);\n}\n\nexport async function getPostDataById(id) {\n  const allPosts = await getAllPosts(); //w\n\n  const postobjectId = new ObjectId(id);\n  //console.log(postobjectId);\n\n  // return allPosts.find((event) => event._id === postobjectId);\n  return allPosts.find(\n    (event) => event._id.toString() === postobjectId.toString()\n  );\n}\n\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  const data = await db.collection(\"QAnswers\").find({}).toArray();\n\n  //console.log(data);\n  return data.filter((event) => event.PostID === id);\n}\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n"]},"metadata":{},"sourceType":"module"}