{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\nimport React, { useEffect } from \"react\";\n\nfunction ItemDetailPage() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"I am details page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getStaticProps(context) {\n  const ItemId = context.params.itemid;\n\n  async function fetchData() {\n    try {\n      const response = await fetch(\"/api/post/postitem\");\n      const data = await response.json(); // Now you can use the 'data' variable to work with the response data\n      // For example, you can store it in another variable:\n\n      const processedData = data; // You can also perform other operations with the data here.\n      // If you want to return the data or do something with it, you can do so here.\n\n      return processedData;\n    } catch (error) {\n      // Handle errors here\n      console.error(\"Error fetching data:\", error);\n    }\n  } // To use the function, you can call it like this:\n\n\n  const result = await fetchData();\n  fetch(\"/api/post/postitem\").then(response => response.json()).then(data => {});\n  const event = await getEventById(ItemId);\n  return {\n    props: {\n      selectedEvent: event\n    },\n    revalidate: 30\n  };\n}\nexport async function getStaticPaths() {\n  const events = await getFeaturedEvents();\n  const paths = events.map(event => ({\n    params: {\n      eventId: event.id\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: \"blocking\"\n  };\n}\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useEffect","ItemDetailPage","getStaticProps","context","ItemId","params","itemid","fetchData","response","fetch","data","json","processedData","error","console","result","then","event","getEventById","props","selectedEvent","revalidate","getStaticPaths","events","getFeaturedEvents","paths","map","eventId","id","fallback"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,cAAT,GAA0B;AACxB,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeC,MAA9B;;AACA,iBAAeC,SAAf,GAA2B;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAIF;AACA;;AACA,YAAMC,aAAa,GAAGF,IAAtB,CANE,CAQF;AAEA;;AACA,aAAOE,aAAP;AACD,KAZD,CAYE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACD;AACF,GAnB2C,CAqB5C;;;AACA,QAAME,MAAM,GAAG,MAAMR,SAAS,EAA9B;AACAE,EAAAA,KAAK,CAAC,oBAAD,CAAL,CACGO,IADH,CACSR,QAAD,IAAcA,QAAQ,CAACG,IAAT,EADtB,EAEGK,IAFH,CAESN,IAAD,IAAU,CAAE,CAFpB;AAGA,QAAMO,KAAK,GAAG,MAAMC,YAAY,CAACd,MAAD,CAAhC;AAEA,SAAO;AACLe,IAAAA,KAAK,EAAE;AACLC,MAAAA,aAAa,EAAEH;AADV,KADF;AAILI,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMC,iBAAiB,EAAtC;AAEA,QAAMC,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAYT,KAAD,KAAY;AAAEZ,IAAAA,MAAM,EAAE;AAAEsB,MAAAA,OAAO,EAAEV,KAAK,CAACW;AAAjB;AAAV,GAAZ,CAAX,CAAd;AAEA,SAAO;AACLH,IAAAA,KAAK,EAAEA,KADF;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID;AACD,eAAe5B,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nfunction ItemDetailPage() {\r\n  return <div>I am details page</div>;\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const ItemId = context.params.itemid;\r\n  async function fetchData() {\r\n    try {\r\n      const response = await fetch(\"/api/post/postitem\");\r\n      const data = await response.json();\r\n\r\n      // Now you can use the 'data' variable to work with the response data\r\n      // For example, you can store it in another variable:\r\n      const processedData = data;\r\n\r\n      // You can also perform other operations with the data here.\r\n\r\n      // If you want to return the data or do something with it, you can do so here.\r\n      return processedData;\r\n    } catch (error) {\r\n      // Handle errors here\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  }\r\n\r\n  // To use the function, you can call it like this:\r\n  const result = await fetchData();\r\n  fetch(\"/api/post/postitem\")\r\n    .then((response) => response.json())\r\n    .then((data) => {});\r\n  const event = await getEventById(ItemId);\r\n\r\n  return {\r\n    props: {\r\n      selectedEvent: event,\r\n    },\r\n    revalidate: 30,\r\n  };\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const events = await getFeaturedEvents();\r\n\r\n  const paths = events.map((event) => ({ params: { eventId: event.id } }));\r\n\r\n  return {\r\n    paths: paths,\r\n    fallback: \"blocking\",\r\n  };\r\n}\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}