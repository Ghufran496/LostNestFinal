{"ast":null,"code":"import { connectToDatabase } from \"../../../lib/db\";\nimport { getSession } from \"next-auth/client\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const data = req.body;\n    const session = await getSession({\n      req: req\n    });\n\n    if (!session) {\n      res.status(401).json({\n        message: \"Not authenticated!\"\n      });\n      return;\n    }\n\n    const posterEmail = session.user.email;\n    const {\n      Type,\n      Category,\n      Title,\n      Description,\n      Question,\n      Date,\n      ReducedImg\n    } = data;\n\n    if (!Type || !Category || !Title || !Description || !Question || !Date || !ReducedImg) {\n      return res.status(400).json({\n        message: \"All fields are required\"\n      });\n    }\n\n    const client = await connectToDatabase();\n    const db = client.db();\n    const result = await db.collection(\"PostedItem\").insertOne({\n      Type: Type,\n      Category: Category,\n      Title: Title,\n      Description: Description,\n      Question: Question,\n      Date: Date,\n      ReducedImg: ReducedImg,\n      posterEmail: posterEmail\n    });\n    res.status(201).json({\n      message: \"Item Posted!\"\n    });\n    client.close();\n  } else {\n    const client = await connectToDatabase();\n    console.log(client);\n\n    try {\n      const db = client.db();\n      const data = await db.collection(\"PostedItem\").find({}).toArray();\n      res.status(200).json(data);\n      client.close();\n    } catch (error) {\n      console.error(\"Error:\", error);\n      res.status(500).json({\n        message: \"Internal Server Error: Unable to fetch and Display Posts\"\n      });\n      client.close();\n    } finally {\n      // Close the client in the finally block to ensure it happens in all cases\n      if (client) {\n        await client.close();\n      }\n    }\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/post/postitem.js"],"names":["connectToDatabase","getSession","handler","req","res","method","data","body","session","status","json","message","posterEmail","user","email","Type","Category","Title","Description","Question","Date","ReducedImg","client","db","result","collection","insertOne","close","console","log","find","toArray","error"],"mappings":"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","sourcesContent":["import { connectToDatabase } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nasync function handler(req, res) {\r\n  if (req.method === \"POST\") {\r\n    const data = req.body;\r\n    const session = await getSession({ req: req });\r\n    if (!session) {\r\n      res.status(401).json({ message: \"Not authenticated!\" });\r\n      return;\r\n    }\r\n    const posterEmail = session.user.email;\r\n    const { Type, Category, Title, Description, Question, Date, ReducedImg } =\r\n      data;\r\n\r\n    if (\r\n      !Type ||\r\n      !Category ||\r\n      !Title ||\r\n      !Description ||\r\n      !Question ||\r\n      !Date ||\r\n      !ReducedImg\r\n    ) {\r\n      return res.status(400).json({ message: \"All fields are required\" });\r\n    }\r\n    const client = await connectToDatabase();\r\n\r\n    const db = client.db();\r\n\r\n    const result = await db.collection(\"PostedItem\").insertOne({\r\n      Type: Type,\r\n      Category: Category,\r\n      Title: Title,\r\n      Description: Description,\r\n      Question: Question,\r\n      Date: Date,\r\n      ReducedImg: ReducedImg,\r\n      posterEmail: posterEmail,\r\n    });\r\n\r\n    res.status(201).json({ message: \"Item Posted!\" });\r\n    client.close();\r\n  } else {\r\n    const client = await connectToDatabase();\r\n    console.log(client);\r\n\r\n    try {\r\n      const db = client.db();\r\n\r\n      const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n      res.status(200).json(data);\r\n      client.close();\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      res.status(500).json({\r\n        message: \"Internal Server Error: Unable to fetch and Display Posts\",\r\n      });\r\n      client.close();\r\n    } finally {\r\n      // Close the client in the finally block to ensure it happens in all cases\r\n      if (client) {\r\n        await client.close();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}