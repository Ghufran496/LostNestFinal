{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from \"react\";\nimport AnswerList from \"./answer-list\";\nimport classes from \"./answer.module.css\";\nimport Button from \"../UI/Button\"; //http://localhost:3000/mylistings/654bc2921efc6c1070461e13\n\nfunction Answer(props) {\n  const {\n    postid\n  } = props;\n  console.log(postid);\n  const {\n    0: showResponse,\n    1: setShowResponse\n  } = useState(false);\n  const {\n    0: showLoadingContent,\n    1: setLoadingContent\n  } = useState(false);\n  const {\n    0: response,\n    1: setresponse\n  } = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (showResponse) {\n        setLoadingContent(true);\n\n        try {\n          const response = await fetch(\"/api/answers/\" + postid);\n          const data = await response.json();\n          setresponse(data.responses);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error); // Handle errors as needed\n        } finally {\n          setLoadingContent(false);\n        }\n      }\n    }; // Only fetch data if showResponse is true and responses are not already available\n\n\n    if (showResponse && response.length === 0) {\n      fetchData();\n    }\n  }, [showResponse]);\n\n  function toggleResponseHandler() {\n    setShowResponse(prevStatus => !prevStatus);\n  }\n\n  return /*#__PURE__*/_jsxs(\"section\", {\n    className: classes.responses,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsx(\"a\", {\n        onClick: toggleResponseHandler,\n        children: /*#__PURE__*/_jsx(Button, {\n          content: showResponse ? \"Hide Responses\" : \"Show Responses\"\n        })\n      })\n    }), showLoadingContent && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        marginTop: \"1rem\",\n        fontSize: \"1.5rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"getting responses...\"\n    }), response.length === 0 && !showLoadingContent && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        marginTop: \"1rem\",\n        fontSize: \"1.5rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"No responses have been received yet.\"\n    }), showResponse && /*#__PURE__*/_jsx(AnswerList, {\n      ansitems: response\n    })]\n  });\n}\n\nexport default Answer; // useEffect(() => {\n//   const fetchData = async () => {\n//     if (showResponse) {\n//       setLoadingContent(true);\n//       try {\n//         const response = await fetch(\"/api/answers/\" + postid);\n//         const data = await response.json();\n//         setresponse(data.responses);\n//         if (data.responses) {\n//           setLoadingContent(false);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors as needed\n//         setLoadingContent(false);\n//       }\n//     }\n//     setLoadingContent(false);\n//   };\n//   fetchData();\n//   //setLoadingContent(false);\n// }, [showResponse, postid, setresponse, setLoadingContent]);\n// useEffect(() => {\n//   //setLoadingContent(true);\n//   if (showResponse) {\n//     fetch(\"/api/answers/\" + postid)\n//       .then((response) => response.json())\n//       .then((data) => setresponse(data.responses));\n//   }\n//   setLoadingContent(false);\n// }, [showResponse, setLoadingContent]);","map":null,"metadata":{},"sourceType":"module"}