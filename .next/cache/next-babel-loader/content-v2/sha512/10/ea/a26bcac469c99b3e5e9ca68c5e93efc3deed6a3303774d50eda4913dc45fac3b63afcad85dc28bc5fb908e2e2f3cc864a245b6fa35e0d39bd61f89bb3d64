{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\"; //import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\n\nimport { connectToDatabase } from \"../../lib/db\";\n\nfunction ItemDetailPage(props) {\n  const event = props.post;\n  console.log(event); // console.log(event.Title);\n  // console.log(event[0].Title);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"I am details page \", event.Type, \" \", props.postId]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.postId;\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const post = data.find(event => event.id === postId); // Ensure post exists before deleting _id\n\n  if (post) {\n    delete post._id;\n  }\n\n  return {\n    props: _objectSpread(_objectSpread({}, post), {}, {\n      // Spread the properties of post\n      postId // Add postId as a prop\n\n    })\n  };\n} // export async function getServerSideProps(context) {\n//   const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   //console.log(data);\n//   const post = data.find((event) => event.id === postId);\n//   delete post._id;\n//   //console.log(post);\n//   // Fetch data from an external source or a database\n//   //await getPostById(postId);\n//   return {\n//     props: {\n//       post,\n//       postId,\n//     },\n//   };\n// }\n// export async function getStaticPaths() {\n//   const events = await getAllPosts();\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\n//   return {\n//     paths: paths,\n//     fallback: \"blocking\",\n//   };\n// }\n\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useEffect","connectToDatabase","ItemDetailPage","props","event","post","console","log","Type","postId","getServerSideProps","context","params","client","db","data","collection","find","toArray","id","_id"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,KAAK,GAAGD,KAAK,CAACE,IAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAH6B,CAI7B;AACA;;AACA,sBACE;AAAA,qCACqBA,KAAK,CAACI,IAD3B,OACkCL,KAAK,CAACM,MADxC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;AACD,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMF,MAAM,GAAGE,OAAO,CAACC,MAAR,CAAeH,MAA9B;AACA,QAAMI,MAAM,GAAG,MAAMZ,iBAAiB,EAAtC;AACA,QAAMa,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,QAAMb,IAAI,GAAGU,IAAI,CAACE,IAAL,CAAWb,KAAD,IAAWA,KAAK,CAACe,EAAN,KAAaV,MAAlC,CAAb,CAPgD,CAShD;;AACA,MAAIJ,IAAJ,EAAU;AACR,WAAOA,IAAI,CAACe,GAAZ;AACD;;AAED,SAAO;AACLjB,IAAAA,KAAK,kCACAE,IADA;AACM;AACTI,MAAAA,MAFG,CAEK;;AAFL;AADA,GAAP;AAMD,C,CAED;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeP,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n//import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\nfunction ItemDetailPage(props) {\r\n  const event = props.post;\r\n\r\n  console.log(event);\r\n  // console.log(event.Title);\r\n  // console.log(event[0].Title);\r\n  return (\r\n    <div>\r\n      I am details page {event.Type} {props.postId}\r\n    </div>\r\n  );\r\n}\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.postId;\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const post = data.find((event) => event.id === postId);\r\n\r\n  // Ensure post exists before deleting _id\r\n  if (post) {\r\n    delete post._id;\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      ...post, // Spread the properties of post\r\n      postId, // Add postId as a prop\r\n    },\r\n  };\r\n}\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   //console.log(data);\r\n//   const post = data.find((event) => event.id === postId);\r\n//   delete post._id;\r\n\r\n//   //console.log(post);\r\n//   // Fetch data from an external source or a database\r\n//   //await getPostById(postId);\r\n\r\n//   return {\r\n//     props: {\r\n//       post,\r\n//       postId,\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n//   const events = await getAllPosts();\r\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\r\n//   return {\r\n//     paths: paths,\r\n//     fallback: \"blocking\",\r\n//   };\r\n// }\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}