{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nimport { useEffect } from \"react\";\nlet cachedClient = null;\nlet clientSet = false;\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\");\n    return cachedClient;\n  }\n\n  let client;\n  const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n  try {\n    client = await MongoClient.connect(connectionString, {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n      poolSize: 10 // Adjust this based on your application's needs\n\n    });\n  } catch (error) {\n    console.error(\"Error connecting to the database:\", error);\n  } // Handle the 'close' event for potential reconnection\n\n\n  client.on(\"close\", () => {\n    console.log(\"Connection closed. Reconnecting...\"); // Implement reconnection logic here, such as calling connectToDatabase()\n\n    connectToDatabase(); //client.connect();\n  });\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const totalPosts = await db.collection(\"PostedItem\").countDocuments();\n  console.log(totalPosts);\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  return data;\n}\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n  const user = await usersCollection.findOne({\n    _id: postobjectId\n  });\n  return user;\n}\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"QAnswers\");\n  const user = await usersCollection.find({\n    PostID: id\n  }).toArray();\n  return user;\n}\nexport async function fetchallemails() {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"users\");\n  const allemails = await usersCollection.find({}, {\n    projection: {\n      password: 0,\n      name: 0,\n      _id: 0\n    }\n  }).toArray();\n  return allemails;\n} // export async function countTotalPosts() {\n//   useEffect(() => {\n//     fetch(\"/api/stats/getposts\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         return data;\n//       })\n//       .catch((error) => {\n//         console.error(\"Fetch error:\", error);\n//       });\n//   }, []);\n// }\n// export async function getProfileData(userEmail) {\n//   const client = await connectToDatabase();\n//   const usersCollection = client.db().collection(\"users\");\n//   const user = await usersCollection.findOne(\n//     { email: userEmail },\n//     { projection: { password: 0 } }\n//   );\n//   return user;\n// }\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// let cachedClient = null;\n// let clientSet = false;\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n//   let client;\n//   const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n//   client = await MongoClient.connect(connectionString, {\n//     useUnifiedTopology: true,\n//     useNewUrlParser: true,\n//     connectTimeoutMS: 30000,\n//   });\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n//   return client;\n// }\n\n/*\n\n\nimport { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\n\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\" + cachedClient);\n    return cachedClient;\n  }\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n    {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n    }\n  );\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\n\n\n*/\n// export async function getPostsByEmail(email) {\n//   //console.log(email);\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts);\n//   // return allPosts.find((event) => event.posterEmail === email);\n//   return allPosts.filter((event) => event.posterEmail === email);\n// }\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n// export async function getResponseDataById(id) {\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"QAnswers\").find({}).toArray();\n//   //console.log(data);\n//   return data.filter((event) => event.PostID === id);\n// }\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// class Database {\n//   constructor() {\n//     if (!Database.instance) {\n//       this.client = null;\n//       this.clientSet = false;\n//       Database.instance = this;\n//     }\n//     return Database.instance;\n//   }\n//   async connect() {\n//     if (this.clientSet) {\n//       console.log(\"return already stored client\");\n//       return this.client;\n//     }\n//     this.client = await MongoClient.connect(\n//       \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//       {\n//         useUnifiedTopology: true,\n//         useNewUrlParser: true,\n//         connectTimeoutMS: 30000,\n//       }\n//     );\n//     if (!this.clientSet) {\n//       this.clientSet = true;\n//       console.log(\"return new client\");\n//     }\n//     return this.client;\n//   }\n// }\n// const database = new Database();\n// export const connectToDatabase = async () => {\n//   try {\n//     return await database.connect();\n//   } catch (error) {\n//     //console.error(\"Error connecting to the database:\", error);\n//     throw error;\n//   }\n// };","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/lib/db.js"],"names":["MongoClient","ObjectId","require","useEffect","cachedClient","clientSet","connectToDatabase","console","log","client","connectionString","process","env","mongodb_username","mongodb_password","mongodb_clustername","mongodb_database","connect","useUnifiedTopology","useNewUrlParser","connectTimeoutMS","poolSize","error","on","getAllPosts","db","totalPosts","collection","countDocuments","data","find","toArray","getPostDataById","id","usersCollection","postobjectId","user","findOne","_id","getResponseDataById","PostID","fetchallemails","allemails","projection","password","name"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\nimport { useEffect } from \"react\";\nlet cachedClient = null;\nlet clientSet = false;\n\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\");\n    return cachedClient;\n  }\n\n  let client;\n\n  const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n  try {\n    client = await MongoClient.connect(connectionString, {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n      poolSize: 10, // Adjust this based on your application's needs\n    });\n  } catch (error) {\n    console.error(\"Error connecting to the database:\", error);\n  }\n\n  // Handle the 'close' event for potential reconnection\n  client.on(\"close\", () => {\n    console.log(\"Connection closed. Reconnecting...\");\n    // Implement reconnection logic here, such as calling connectToDatabase()\n    connectToDatabase();\n    //client.connect();\n  });\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const totalPosts = await db.collection(\"PostedItem\").countDocuments();\n  console.log(totalPosts);\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  return data;\n}\n\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n\n  const user = await usersCollection.findOne({\n    _id: postobjectId,\n  });\n\n  return user;\n}\n\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n\n  const usersCollection = client.db().collection(\"QAnswers\");\n\n  const user = await usersCollection\n    .find({\n      PostID: id,\n    })\n    .toArray();\n  return user;\n}\n\nexport async function fetchallemails() {\n  const client = await connectToDatabase();\n\n  const usersCollection = client.db().collection(\"users\");\n\n  const allemails = await usersCollection\n    .find({}, { projection: { password: 0, name: 0, _id: 0 } })\n    .toArray();\n\n  return allemails;\n}\n\n// export async function countTotalPosts() {\n//   useEffect(() => {\n//     fetch(\"/api/stats/getposts\")\n//       .then((response) => response.json())\n//       .then((data) => {\n//         return data;\n//       })\n//       .catch((error) => {\n//         console.error(\"Fetch error:\", error);\n//       });\n//   }, []);\n// }\n\n// export async function getProfileData(userEmail) {\n//   const client = await connectToDatabase();\n//   const usersCollection = client.db().collection(\"users\");\n//   const user = await usersCollection.findOne(\n//     { email: userEmail },\n//     { projection: { password: 0 } }\n//   );\n\n//   return user;\n// }\n\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n\n// let cachedClient = null;\n// let clientSet = false;\n\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n\n//   let client;\n\n//   const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n//   client = await MongoClient.connect(connectionString, {\n//     useUnifiedTopology: true,\n//     useNewUrlParser: true,\n//     connectTimeoutMS: 30000,\n//   });\n\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n\n//   return client;\n// }\n\n/*\n\n\nimport { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\n\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\" + cachedClient);\n    return cachedClient;\n  }\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n    {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n    }\n  );\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\n\n\n*/\n// export async function getPostsByEmail(email) {\n//   //console.log(email);\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts);\n//   // return allPosts.find((event) => event.posterEmail === email);\n//   return allPosts.filter((event) => event.posterEmail === email);\n// }\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n// export async function getResponseDataById(id) {\n//   const client = await connectToDatabase();\n//   const db = client.db();\n\n//   const data = await db.collection(\"QAnswers\").find({}).toArray();\n\n//   //console.log(data);\n//   return data.filter((event) => event.PostID === id);\n// }\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// class Database {\n//   constructor() {\n//     if (!Database.instance) {\n//       this.client = null;\n//       this.clientSet = false;\n//       Database.instance = this;\n//     }\n\n//     return Database.instance;\n//   }\n\n//   async connect() {\n//     if (this.clientSet) {\n//       console.log(\"return already stored client\");\n//       return this.client;\n//     }\n\n//     this.client = await MongoClient.connect(\n//       \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//       {\n//         useUnifiedTopology: true,\n//         useNewUrlParser: true,\n//         connectTimeoutMS: 30000,\n//       }\n//     );\n\n//     if (!this.clientSet) {\n//       this.clientSet = true;\n//       console.log(\"return new client\");\n//     }\n\n//     return this.client;\n//   }\n// }\n\n// const database = new Database();\n// export const connectToDatabase = async () => {\n//   try {\n//     return await database.connect();\n//   } catch (error) {\n//     //console.error(\"Error connecting to the database:\", error);\n//     throw error;\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}