{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\postcomp\\\\PostNewItem.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./PostNewItem.module.css\";\nimport React, { Fragment } from \"react\";\nimport Button from \"../UI/Button\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\nimport ErrorComp from \"../UI/ErrorComp\";\nimport Noti from \"../../components/notificationOverlay/noti\";\n\nfunction PostNewItem() {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      isImage = _useState2[0],\n      setIsImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  var _useState5 = useState(false),\n      sendEmail = _useState5[0],\n      setIsSendEmail = _useState5[1];\n\n  var typeInputRef = useRef();\n  var categoryInputRef = useRef();\n  var titleInputRef = useRef();\n  var descriptionInputRef = useRef();\n  var questionInputRef = useRef();\n  var dateInputRef = useRef();\n\n  function sendEmails(_x, _x2) {\n    return _sendEmails.apply(this, arguments);\n  }\n\n  function _sendEmails() {\n    _sendEmails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subject, message) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"/api/email/sendEmail\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  subject: subject,\n                  message: message\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context2.sent;\n\n              if (!response.ok) {\n                // Handle non-2xx HTTP response status\n                console.error(\"Error sending email. Status: \".concat(response.status));\n              }\n\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context2.sent;\n\n              if (data.success) {\n                setIsSendEmail(true);\n              }\n\n              return _context2.abrupt(\"return\", data);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _sendEmails.apply(this, arguments);\n  }\n\n  function sendPostData(_x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n    return _sendPostData.apply(this, arguments);\n  }\n\n  function _sendPostData() {\n    _sendPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(Type, Category, Title, Description, Question, Date, imageInbase64) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"/api/post/postitem\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  Type: Type,\n                  Category: Category,\n                  Title: Title,\n                  Description: Description,\n                  Question: Question,\n                  Date: Date,\n                  ReducedImg: imageInbase64\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context3.sent;\n              _context3.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context3.sent;\n\n              if (!response.ok) {\n                setIsErrorData(data.message);\n                setIsLoading(false);\n                setIsError(true);\n              }\n\n              return _context3.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _sendPostData.apply(this, arguments);\n  }\n\n  function converttobase64(e) {\n    // console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n\n    reader.onload = function () {\n      //console.log(reader.result);\n      setIsImage(reader.result);\n    };\n\n    reader.onerror = function () {\n      console.log(\"error\", error);\n    };\n  }\n\n  var postSubmitHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var enteredType, enteredCategory, enteredTitle, enteredDescription, enteredQuestion, enteredDate, humanReadableDate, message, subject, emailres, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setIsLoading(true);\n              enteredType = typeInputRef.current.value;\n              enteredCategory = categoryInputRef.current.value;\n              enteredTitle = titleInputRef.current.value;\n              enteredDescription = descriptionInputRef.current.value;\n              enteredQuestion = questionInputRef.current.value;\n              enteredDate = dateInputRef.current.value;\n              humanReadableDate = new Date(enteredDate).toLocaleDateString(\"en-US\", {\n                day: \"numeric\",\n                month: \"long\",\n                year: \"numeric\"\n              });\n              message = \"\".concat(enteredType, \" \").concat(enteredCategory, \"\\n  \\nItem Name: \").concat(enteredTitle, \"\\nDate: \").concat(humanReadableDate, \"\\nDescription: \").concat(enteredDescription, \"\\n\\nIf you have any information about the \").concat(enteredType, \" item, kindly visit the LostNest web application.\\n\\nThank you\\n\");\n              subject = \"\".concat(enteredType, \" : \").concat(enteredTitle);\n              _context.next = 13;\n              return sendEmails(subject, message);\n\n            case 13:\n              emailres = _context.sent;\n              _context.next = 16;\n              return sendPostData(enteredType, enteredCategory, enteredTitle, enteredDescription, enteredQuestion, humanReadableDate, isImage);\n\n            case 16:\n              result = _context.sent;\n              event.target.reset(); // This resets the form\n\n              setIsImage(\"\"); // Clear the image state\n\n              setIsLoading(false);\n              setIsSendEmail(false);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function postSubmitHandler(_x10) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // if (isLoading) {\n  //   return <Loading />;\n  // }\n\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formstyle3,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: postSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: \"Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.divider,\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"item\",\n              className: classes.inputfield,\n              ref: typeInputRef,\n              children: /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Lost\",\n                children: \"Lost\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              defaultValue: \"Category\",\n              name: \"category\",\n              className: classes.inputfield,\n              ref: categoryInputRef,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Category\",\n                disabled: true,\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Wallet\",\n                children: \"Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"ID Card / Student Card\",\n                children: \"ID Card / Student Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Smart Phone / Laptop\",\n                children: \"Smart Phone / Laptop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Keys\",\n                children: \"Keys\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Others\",\n                children: \"Others\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"field3\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Item Name \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"field3\",\n              placeholder: \"Title\",\n              className: classes.inputfield,\n              ref: titleInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"field4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Enter question based on an item.\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"field4\",\n              placeholder: \"Ex:- What is the color of the phone?\",\n              className: classes.inputfield,\n              ref: questionInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Select a Date: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"date\",\n              id: \"date\",\n              className: classes.customselect,\n              ref: dateInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Description \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"Description about item (like location etc...)\",\n              className: classes.textareafield,\n              ref: descriptionInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"image\",\n            name: \"image\",\n            accept: \"image/*\",\n            className: classes.customselect,\n            style: {\n              width: \"100%\"\n            },\n            onChange: converttobase64,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.center,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              content: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), sendEmail && /*#__PURE__*/_jsxDEV(Noti, {\n      data: \"Email Successfully Sent to LostNest Registered Users!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostNewItem, \"NIya+hWBHorh79F+gl3a/3F+tgk=\");\n\n_c = PostNewItem;\nexport default PostNewItem;\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PostNewItem\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/postcomp/PostNewItem.js"],"names":["classes","React","Fragment","Button","useRef","useState","Loading","ErrorComp","Noti","PostNewItem","isLoading","setIsLoading","isImage","setIsImage","isError","setIsError","isErrorData","setIsErrorData","sendEmail","setIsSendEmail","typeInputRef","categoryInputRef","titleInputRef","descriptionInputRef","questionInputRef","dateInputRef","sendEmails","subject","message","fetch","method","body","JSON","stringify","headers","response","ok","console","error","status","json","data","success","sendPostData","Type","Category","Title","Description","Question","Date","imageInbase64","ReducedImg","converttobase64","e","reader","FileReader","readAsDataURL","target","files","onload","result","onerror","log","postSubmitHandler","event","preventDefault","enteredType","current","value","enteredCategory","enteredTitle","enteredDescription","enteredQuestion","enteredDate","humanReadableDate","toLocaleDateString","day","month","year","emailres","reset","formstyle3","divider","inputfield","required","customselect","textareafield","width","center"],"mappings":"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":["import classes from \"./PostNewItem.module.css\";\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\nimport Noti from \"../../components/notificationOverlay/noti\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n  const [sendEmail, setIsSendEmail] = useState(false);\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(subject, message) {\r\n    const response = await fetch(\"/api/email/sendEmail\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        subject,\r\n        message,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // Handle non-2xx HTTP response status\r\n      console.error(`Error sending email. Status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.success) {\r\n      setIsSendEmail(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n\r\n    const message = `${enteredType} ${enteredCategory}\r\n  \r\nItem Name: ${enteredTitle}\r\nDate: ${humanReadableDate}\r\nDescription: ${enteredDescription}\r\n\r\nIf you have any information about the ${enteredType} item, kindly visit the LostNest web application.\r\n\r\nThank you\r\n`;\r\n\r\n    const subject = `${enteredType} : ${enteredTitle}`;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n    // setIsSendEmail(false);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n    setIsSendEmail(false);\r\n  };\r\n\r\n  // if (isLoading) {\r\n  //   return <Loading />;\r\n  // }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.formstyle3}>\r\n        <form onSubmit={postSubmitHandler}>\r\n          <fieldset>\r\n            <legend>Data</legend>\r\n            <div className={classes.divider}>\r\n              <select\r\n                name=\"item\"\r\n                className={classes.inputfield}\r\n                ref={typeInputRef}\r\n              >\r\n                <option value=\"Lost\">Lost</option>\r\n              </select>\r\n              <select\r\n                defaultValue=\"Category\"\r\n                name=\"category\"\r\n                className={classes.inputfield}\r\n                ref={categoryInputRef}\r\n                required\r\n              >\r\n                <option value=\"Category\" disabled>\r\n                  Category\r\n                </option>\r\n                <option value=\"Wallet\">Wallet</option>\r\n                <option value=\"ID Card / Student Card\">\r\n                  ID Card / Student Card\r\n                </option>\r\n                <option value=\"Smart Phone / Laptop\">\r\n                  Smart Phone / Laptop\r\n                </option>\r\n                <option value=\"Keys\">Keys</option>\r\n                <option value=\"Others\">Others</option>\r\n              </select>\r\n            </div>\r\n\r\n            <label htmlFor=\"field3\">\r\n              <span>\r\n                Item Name <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"field3\"\r\n                placeholder=\"Title\"\r\n                className={classes.inputfield}\r\n                ref={titleInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n            <label htmlFor=\"field4\">\r\n              <span>\r\n                Enter question based on an item.\r\n                <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"field4\"\r\n                placeholder=\"Ex:- What is the color of the phone?\"\r\n                className={classes.inputfield}\r\n                ref={questionInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n\r\n            <label htmlFor=\"date\">\r\n              <span>\r\n                Select a Date: <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                id=\"date\"\r\n                className={classes.customselect}\r\n                ref={dateInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Details</legend>\r\n            <label htmlFor=\"description\">\r\n              <span>\r\n                Description <span className={classes.required}>*</span>\r\n              </span>\r\n              <textarea\r\n                type=\"text\"\r\n                name=\"description\"\r\n                placeholder=\"Description about item (like location etc...)\"\r\n                className={classes.textareafield}\r\n                ref={descriptionInputRef}\r\n                required\r\n              ></textarea>\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"image\"\r\n              name=\"image\"\r\n              accept=\"image/*\"\r\n              className={classes.customselect}\r\n              style={{ width: \"100%\" }}\r\n              onChange={converttobase64}\r\n              required\r\n            />\r\n            <div className={classes.center}>\r\n              <Button content=\"Post\"></Button>\r\n            </div>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n      {sendEmail && (\r\n        <Noti data=\"Email Successfully Sent to LostNest Registered Users!\" />\r\n      )}\r\n      {/* {isLoading && <Loading />} */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n\r\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}