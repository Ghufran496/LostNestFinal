{"ast":null,"code":"import _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\overlayForm\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport classes from \"./Form.module.css\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\n\nfunction Form(props) {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var answerInputRef = useRef();\n\n  function sendQuestionData(_x, _x2) {\n    return _sendQuestionData.apply(this, arguments);\n  }\n\n  function _sendQuestionData() {\n    _sendQuestionData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredAnswer, postID) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"/api/qresponse/QuestionResponse\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  Type: Type\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n\n              if (!response.ok) {\n                setIsLoading(false);\n              }\n\n              return _context.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _sendQuestionData.apply(this, arguments);\n  }\n\n  var answerSubmitHandler = function answerSubmitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    var enteredAnswer = answerInputRef.current.value;\n    var postID = props._id;\n    var result = sendQuestionData(enteredAnswer, postID); // console.log(result);\n\n    event.target.reset(); // This resets the form\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.main,\n    onSubmit: answerSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"question\",\n      className: classes.labels,\n      children: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"questionContent\",\n      className: classes.span1,\n      children: props.data2.Question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"answer\",\n      className: classes.labels,\n      children: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"answer\",\n      className: classes.inputfield,\n      ref: answerInputRef,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"button\",\n        role: \"button\",\n        onClick: props.oncancle,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"submit\",\n        role: \"button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"/Dsd/yR0bvR/bHR0C0Ge9ng9XYQ=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/overlayForm/Form.js"],"names":["React","classes","useRef","useState","Loading","Form","props","isLoading","setIsLoading","answerInputRef","sendQuestionData","enteredAnswer","postID","fetch","method","body","JSON","stringify","Type","headers","response","json","data","ok","answerSubmitHandler","event","preventDefault","current","value","_id","result","target","reset","main","labels","span1","data2","Question","inputfield","btndiv","button89","oncancle"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Form.module.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\n\r\nfunction Form(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const answerInputRef = useRef();\r\n\r\n  async function sendQuestionData(enteredAnswer, postID) {\r\n    const response = await fetch(\"/api/qresponse/QuestionResponse\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n    }\r\n\r\n    return data;\r\n  }\r\n  const answerSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredAnswer = answerInputRef.current.value;\r\n    const postID = props._id;\r\n\r\n    const result = sendQuestionData(enteredAnswer, postID);\r\n\r\n    // console.log(result);\r\n    event.target.reset(); // This resets the form\r\n  };\r\n\r\n  return (\r\n    <form className={classes.main} onSubmit={answerSubmitHandler}>\r\n      <label htmlFor=\"question\" className={classes.labels}>\r\n        Question\r\n      </label>\r\n      <br />\r\n      <span id=\"questionContent\" className={classes.span1}>\r\n        {props.data2.Question}\r\n      </span>\r\n      <br />\r\n      <label htmlFor=\"answer\" className={classes.labels}>\r\n        Answer\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"answer\"\r\n        className={classes.inputfield}\r\n        ref={answerInputRef}\r\n        required\r\n      />\r\n      <br />\r\n      <div className={classes.btndiv}>\r\n        <button\r\n          className={classes.button89}\r\n          type=\"button\"\r\n          role=\"button\"\r\n          onClick={props.oncancle}\r\n        >\r\n          Close\r\n        </button>\r\n        <button className={classes.button89} type=\"submit\" role=\"button\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}