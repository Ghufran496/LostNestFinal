{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\nimport React, { useEffect } from \"react\"; //import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\n\nimport { connectToDatabase } from \"../../lib/db\";\n\nfunction ItemDetailPage(props) {\n  const event = props.selectedEvent;\n  console.log(event); // console.log(event.Title);\n  // console.log(event[0].Title);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"I am details page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray(); //console.log(data);\n\n  const post = data.find(event => event.id === postId);\n  delete post._id; //console.log(post);\n  // Fetch data from an external source or a database\n  //await getPostById(postId);\n\n  return {\n    props: {\n      post\n    }\n  };\n} // export async function getStaticPaths() {\n//   const events = await getAllPosts();\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\n//   return {\n//     paths: paths,\n//     fallback: \"blocking\",\n//   };\n// }\n\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useEffect","connectToDatabase","ItemDetailPage","props","event","selectedEvent","console","log","getServerSideProps","context","postId","params","client","db","data","collection","find","toArray","post","id","_id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,KAAK,GAAGD,KAAK,CAACE,aAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAH6B,CAI7B;AACA;;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AAED,OAAO,eAAeI,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeD,MAA9B,CADgD,CACV;;AACtC,QAAME,MAAM,GAAG,MAAMX,iBAAiB,EAAtC;AACA,QAAMY,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB,CALgD,CAOhD;;AACA,QAAMC,IAAI,GAAGJ,IAAI,CAACE,IAAL,CAAWZ,KAAD,IAAWA,KAAK,CAACe,EAAN,KAAaT,MAAlC,CAAb;AACA,SAAOQ,IAAI,CAACE,GAAZ,CATgD,CAUhD;AACA;AACA;;AAEA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLe,MAAAA;AADK;AADF,GAAP;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAehB,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n//import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\nfunction ItemDetailPage(props) {\r\n  const event = props.selectedEvent;\r\n\r\n  console.log(event);\r\n  // console.log(event.Title);\r\n  // console.log(event[0].Title);\r\n  return <div>I am details page</div>;\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  //console.log(data);\r\n  const post = data.find((event) => event.id === postId);\r\n  delete post._id;\r\n  //console.log(post);\r\n  // Fetch data from an external source or a database\r\n  //await getPostById(postId);\r\n\r\n  return {\r\n    props: {\r\n      post,\r\n    },\r\n  };\r\n}\r\n\r\n// export async function getStaticPaths() {\r\n//   const events = await getAllPosts();\r\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\r\n//   return {\r\n//     paths: paths,\r\n//     fallback: \"blocking\",\r\n//   };\r\n// }\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}