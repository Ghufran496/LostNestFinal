{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\feed\\\\AllItems.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport PostGrid from \"./PostGrid\";\nimport ErrorComp from \"../UI/ErrorComp\"; // import Loader from \"../UI/Loader\";\n\nimport Loading from \"../UI/Loading\";\n\nfunction AllItems() {\n  _s();\n\n  var _useState = useState(\"\"),\n      isData = _useState[0],\n      setIsData = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  useEffect(function () {\n    var isMounted = true; // Flag to track if the component is mounted\n\n    setIsLoading(true);\n    fetch(\"/api/post/postitem\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      console.log(\"data in client\" + data);\n\n      if (isMounted) {\n        setIsData(data);\n\n        if (data.message) {\n          setIsErrorData(data.message);\n          setIsError(true);\n        }\n\n        setIsLoading(false);\n      }\n    })[\"catch\"](function (error) {\n      if (isMounted) {\n        setIsError(true);\n        setIsErrorData(\"An error occurred while fetching data.\");\n        setIsLoading(false);\n      }\n\n      console.error(\"Fetch error:\", error);\n    }); // Cleanup function\n\n    return function () {\n      isMounted = false; // Set flag to false when component is unmounted\n    };\n  }, [setIsData, setIsError, setIsErrorData]);\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PostGrid, {\n      data: isData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllItems, \"u9Pdcpvk3j9H2eg7IiQ8vroAKGM=\");\n\n_c = AllItems;\nexport default AllItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllItems\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/feed/AllItems.js"],"names":["React","useEffect","useState","PostGrid","ErrorComp","Loading","AllItems","isData","setIsData","isLoading","setIsLoading","isError","setIsError","isErrorData","setIsErrorData","isMounted","fetch","then","response","json","data","console","log","message","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,eAApB;;AACA,SAASC,QAAT,GAAoB;AAAA;;AAAA,kBACUJ,QAAQ,CAAC,EAAD,CADlB;AAAA,MACXK,MADW;AAAA,MACHC,SADG;;AAAA,mBAEgBN,QAAQ,CAAC,KAAD,CAFxB;AAAA,MAEXO,SAFW;AAAA,MAEAC,YAFA;;AAAA,mBAGYR,QAAQ,CAAC,KAAD,CAHpB;AAAA,MAGXS,OAHW;AAAA,MAGFC,UAHE;;AAAA,mBAIoBV,QAAQ,CAC5C,wDAD4C,CAJ5B;AAAA,MAIXW,WAJW;AAAA,MAIEC,cAJF;;AAQlBb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,SAAS,GAAG,IAAhB,CADc,CACQ;;AAEtBL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAM,IAAAA,KAAK,CAAC,oBAAD,CAAL,CACGC,IADH,CACQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,IAA/B;;AACA,UAAIL,SAAJ,EAAe;AACbP,QAAAA,SAAS,CAACY,IAAD,CAAT;;AACA,YAAIA,IAAI,CAACG,OAAT,EAAkB;AAChBT,UAAAA,cAAc,CAACM,IAAI,CAACG,OAAN,CAAd;AACAX,UAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACDF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAZH,WAaS,UAACc,KAAD,EAAW;AAChB,UAAIT,SAAJ,EAAe;AACbH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,cAAc,CAAC,wCAAD,CAAd;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AACDW,MAAAA,OAAO,CAACG,KAAR,CAAc,cAAd,EAA8BA,KAA9B;AACD,KApBH,EALc,CA2Bd;;AACA,WAAO,YAAM;AACXT,MAAAA,SAAS,GAAG,KAAZ,CADW,CACQ;AACpB,KAFD;AAGD,GA/BQ,EA+BN,CAACP,SAAD,EAAYI,UAAZ,EAAwBE,cAAxB,CA/BM,CAAT;;AAiCA,MAAIH,OAAJ,EAAa;AACX,wBAAO,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEE;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEN;AAAhB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,SAAS,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAnDQH,Q;;KAAAA,Q;AAqDT,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport PostGrid from \"./PostGrid\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n// import Loader from \"../UI/Loader\";\r\nimport Loading from \"../UI/Loading\";\r\nfunction AllItems() {\r\n  const [isData, setIsData] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // Flag to track if the component is mounted\r\n\r\n    setIsLoading(true);\r\n\r\n    fetch(\"/api/post/postitem\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"data in client\" + data);\r\n        if (isMounted) {\r\n          setIsData(data);\r\n          if (data.message) {\r\n            setIsErrorData(data.message);\r\n            setIsError(true);\r\n          }\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (isMounted) {\r\n          setIsError(true);\r\n          setIsErrorData(\"An error occurred while fetching data.\");\r\n          setIsLoading(false);\r\n        }\r\n        console.error(\"Fetch error:\", error);\r\n      });\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false; // Set flag to false when component is unmounted\r\n    };\r\n  }, [setIsData, setIsError, setIsErrorData]);\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <PostGrid data={isData} />\r\n      {isLoading && <Loading />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllItems;\r\n"]},"metadata":{},"sourceType":"module"}