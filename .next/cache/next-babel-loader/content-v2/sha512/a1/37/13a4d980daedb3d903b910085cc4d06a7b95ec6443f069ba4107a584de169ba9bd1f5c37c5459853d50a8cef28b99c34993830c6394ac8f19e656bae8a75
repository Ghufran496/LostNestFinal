{"ast":null,"code":"// import React, { useEffect } from \"react\";\n// //import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\n// import { connectToDatabase } from \"../../lib/db\";\n// function ItemDetailPage(props) {\n//   const event = props.post;\n//   console.log(event);\n//   // console.log(event.Title);\n//   // console.log(event[0].Title);\n//   return (\n//     <div>\n//       I am details page {event.Type} {props.postId}\n//     </div>\n//   );\n// }\n// export async function getServerSideProps(context) {\n//   const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   //console.log(data);\n//   const post = data.find((event) => event.id === postId);\n//   delete post._id;\n//   //console.log(post);\n//   // Fetch data from an external source or a database\n//   //await getPostById(postId);\n//   return {\n//     props: {\n//       post,\n//       postId,\n//     },\n//   };\n// }\n// export async function getStaticPaths() {\n//   const events = await getAllPosts();\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\n//   return {\n//     paths: paths,\n//     fallback: \"blocking\",\n//   };\n// }\nexport var __N_SSP = true;\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["ItemDetailPage"],"mappings":"AAsBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeA,cAAf","sourcesContent":["export async function getServerSideProps(context) {\r\n  const postId = context.params.postId;\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const post = data.find((event) => event.id === postId);\r\n\r\n  // Ensure post exists before deleting _id\r\n  if (post) {\r\n    delete post._id;\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      ...post, // Spread the properties of post\r\n      postId, // Add postId as a prop\r\n    },\r\n  };\r\n}\r\n\r\n// import React, { useEffect } from \"react\";\r\n// //import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\r\n// import { connectToDatabase } from \"../../lib/db\";\r\n// function ItemDetailPage(props) {\r\n//   const event = props.post;\r\n\r\n//   console.log(event);\r\n//   // console.log(event.Title);\r\n//   // console.log(event[0].Title);\r\n//   return (\r\n//     <div>\r\n//       I am details page {event.Type} {props.postId}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.postId; // Assuming you have a dynamic route like /posts/[postId]\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   //console.log(data);\r\n//   const post = data.find((event) => event.id === postId);\r\n//   delete post._id;\r\n\r\n//   //console.log(post);\r\n//   // Fetch data from an external source or a database\r\n//   //await getPostById(postId);\r\n\r\n//   return {\r\n//     props: {\r\n//       post,\r\n//       postId,\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n//   const events = await getAllPosts();\r\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\r\n//   return {\r\n//     paths: paths,\r\n//     fallback: \"blocking\",\r\n//   };\r\n// }\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}