{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"H:\\\\React Course\\\\NextJS work\\\\Next_Sec_14_Authentication\\\\components\\\\auth\\\\auth-form.js\";\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const {\n    0: toggleForms,\n    1: setToggleForms\n  } = useState(false);\n\n  const toggleForm = () => {\n    setToggleForms(prev => !prev);\n  };\n\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n  const {\n    0: isLogin,\n    1: setIsLogin\n  } = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(prevState => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value; // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/profile\");\n      }\n    } else {\n      try {\n        const result = await createUser(enteredEmail, enteredPassword);\n        console.log(result);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.col1,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formbox,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.form,\n        children: [!toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.loginform,\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: classes.mainheading,\n              children: \"Login Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\",\n            ref: loginEmailInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: loginPasswordInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            content: \"LOGIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.message,\n            children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.registerform,\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: classes.mainheading,\n              children: \"Register Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"user name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: registerPasswordInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            content: \"REGISTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.message,\n            children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\nexport default AuthForm;","map":{"version":3,"sources":["H:/React Course/NextJS work/Next_Sec_14_Authentication/components/auth/auth-form.js"],"names":["useState","useRef","signIn","useRouter","Link","Button","classes","createUser","email","password","response","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","AuthForm","toggleForms","setToggleForms","toggleForm","prev","loginEmailInputRef","loginPasswordInputRef","isLogin","setIsLogin","router","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","emailInputRef","current","value","enteredPassword","passwordInputRef","result","redirect","error","replace","console","log","col1","formbox","form","loginform","mainheading","link","registerform","registerPasswordInputRef"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/profile\");\n      }\n    } else {\n      try {\n        const result = await createUser(enteredEmail, enteredPassword);\n        console.log(result);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\"></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form className={classes.registerform}>\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input type=\"text\" placeholder=\"user name\" />\n              <input type=\"email\" placeholder=\"email-id\" />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button content=\"REGISTER\"></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}