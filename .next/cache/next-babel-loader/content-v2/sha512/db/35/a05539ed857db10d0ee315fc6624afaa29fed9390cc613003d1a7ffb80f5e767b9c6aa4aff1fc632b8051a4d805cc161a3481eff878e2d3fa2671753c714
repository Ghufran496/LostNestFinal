{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\mylistings\\\\[specificid].js\";\nimport React from \"react\";\nimport classes from \"./specificid.module.css\";\nimport Loading from \"../../components/UI/Loading\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport { useState, useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport Answer from \"../../components/answers/answer\";\nimport { getPostDataById } from \"../../lib/db\";\n\nfunction specificid(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: processedObject,\n    1: setProcessedObject\n  } = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        extractedObject\n      } = props;\n\n      if (typeof extractedObject === \"object\") {\n        setProcessedObject(extractedObject);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n    };\n\n    fetchData();\n  }, [props.extractedObject]);\n\n  if (isLoading || !processedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  const event = processedObject;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Answer, {\n      postid: event._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const {\n    params\n  } = context;\n  const {\n    specificid\n  } = params;\n  const postData = await getPostDataById(specificid);\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(postData))\n    }\n  };\n}\nexport default specificid;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/mylistings/[specificid].js"],"names":["React","classes","Loading","EventSummary","EventLogistics","EventContent","useState","useEffect","Fragment","Head","Answer","getPostDataById","specificid","props","isLoading","setIsLoading","processedObject","setProcessedObject","fetchData","extractedObject","event","Title","Description","Date","ReducedImg","Type","Category","_id","getServerSideProps","context","params","postData","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport classes from \"./specificid.module.css\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\nimport Answer from \"../../components/answers/answer\";\r\n\r\nimport { getPostDataById } from \"../../lib/db\";\r\n\r\nfunction specificid(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [processedObject, setProcessedObject] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { extractedObject } = props;\r\n\r\n      if (typeof extractedObject === \"object\") {\r\n        setProcessedObject(extractedObject);\r\n        setIsLoading(false);\r\n      } else {\r\n        setIsLoading(true);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [props.extractedObject]);\r\n\r\n  if (isLoading || !processedObject) {\r\n    return <Loading />;\r\n  }\r\n\r\n  const event = processedObject;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n\r\n      <Answer postid={event._id} />\r\n    </Fragment>\r\n  );\r\n}\r\nexport async function getServerSideProps(context) {\r\n  const { params } = context;\r\n  const { specificid } = params;\r\n\r\n  const postData = await getPostDataById(specificid);\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(postData)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default specificid;\r\n"]},"metadata":{},"sourceType":"module"}