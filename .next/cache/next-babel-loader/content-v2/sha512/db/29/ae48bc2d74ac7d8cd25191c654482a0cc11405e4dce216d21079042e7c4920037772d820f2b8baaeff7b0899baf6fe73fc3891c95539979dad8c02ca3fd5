{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport AnswerList from \"./answer-list\";\nimport classes from \"./answer.module.css\";\n\nfunction Answer(props) {\n  var postid = props.postid; //console.log(postid);\n\n  var _useState = useState(false),\n      showResponse = _useState[0],\n      setShowResponse = _useState[1];\n\n  var _useState2 = useState(false),\n      showLoadingContent = _useState2[0],\n      setLoadingContent = _useState2[1];\n\n  var _useState3 = useState([]),\n      response = _useState3[0],\n      setresponse = _useState3[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _response, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!showResponse) {\n                  _context.next = 18;\n                  break;\n                }\n\n                setLoadingContent(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return fetch(\"/api/answers/\" + postid);\n\n              case 5:\n                _response = _context.sent;\n                _context.next = 8;\n                return _response.json();\n\n              case 8:\n                data = _context.sent;\n                setresponse(data.responses);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(\"Error fetching data:\", _context.t0); // Handle errors as needed\n\n              case 15:\n                _context.prev = 15;\n                setLoadingContent(false);\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12, 15, 18]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // Only fetch data if showResponse is true and responses are not already available\n\n\n    if (showResponse && response.length === 0) {\n      fetchData();\n    }\n  }, [showResponse, postid, setresponse, setLoadingContent]);\n\n  function toggleResponseHandler() {\n    setShowResponse(function (prevStatus) {\n      return !prevStatus;\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"section\", {\n    className: classes.responses,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsxs(\"button\", {\n        onClick: toggleResponseHandler,\n        className: classes.button52,\n        children: [showResponse ? \"Hide\" : \"Show\", \" Responses\"]\n      })\n    }), showLoadingContent && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        color: \"red\",\n        fontSize: \"2rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"No responses yet!\"\n    }), response.length === 0 && !showLoadingContent && /*#__PURE__*/_jsx(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        color: \"red\",\n        fontSize: \"2rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"NoOne has responded yet!\"\n    }), showResponse && /*#__PURE__*/_jsx(AnswerList, {\n      ansitems: response\n    })]\n  });\n}\n\nexport default Answer; // useEffect(() => {\n//   const fetchData = async () => {\n//     if (showResponse) {\n//       setLoadingContent(true);\n//       try {\n//         const response = await fetch(\"/api/answers/\" + postid);\n//         const data = await response.json();\n//         setresponse(data.responses);\n//         if (data.responses) {\n//           setLoadingContent(false);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors as needed\n//         setLoadingContent(false);\n//       }\n//     }\n//     setLoadingContent(false);\n//   };\n//   fetchData();\n//   //setLoadingContent(false);\n// }, [showResponse, postid, setresponse, setLoadingContent]);\n// useEffect(() => {\n//   //setLoadingContent(true);\n//   if (showResponse) {\n//     fetch(\"/api/answers/\" + postid)\n//       .then((response) => response.json())\n//       .then((data) => setresponse(data.responses));\n//   }\n//   setLoadingContent(false);\n// }, [showResponse, setLoadingContent]);","map":null,"metadata":{},"sourceType":"module"}