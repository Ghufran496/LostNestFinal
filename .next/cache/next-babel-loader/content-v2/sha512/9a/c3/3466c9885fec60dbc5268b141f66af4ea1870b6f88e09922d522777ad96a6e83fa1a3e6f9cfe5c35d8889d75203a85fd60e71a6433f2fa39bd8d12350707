{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\" + cachedClient);\n    return cachedClient;\n  }\n\n  const client = await MongoClient.connect(\"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true,\n    useNewUrlParser: true,\n    connectTimeoutMS: 30000\n  });\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db(); //const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  return data;\n}\nexport async function getPostsByEmail(email) {\n  //console.log(email);\n  const allPosts = await getAllPosts(); //console.log(allPosts);\n  // return allPosts.find((event) => event.posterEmail === email);\n\n  return allPosts.filter(event => event.posterEmail === email);\n}\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n  const user = await usersCollection.findOne({\n    _id: postobjectId\n  });\n  return user;\n} // export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"QAnswers\").find({}).toArray(); //console.log(data);\n\n  return data.filter(event => event.PostID === id);\n} // export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/lib/db.js"],"names":["MongoClient","ObjectId","require","cachedClient","clientSet","connectToDatabase","console","log","client","connect","useUnifiedTopology","useNewUrlParser","connectTimeoutMS","getAllPosts","db","data","collection","find","toArray","getPostsByEmail","email","allPosts","filter","event","posterEmail","getPostDataById","id","usersCollection","postobjectId","user","findOne","_id","getResponseDataById","PostID"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B;;AAEA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,SAAS,GAAG,KAAhB;AAEA,OAAO,eAAeC,iBAAf,GAAmC;AACxC,MAAID,SAAJ,EAAe;AACbE,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCJ,YAA7C;AACA,WAAOA,YAAP;AACD;;AAED,QAAMK,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,mGADmB,EAEnB;AACEC,IAAAA,kBAAkB,EAAE,IADtB;AAEEC,IAAAA,eAAe,EAAE,IAFnB;AAGEC,IAAAA,gBAAgB,EAAE;AAHpB,GAFmB,CAArB;;AASA,MAAI,CAACR,SAAL,EAAgB;AACdD,IAAAA,YAAY,GAAGK,MAAf;AACAJ,IAAAA,SAAS,GAAG,IAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;;AAED,SAAOC,MAAP;AACD;AAED,OAAO,eAAeK,WAAf,GAA6B;AAClC,QAAML,MAAM,GAAG,MAAMH,iBAAiB,EAAtC;AACA,QAAMS,EAAE,GAAGN,MAAM,CAACM,EAAP,EAAX,CAFkC,CAIlC;;AACA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,SAAOH,IAAP;AACD;AAED,OAAO,eAAeI,eAAf,CAA+BC,KAA/B,EAAsC;AAC3C;AACA,QAAMC,QAAQ,GAAG,MAAMR,WAAW,EAAlC,CAF2C,CAG3C;AACA;;AACA,SAAOQ,QAAQ,CAACC,MAAT,CAAiBC,KAAD,IAAWA,KAAK,CAACC,WAAN,KAAsBJ,KAAjD,CAAP;AACD;AAED,OAAO,eAAeK,eAAf,CAA+BC,EAA/B,EAAmC;AACxC,QAAMlB,MAAM,GAAG,MAAMH,iBAAiB,EAAtC;AACA,QAAMsB,eAAe,GAAGnB,MAAM,CAACM,EAAP,GAAYE,UAAZ,CAAuB,YAAvB,CAAxB;AACA,QAAMY,YAAY,GAAG,IAAI3B,QAAJ,CAAayB,EAAb,CAArB;AAEA,QAAMG,IAAI,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwB;AACzCC,IAAAA,GAAG,EAAEH;AADoC,GAAxB,CAAnB;AAIA,SAAOC,IAAP;AACD,C,CAED;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeG,mBAAf,CAAmCN,EAAnC,EAAuC;AAC5C,QAAMlB,MAAM,GAAG,MAAMH,iBAAiB,EAAtC;AACA,QAAMS,EAAE,GAAGN,MAAM,CAACM,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,UAAd,EAA0BC,IAA1B,CAA+B,EAA/B,EAAmCC,OAAnC,EAAnB,CAJ4C,CAM5C;;AACA,SAAOH,IAAI,CAACO,MAAL,CAAaC,KAAD,IAAWA,KAAK,CAACU,MAAN,KAAiBP,EAAxC,CAAP;AACD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\n\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\" + cachedClient);\n    return cachedClient;\n  }\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n    {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n    }\n  );\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  //const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  return data;\n}\n\nexport async function getPostsByEmail(email) {\n  //console.log(email);\n  const allPosts = await getAllPosts();\n  //console.log(allPosts);\n  // return allPosts.find((event) => event.posterEmail === email);\n  return allPosts.filter((event) => event.posterEmail === email);\n}\n\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n\n  const user = await usersCollection.findOne({\n    _id: postobjectId,\n  });\n\n  return user;\n}\n\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  const data = await db.collection(\"QAnswers\").find({}).toArray();\n\n  //console.log(data);\n  return data.filter((event) => event.PostID === id);\n}\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n"]},"metadata":{},"sourceType":"module"}