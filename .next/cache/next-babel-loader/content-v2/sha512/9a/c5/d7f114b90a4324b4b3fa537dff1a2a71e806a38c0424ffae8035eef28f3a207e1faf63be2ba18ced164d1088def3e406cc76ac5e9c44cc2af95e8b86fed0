{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\answers\\\\answer.js\";\nimport { useEffect, useState } from \"react\";\nimport AnswerList from \"./answer-list\";\nimport classes from \"./answer.module.css\";\n\nfunction Answer(props) {\n  const {\n    postid\n  } = props; //console.log(postid);\n\n  const {\n    0: showResponse,\n    1: setShowResponse\n  } = useState(false);\n  const {\n    0: showLoadingContent,\n    1: setLoadingContent\n  } = useState(false);\n  const {\n    0: response,\n    1: setresponse\n  } = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (showResponse) {\n        setLoadingContent(true);\n\n        try {\n          const response = await fetch(\"/api/answers/\" + postid);\n          const data = await response.json();\n          setresponse(data.responses);\n        } catch (error) {\n          console.error(\"Error fetching data:\", error); // Handle errors as needed\n        } finally {\n          setLoadingContent(false);\n        }\n      }\n    }; // Only fetch data if showResponse is true and responses are not already available\n\n\n    if (showResponse && response.length === 0) {\n      fetchData();\n    }\n  }, [showResponse, postid, setresponse, setLoadingContent]);\n\n  function toggleResponseHandler() {\n    setShowResponse(prevStatus => !prevStatus);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.responses,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleResponseHandler,\n        className: classes.button52,\n        children: [showResponse ? \"Hide\" : \"Show\", \" Responses\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), showLoadingContent && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: \"No responses yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), showResponse && /*#__PURE__*/_jsxDEV(AnswerList, {\n      ansitems: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Answer; // useEffect(() => {\n//   const fetchData = async () => {\n//     if (showResponse) {\n//       setLoadingContent(true);\n//       try {\n//         const response = await fetch(\"/api/answers/\" + postid);\n//         const data = await response.json();\n//         setresponse(data.responses);\n//         if (data.responses) {\n//           setLoadingContent(false);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors as needed\n//         setLoadingContent(false);\n//       }\n//     }\n//     setLoadingContent(false);\n//   };\n//   fetchData();\n//   //setLoadingContent(false);\n// }, [showResponse, postid, setresponse, setLoadingContent]);\n// useEffect(() => {\n//   //setLoadingContent(true);\n//   if (showResponse) {\n//     fetch(\"/api/answers/\" + postid)\n//       .then((response) => response.json())\n//       .then((data) => setresponse(data.responses));\n//   }\n//   setLoadingContent(false);\n// }, [showResponse, setLoadingContent]);","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/answers/answer.js"],"names":["useEffect","useState","AnswerList","classes","Answer","props","postid","showResponse","setShowResponse","showLoadingContent","setLoadingContent","response","setresponse","fetchData","fetch","data","json","responses","error","console","length","toggleResponseHandler","prevStatus","btndiv","button52","marginBottom"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAaD,KAAnB,CADqB,CAErB;;AACA,QAAM;AAAA,OAACE,YAAD;AAAA,OAAeC;AAAf,MAAkCP,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACQ,kBAAD;AAAA,OAAqBC;AAArB,MAA0CT,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,SAAS,GAAG,YAAY;AAC5B,UAAIN,YAAJ,EAAkB;AAChBG,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;;AACA,YAAI;AACF,gBAAMC,QAAQ,GAAG,MAAMG,KAAK,CAAC,kBAAkBR,MAAnB,CAA5B;AACA,gBAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAJ,UAAAA,WAAW,CAACG,IAAI,CAACE,SAAN,CAAX;AACD,SAJD,CAIE,OAAOC,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC,EADc,CAEd;AACD,SAPD,SAOU;AACRR,UAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF;AACF,KAdD,CADc,CAiBd;;;AACA,QAAIH,YAAY,IAAII,QAAQ,CAACS,MAAT,KAAoB,CAAxC,EAA2C;AACzCP,MAAAA,SAAS;AACV;AACF,GArBQ,EAqBN,CAACN,YAAD,EAAeD,MAAf,EAAuBM,WAAvB,EAAoCF,iBAApC,CArBM,CAAT;;AAuBA,WAASW,qBAAT,GAAiC;AAC/Bb,IAAAA,eAAe,CAAEc,UAAD,IAAgB,CAACA,UAAlB,CAAf;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAEnB,OAAO,CAACc,SAA5B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEd,OAAO,CAACoB,MAAxB;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,qBAAjB;AAAwC,QAAA,SAAS,EAAElB,OAAO,CAACqB,QAA3D;AAAA,mBACGjB,YAAY,GAAG,MAAH,GAAY,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAMGE,kBAAkB,iBACjB;AAAG,MAAA,KAAK,EAAE;AAAEgB,QAAAA,YAAY,EAAE;AAAhB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EASGlB,YAAY,iBAAI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEI;AAAtB;AAAA;AAAA;AAAA;AAAA,YATnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;AAED,eAAeP,MAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport AnswerList from \"./answer-list\";\r\nimport classes from \"./answer.module.css\";\r\n\r\nfunction Answer(props) {\r\n  const { postid } = props;\r\n  //console.log(postid);\r\n  const [showResponse, setShowResponse] = useState(false);\r\n  const [showLoadingContent, setLoadingContent] = useState(false);\r\n  const [response, setresponse] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (showResponse) {\r\n        setLoadingContent(true);\r\n        try {\r\n          const response = await fetch(\"/api/answers/\" + postid);\r\n          const data = await response.json();\r\n          setresponse(data.responses);\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error);\r\n          // Handle errors as needed\r\n        } finally {\r\n          setLoadingContent(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Only fetch data if showResponse is true and responses are not already available\r\n    if (showResponse && response.length === 0) {\r\n      fetchData();\r\n    }\r\n  }, [showResponse, postid, setresponse, setLoadingContent]);\r\n\r\n  function toggleResponseHandler() {\r\n    setShowResponse((prevStatus) => !prevStatus);\r\n  }\r\n\r\n  return (\r\n    <section className={classes.responses}>\r\n      <div className={classes.btndiv}>\r\n        <button onClick={toggleResponseHandler} className={classes.button52}>\r\n          {showResponse ? \"Hide\" : \"Show\"} Responses\r\n        </button>\r\n      </div>\r\n      {showLoadingContent && (\r\n        <p style={{ marginBottom: \"1rem\" }}>No responses yet!</p>\r\n      )}\r\n      {showResponse && <AnswerList ansitems={response} />}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n\r\n// useEffect(() => {\r\n//   const fetchData = async () => {\r\n//     if (showResponse) {\r\n//       setLoadingContent(true);\r\n//       try {\r\n//         const response = await fetch(\"/api/answers/\" + postid);\r\n//         const data = await response.json();\r\n//         setresponse(data.responses);\r\n//         if (data.responses) {\r\n//           setLoadingContent(false);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching data:\", error);\r\n//         // Handle errors as needed\r\n//         setLoadingContent(false);\r\n//       }\r\n//     }\r\n\r\n//     setLoadingContent(false);\r\n//   };\r\n\r\n//   fetchData();\r\n//   //setLoadingContent(false);\r\n// }, [showResponse, postid, setresponse, setLoadingContent]);\r\n\r\n// useEffect(() => {\r\n//   //setLoadingContent(true);\r\n//   if (showResponse) {\r\n//     fetch(\"/api/answers/\" + postid)\r\n//       .then((response) => response.json())\r\n//       .then((data) => setresponse(data.responses));\r\n//   }\r\n//   setLoadingContent(false);\r\n// }, [showResponse, setLoadingContent]);\r\n"]},"metadata":{},"sourceType":"module"}