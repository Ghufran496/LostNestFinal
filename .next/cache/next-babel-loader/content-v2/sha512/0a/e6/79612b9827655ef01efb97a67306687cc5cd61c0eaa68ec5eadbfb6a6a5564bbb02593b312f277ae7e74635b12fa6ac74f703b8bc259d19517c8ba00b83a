{"ast":null,"code":"// import { useState, useRef } from \"react\";\n// import { signIn } from \"next-auth/client\";\n// import { useRouter } from \"next/router\";\n// import Loader from \"../UI/Loader\";\n// import Button from \"../UI/Button\";\n// import classes from \"./auth-form.module.css\";\n// import Error from \"../UI/Error\";\n// async function createUser(email, password) {\n//   const response = await fetch(\"/api/auth/signup\", {\n//     method: \"POST\",\n//     body: JSON.stringify({ email, password }),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n//   const data = await response.json();\n//   if (!response.ok) {\n//     console.log(data.message);\n//     throw new Error(data.message || \"Something went wrong!\");\n//   }\n//   return data;\n// }\n// function AuthForm(props) {\n//   const [toggleForms, setToggleForms] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isError, setIsError] = useState(false);\n//   const [isErrorData, setIsErrorData] = useState(\n//     \"Sorry but the page you are looking for does not exist.\"\n//   );\n//   const toggleForm = () => {\n//     setToggleForms((prev) => !prev);\n//   };\n//   const loginEmailInputRef = useRef();\n//   const loginPasswordInputRef = useRef();\n//   const registerEmailInputRef = useRef();\n//   const registerPasswordInputRef = useRef();\n//   const [isLogin, setIsLogin] = useState(true);\n//   const router = useRouter();\n//   function switchAuthModeHandler() {\n//     setIsLogin((prevState) => !prevState);\n//   }\n//   async function submitHandler(event) {\n//     event.preventDefault();\n//     setIsLoading(true);\n//     const enteredEmail = loginEmailInputRef.current.value;\n//     const enteredPassword = loginPasswordInputRef.current.value;\n//     // optional: Add validation\n//     if (isLogin) {\n//       const result = await signIn(\"credentials\", {\n//         redirect: false,\n//         email: enteredEmail,\n//         password: enteredPassword,\n//       });\n//       if (!result.error) {\n//         // set some auth state\n//         router.replace(\"/dashboard\");\n//         console.log(result + \"Login success\");\n//         setIsLoading(false);\n//       }\n//       if (result.error) {\n//         setIsLoading(false);\n//         setIsErrorData(result.error);\n//         setIsError(true);\n//         //console.log(result.error);\n//         // errorContent(result.error);\n//       }\n//     }\n//   }\n//   async function submitHandlerRegister(event) {\n//     setIsLoading(true);\n//     event.preventDefault();\n//     const enteredEmail = registerEmailInputRef.current.value;\n//     const enteredPassword = registerPasswordInputRef.current.value;\n//     // optional: Add validation\n//     try {\n//       const result = await createUser(enteredEmail, enteredPassword);\n//       setIsLoading(false);\n//       //console.log(result);\n//       setIsLoading(false);\n//     } catch (error) {\n//       //console.log(error);\n//       setIsLoading(false);\n//       setIsError(true);\n//       // setIsErrorData(error);\n//     }\n//   }\n//   if (isLoading) {\n//     return <Loader />;\n//   }\n//   if (isError) {\n//     return <Error errorData={isErrorData} />;\n//   }\n//   return (\n//     <div className={classes.col1}>\n//       <div className={classes.formbox}>\n//         <div className={classes.form}>\n//           {!toggleForms && (\n//             <form className={classes.loginform} onSubmit={submitHandler}>\n//               <center>\n//                 <h1 className={classes.mainheading}>Login Form</h1>\n//               </center>\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"email-id\"\n//                 ref={loginEmailInputRef}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"password\"\n//                 ref={loginPasswordInputRef}\n//               />\n//               <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n//               <p className={classes.message}>\n//                 Not Registered&nbsp;?&nbsp;\n//                 <a onClick={toggleForm} className={classes.link}>\n//                   Register\n//                 </a>\n//               </p>\n//             </form>\n//           )}\n//           {toggleForms && (\n//             <form\n//               className={classes.registerform}\n//               onSubmit={submitHandlerRegister}\n//             >\n//               <center>\n//                 <h1 className={classes.mainheading}>Register Form</h1>\n//               </center>\n//               <input type=\"text\" placeholder=\"user name\" />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"email-id\"\n//                 ref={registerEmailInputRef}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"password\"\n//                 ref={registerPasswordInputRef}\n//               />\n//               <Button\n//                 content=\"REGISTER\"\n//                 onClick={switchAuthModeHandler}\n//               ></Button>\n//               <p className={classes.message}>\n//                 Already Registered&nbsp;?&nbsp;\n//                 <a onClick={toggleForm} className={classes.link}>\n//                   Login\n//                 </a>\n//               </p>\n//             </form>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default AuthForm;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/auth/auth-form.js"],"names":[],"mappingssourcesContent":["// import { useState, useRef } from \"react\";\n// import { signIn } from \"next-auth/client\";\n// import { useRouter } from \"next/router\";\n// import Loader from \"../UI/Loader\";\n// import Button from \"../UI/Button\";\n// import classes from \"./auth-form.module.css\";\n// import Error from \"../UI/Error\";\n\n// async function createUser(email, password) {\n//   const response = await fetch(\"/api/auth/signup\", {\n//     method: \"POST\",\n//     body: JSON.stringify({ email, password }),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     console.log(data.message);\n//     throw new Error(data.message || \"Something went wrong!\");\n//   }\n\n//   return data;\n// }\n\n// function AuthForm(props) {\n//   const [toggleForms, setToggleForms] = useState(false);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [isError, setIsError] = useState(false);\n//   const [isErrorData, setIsErrorData] = useState(\n//     \"Sorry but the page you are looking for does not exist.\"\n//   );\n\n//   const toggleForm = () => {\n//     setToggleForms((prev) => !prev);\n//   };\n//   const loginEmailInputRef = useRef();\n//   const loginPasswordInputRef = useRef();\n\n//   const registerEmailInputRef = useRef();\n//   const registerPasswordInputRef = useRef();\n\n//   const [isLogin, setIsLogin] = useState(true);\n//   const router = useRouter();\n\n//   function switchAuthModeHandler() {\n//     setIsLogin((prevState) => !prevState);\n//   }\n\n//   async function submitHandler(event) {\n//     event.preventDefault();\n//     setIsLoading(true);\n\n//     const enteredEmail = loginEmailInputRef.current.value;\n//     const enteredPassword = loginPasswordInputRef.current.value;\n\n//     // optional: Add validation\n\n//     if (isLogin) {\n//       const result = await signIn(\"credentials\", {\n//         redirect: false,\n//         email: enteredEmail,\n//         password: enteredPassword,\n//       });\n\n//       if (!result.error) {\n//         // set some auth state\n//         router.replace(\"/dashboard\");\n//         console.log(result + \"Login success\");\n//         setIsLoading(false);\n//       }\n//       if (result.error) {\n//         setIsLoading(false);\n//         setIsErrorData(result.error);\n//         setIsError(true);\n//         //console.log(result.error);\n//         // errorContent(result.error);\n//       }\n//     }\n//   }\n\n//   async function submitHandlerRegister(event) {\n//     setIsLoading(true);\n//     event.preventDefault();\n\n//     const enteredEmail = registerEmailInputRef.current.value;\n//     const enteredPassword = registerPasswordInputRef.current.value;\n\n//     // optional: Add validation\n\n//     try {\n//       const result = await createUser(enteredEmail, enteredPassword);\n//       setIsLoading(false);\n//       //console.log(result);\n//       setIsLoading(false);\n//     } catch (error) {\n//       //console.log(error);\n//       setIsLoading(false);\n//       setIsError(true);\n\n//       // setIsErrorData(error);\n//     }\n//   }\n//   if (isLoading) {\n//     return <Loader />;\n//   }\n\n//   if (isError) {\n//     return <Error errorData={isErrorData} />;\n//   }\n\n//   return (\n//     <div className={classes.col1}>\n//       <div className={classes.formbox}>\n//         <div className={classes.form}>\n//           {!toggleForms && (\n//             <form className={classes.loginform} onSubmit={submitHandler}>\n//               <center>\n//                 <h1 className={classes.mainheading}>Login Form</h1>\n//               </center>\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"email-id\"\n//                 ref={loginEmailInputRef}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"password\"\n//                 ref={loginPasswordInputRef}\n//               />\n\n//               <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n//               <p className={classes.message}>\n//                 Not Registered&nbsp;?&nbsp;\n//                 <a onClick={toggleForm} className={classes.link}>\n//                   Register\n//                 </a>\n//               </p>\n//             </form>\n//           )}\n//           {toggleForms && (\n//             <form\n//               className={classes.registerform}\n//               onSubmit={submitHandlerRegister}\n//             >\n//               <center>\n//                 <h1 className={classes.mainheading}>Register Form</h1>\n//               </center>\n//               <input type=\"text\" placeholder=\"user name\" />\n//               <input\n//                 type=\"email\"\n//                 placeholder=\"email-id\"\n//                 ref={registerEmailInputRef}\n//               />\n//               <input\n//                 type=\"password\"\n//                 placeholder=\"password\"\n//                 ref={registerPasswordInputRef}\n//               />\n\n//               <Button\n//                 content=\"REGISTER\"\n//                 onClick={switchAuthModeHandler}\n//               ></Button>\n\n//               <p className={classes.message}>\n//                 Already Registered&nbsp;?&nbsp;\n//                 <a onClick={toggleForm} className={classes.link}>\n//                   Login\n//                 </a>\n//               </p>\n//             </form>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AuthForm;\n"]},"metadata":{},"sourceType":"script"}