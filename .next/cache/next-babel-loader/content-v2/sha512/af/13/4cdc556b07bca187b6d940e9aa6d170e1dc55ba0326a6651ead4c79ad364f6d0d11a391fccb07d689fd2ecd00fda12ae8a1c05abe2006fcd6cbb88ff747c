{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\mylistings\\\\[specificid].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport classes from \"./specificid.module.css\";\nimport Loading from \"../../components/UI/Loading\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport { useState, useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\n\nfunction specificid(props) {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      processedObject = _useState2[0],\n      setProcessedObject = _useState2[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var extractedObject;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                extractedObject = props.extractedObject;\n\n                if (typeof extractedObject === \"object\") {\n                  setProcessedObject(extractedObject);\n                  setIsLoading(false);\n                } else {\n                  setIsLoading(true);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [props.extractedObject]);\n\n  if (isLoading || !processedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n\n  var event = processedObject;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(specificid, \"0zFHIQtaw6CnQlMOrLywMacnL5Q=\");\n\nexport var __N_SSP = true;\nexport default specificid;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/mylistings/[specificid].js"],"names":["React","classes","Loading","EventSummary","EventLogistics","EventContent","useState","useEffect","Fragment","Head","specificid","props","isLoading","setIsLoading","processedObject","setProcessedObject","fetchData","extractedObject","event","Title","Description","Date","ReducedImg","Type","Category"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAIA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAAA,kBACSL,QAAQ,CAAC,KAAD,CADjB;AAAA,MAClBM,SADkB;AAAA,MACPC,YADO;;AAAA,mBAEqBP,QAAQ,CAAC,IAAD,CAF7B;AAAA,MAElBQ,eAFkB;AAAA,MAEDC,kBAFC;;AAIzBR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,gBAAAA,eADQ,GACYN,KADZ,CACRM,eADQ;;AAGhB,oBAAI,OAAOA,eAAP,KAA2B,QAA/B,EAAyC;AACvCF,kBAAAA,kBAAkB,CAACE,eAAD,CAAlB;AACAJ,kBAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,iBAHD,MAGO;AACLA,kBAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AARe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATG,SAAS;AAAA;AAAA;AAAA,OAAf;;AAWAA,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACL,KAAK,CAACM,eAAP,CAbM,CAAT;;AAeA,MAAIL,SAAS,IAAI,CAACE,eAAlB,EAAmC;AACjC,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAMI,KAAK,GAAGJ,eAAd;AAEA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQI,KAAK,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,KAAK,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEF,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF,eAOE,QAAC,cAAD;AACE,MAAA,IAAI,EAAED,KAAK,CAACG,IADd;AAEE,MAAA,UAAU,EAAEH,KAAK,CAACI,UAFpB;AAGE,MAAA,KAAK,EAAEJ,KAAK,CAACC,KAHf;AAIE,MAAA,IAAI,EAAED,KAAK,CAACK,IAJd;AAKE,MAAA,QAAQ,EAAEL,KAAK,CAACM;AALlB;AAAA;AAAA;AAAA;AAAA,YAPF,eAeE,QAAC,YAAD;AAAA,6BACE;AAAA,kBAAIN,KAAK,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA9CQV,U;;;AA4DT,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport classes from \"./specificid.module.css\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\n\r\nimport { getPostDataById } from \"../../lib/db\";\r\n\r\nfunction specificid(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [processedObject, setProcessedObject] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { extractedObject } = props;\r\n\r\n      if (typeof extractedObject === \"object\") {\r\n        setProcessedObject(extractedObject);\r\n        setIsLoading(false);\r\n      } else {\r\n        setIsLoading(true);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [props.extractedObject]);\r\n\r\n  if (isLoading || !processedObject) {\r\n    return <Loading />;\r\n  }\r\n\r\n  const event = processedObject;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n    </Fragment>\r\n  );\r\n}\r\nexport async function getServerSideProps(context) {\r\n  const { params } = context;\r\n  const { specificid } = params;\r\n\r\n  const postData = await getPostDataById(specificid);\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(postData)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default specificid;\r\n"]},"metadata":{},"sourceType":"module"}