{"ast":null,"code":"//import { hashPassword } from \"../../../lib/auth\";\nimport { hashPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return;\n  }\n\n  const data = req.body;\n  const {\n    email,\n    password,\n    enteredName\n  } = data;\n  console.log(\"Entered Name:\", enteredName);\n  console.log(\"Email:\", email);\n  console.log(\"Password:\", password);\n\n  if (!enteredName || !email || !email.includes(\"@\") || !password || password.trim().length < 7) {\n    res.status(422).json({\n      message: \"Invalid input - password should also be at least 7 characters long.\"\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const existingUser = await db.collection(\"users\").findOne({\n    email: email\n  });\n\n  if (existingUser) {\n    res.status(422).json({\n      message: \"User exists already!\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n  const result = await db.collection(\"users\").insertOne({\n    name: enteredName,\n    email: email,\n    password: hashedPassword\n  });\n  res.status(201).json({\n    message: \"Created user!\"\n  });\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/auth/signup.js"],"names":["hashPassword","connectToDatabase","handler","req","res","method","data","body","email","password","enteredName","console","log","includes","trim","length","status","json","message","client","db","existingUser","collection","findOne","close","hashedPassword","result","insertOne","name"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB;AACD;;AAED,QAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAmCJ,IAAzC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,WAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,KAAtB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,QAAzB;;AACA,MACE,CAACC,WAAD,IACA,CAACF,KADD,IAEA,CAACA,KAAK,CAACK,QAAN,CAAe,GAAf,CAFD,IAGA,CAACJ,QAHD,IAIAA,QAAQ,CAACK,IAAT,GAAgBC,MAAhB,GAAyB,CAL3B,EAME;AACAX,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACL;AAFiB,KAArB;AAIA;AACD;;AAED,QAAMC,MAAM,GAAG,MAAMlB,iBAAiB,EAAtC;AAEA,QAAMmB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAEf,IAAAA,KAAK,EAAEA;AAAT,GAA/B,CAA3B;;AAEA,MAAIa,YAAJ,EAAkB;AAChBjB,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAC,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,cAAc,GAAG,MAAMzB,YAAY,CAACS,QAAD,CAAzC;AAEA,QAAMiB,MAAM,GAAG,MAAMN,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBK,SAAvB,CAAiC;AACpDC,IAAAA,IAAI,EAAElB,WAD8C;AAEpDF,IAAAA,KAAK,EAAEA,KAF6C;AAGpDC,IAAAA,QAAQ,EAAEgB;AAH0C,GAAjC,CAArB;AAMArB,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACAC,EAAAA,MAAM,CAACK,KAAP;AACD;;AAED,eAAetB,OAAf","sourcesContent":["//import { hashPassword } from \"../../../lib/auth\";\nimport { hashPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return;\n  }\n\n  const data = req.body;\n\n  const { email, password, enteredName } = data;\n  console.log(\"Entered Name:\", enteredName);\n  console.log(\"Email:\", email);\n  console.log(\"Password:\", password);\n  if (\n    !enteredName ||\n    !email ||\n    !email.includes(\"@\") ||\n    !password ||\n    password.trim().length < 7\n  ) {\n    res.status(422).json({\n      message:\n        \"Invalid input - password should also be at least 7 characters long.\",\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n\n  const db = client.db();\n\n  const existingUser = await db.collection(\"users\").findOne({ email: email });\n\n  if (existingUser) {\n    res.status(422).json({ message: \"User exists already!\" });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n\n  const result = await db.collection(\"users\").insertOne({\n    name: enteredName,\n    email: email,\n    password: hashedPassword,\n  });\n\n  res.status(201).json({ message: \"Created user!\" });\n  client.close();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}