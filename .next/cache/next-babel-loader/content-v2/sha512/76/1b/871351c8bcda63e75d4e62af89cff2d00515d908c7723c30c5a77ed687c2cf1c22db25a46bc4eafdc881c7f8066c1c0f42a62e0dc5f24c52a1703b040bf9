{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\notificationOverlay\\\\noti.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// noti.js\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport classes from \"./noti.module.css\";\n\nvar Noti = function Noti(props) {\n  _s();\n\n  var _useState = useState(false),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  useEffect(function () {\n    // Set show to true to trigger the sliding animation\n    setShow(true); // Hide the notification after a delay (e.g., 3 seconds)\n\n    var timer = setTimeout(function () {\n      setShow(false);\n    }, 3000); // Clear the timer on component unmount or when the show state changes\n\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, []);\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\".concat(classes.notification, \" \").concat(show ? classes.show : \"\"),\n    children: \"Email sent successfully!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, _this), document.getElementById(\"Notification\"));\n};\n\n_s(Noti, \"bXBd/WbmO9A8Q7bxaOKZvuJyGc0=\");\n\n_c = Noti;\nexport default Noti;\n\nvar _c;\n\n$RefreshReg$(_c, \"Noti\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/notificationOverlay/noti.js"],"names":["React","useEffect","useState","ReactDOM","classes","Noti","props","show","setShow","timer","setTimeout","clearTimeout","createPortal","notification","document","getElementById"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACEJ,QAAQ,CAAC,KAAD,CADV;AAAA,MACfK,IADe;AAAA,MACTC,OADS;;AAGtBP,EAAAA,SAAS,CAAC,YAAM;AACd;AACAO,IAAAA,OAAO,CAAC,IAAD,CAAP,CAFc,CAId;;AACA,QAAMC,KAAK,GAAGC,UAAU,CAAC,YAAM;AAC7BF,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAFuB,EAErB,IAFqB,CAAxB,CALc,CASd;;AACA,WAAO;AAAA,aAAMG,YAAY,CAACF,KAAD,CAAlB;AAAA,KAAP;AACD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBAAON,QAAQ,CAACS,YAAT,eACL;AAAK,IAAA,SAAS,YAAKR,OAAO,CAACS,YAAb,cAA6BN,IAAI,GAAGH,OAAO,CAACG,IAAX,GAAkB,EAAnD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADK,EAILO,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAJK,CAAP;AAMD,CAtBD;;GAAMV,I;;KAAAA,I;AAwBN,eAAeA,IAAf","sourcesContent":["// noti.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport classes from \"./noti.module.css\";\r\n\r\nconst Noti = (props) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Set show to true to trigger the sliding animation\r\n    setShow(true);\r\n\r\n    // Hide the notification after a delay (e.g., 3 seconds)\r\n    const timer = setTimeout(() => {\r\n      setShow(false);\r\n    }, 3000);\r\n\r\n    // Clear the timer on component unmount or when the show state changes\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className={`${classes.notification} ${show ? classes.show : \"\"}`}>\r\n      Email sent successfully!\r\n    </div>,\r\n    document.getElementById(\"Notification\")\r\n  );\r\n};\r\n\r\nexport default Noti;\r\n"]},"metadata":{},"sourceType":"module"}