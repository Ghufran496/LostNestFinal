{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\"; //import Error from \"../UI/Error\";\n\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\nimport ErrorComp from \"../UI/ErrorComp\"; // async function createUser(email, password, enteredName) {\n//   const response = await fetch(\"/api/auth/signup\", {\n//     method: \"POST\",\n//     body: JSON.stringify({ email, password, enteredName }),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n//   const data = await response.json();\n//   // console.log(data.message);\n//   if (!response.ok) {\n//     throw new Error(data.message || \"Something went wrong!\");\n//   }\n//   return data;\n// }\n\nfunction AuthForm() {\n  _s2();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      toggleForms = _useState2[0],\n      setToggleForms = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isError = _useState6[0],\n      setIsError = _useState6[1];\n\n  var _useState7 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isErrorData = _useState8[0],\n      setIsErrorData = _useState8[1];\n\n  function createUser(_x, _x2, _x3) {\n    return _createUser.apply(this, arguments);\n  }\n\n  function _createUser() {\n    _createUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(email, password, enteredName) {\n      var response, data;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"/api/auth/signup\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                enteredName: enteredName\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context.sent;\n\n            if (!response.ok) {\n              setIsErrorData(data.message);\n              setIsLoading(false);\n              setIsError(true);\n            }\n\n            return _context.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return _createUser.apply(this, arguments);\n  }\n\n  var toggleForm = function toggleForm() {\n    setToggleForms(function (prev) {\n      return !prev;\n    });\n  };\n\n  var loginEmailInputRef = useRef();\n  var loginPasswordInputRef = useRef();\n  var registerEmailInputRef = useRef();\n  var registerPasswordInputRef = useRef();\n  var registerNameInputRef = useRef();\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isLogin = _useState10[0],\n      setIsLogin = _useState10[1];\n\n  var router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(function (prevState) {\n      return !prevState;\n    });\n  }\n\n  function submitHandler(_x4) {\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function _submitHandler() {\n    _submitHandler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {\n      var enteredEmail, enteredPassword, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            event.preventDefault();\n            setIsLoading(true);\n            enteredEmail = loginEmailInputRef.current.value;\n            enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n            if (!isLogin) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 7;\n            return signIn(\"credentials\", {\n              redirect: false,\n              email: enteredEmail,\n              password: enteredPassword\n            });\n\n          case 7:\n            result = _context2.sent;\n\n            if (!result.error) {\n              router.replace(\"/dashboard\");\n              setIsLoading(false);\n            }\n\n            if (result.error) {\n              setIsLoading(false);\n              setIsErrorData(result.error);\n              setIsError(true);\n            }\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function submitHandlerRegister(_x5) {\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  function _submitHandlerRegister() {\n    _submitHandlerRegister = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(event) {\n      var enteredEmail, enteredPassword, enteredName, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            setIsLoading(true);\n            event.preventDefault();\n            enteredEmail = registerEmailInputRef.current.value;\n            enteredPassword = registerPasswordInputRef.current.value;\n            enteredName = registerNameInputRef.current.value; // optional: Add validation\n\n            _context3.next = 7;\n            return createUser(enteredEmail, enteredPassword, enteredName);\n\n          case 7:\n            result = _context3.sent;\n            setIsLoading(false);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(Loading, null);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/React.createElement(ErrorComp, {\n      errorData: isErrorData\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.col1\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formbox\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.form\n  }, !toggleForms && /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.loginform,\n    onSubmit: submitHandler\n  }, /*#__PURE__*/React.createElement(\"center\", null, /*#__PURE__*/React.createElement(\"h1\", {\n    className: classes.mainheading\n  }, \"Login Form\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"email-id\",\n    ref: loginEmailInputRef\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"password\",\n    ref: loginPasswordInputRef\n  }), /*#__PURE__*/React.createElement(Button, {\n    content: \"LOGIN\",\n    onClick: switchAuthModeHandler\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.message\n  }, \"Not Registered\\xA0?\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n    onClick: toggleForm,\n    className: classes.link\n  }, \"Register\"))), toggleForms && /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.registerform,\n    onSubmit: submitHandlerRegister\n  }, /*#__PURE__*/React.createElement(\"center\", null, /*#__PURE__*/React.createElement(\"h1\", {\n    className: classes.mainheading\n  }, \"Register Form\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"user name\",\n    ref: registerNameInputRef\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"email-id\",\n    ref: registerEmailInputRef\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"password\",\n    ref: registerPasswordInputRef\n  }), /*#__PURE__*/React.createElement(Button, {\n    content: \"REGISTER\",\n    onClick: switchAuthModeHandler\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.message\n  }, \"Already Registered\\xA0?\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n    onClick: toggleForm,\n    className: classes.link\n  }, \"Login\")))))), /*#__PURE__*/React.createElement(Footer, null));\n}\n\n_s2(AuthForm, \"TZpbrw6dkgHFirJP2OwSG1nzwY0=\", false, function () {\n  return [useRouter];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/auth/auth-form.js"],"names":["useState","useRef","signIn","useRouter","Loading","Button","classes","Fragment","Footer","ErrorComp","AuthForm","toggleForms","setToggleForms","isLoading","setIsLoading","isError","setIsError","isErrorData","setIsErrorData","createUser","email","password","enteredName","fetch","method","body","JSON","stringify","headers","response","json","data","ok","message","toggleForm","prev","loginEmailInputRef","loginPasswordInputRef","registerEmailInputRef","registerPasswordInputRef","registerNameInputRef","isLogin","setIsLogin","router","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","redirect","result","error","replace","submitHandlerRegister","col1","formbox","form","loginform","mainheading","link","registerform"],"mappings":"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sourcesContent":["import { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\n//import Error from \"../UI/Error\";\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\nimport ErrorComp from \"../UI/ErrorComp\";\n\n// async function createUser(email, password, enteredName) {\n//   const response = await fetch(\"/api/auth/signup\", {\n//     method: \"POST\",\n//     body: JSON.stringify({ email, password, enteredName }),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n\n//   const data = await response.json();\n\n//   // console.log(data.message);\n//   if (!response.ok) {\n//     throw new Error(data.message || \"Something went wrong!\");\n//   }\n\n//   return data;\n// }\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  async function createUser(email, password, enteredName) {\n    const response = await fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      body: JSON.stringify({ email, password, enteredName }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsErrorData(data.message);\n      setIsLoading(false);\n      setIsError(true);\n    }\n\n    return data;\n  }\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        router.replace(\"/dashboard\");\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    const result = await createUser(enteredEmail, enteredPassword, enteredName);\n    setIsLoading(false);\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <ErrorComp errorData={isErrorData} />;\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.col1}>\n        <div className={classes.formbox}>\n          <div className={classes.form}>\n            {!toggleForms && (\n              <form className={classes.loginform} onSubmit={submitHandler}>\n                <center>\n                  <h1 className={classes.mainheading}>Login Form</h1>\n                </center>\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={loginEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={loginPasswordInputRef}\n                />\n\n                <Button\n                  content=\"LOGIN\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Not Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Register\n                  </a>\n                </p>\n              </form>\n            )}\n            {toggleForms && (\n              <form\n                className={classes.registerform}\n                onSubmit={submitHandlerRegister}\n              >\n                <center>\n                  <h1 className={classes.mainheading}>Register Form</h1>\n                </center>\n                <input\n                  type=\"text\"\n                  placeholder=\"user name\"\n                  ref={registerNameInputRef}\n                />\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={registerEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={registerPasswordInputRef}\n                />\n\n                <Button\n                  content=\"REGISTER\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Already Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Login\n                  </a>\n                </p>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default AuthForm;\n\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/\n"]},"metadata":{},"sourceType":"module"}