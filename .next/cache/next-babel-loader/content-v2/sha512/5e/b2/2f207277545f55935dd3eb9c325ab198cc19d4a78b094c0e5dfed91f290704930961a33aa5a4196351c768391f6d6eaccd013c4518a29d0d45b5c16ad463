{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"GET\") {\n    return res.status(405).json({\n      message: \"Method Not Allowed\"\n    });\n  }\n\n  const client = await connectToDatabase();\n\n  try {\n    const session = await getSession({\n      req\n    });\n\n    if (!session) {\n      return res.status(401).json({\n        message: \"Not authenticated!\"\n      });\n    }\n\n    const userEmail = session.user.email;\n    const usersCollection = client.db().collection(\"users\");\n    const user = await usersCollection.findOne({\n      email: userEmail\n    }, {\n      projection: {\n        password: 0\n      }\n    });\n\n    if (!user) {\n      return res.status(404).json({\n        message: \"User not found.\"\n      });\n    } //const profileData = JSON.parse(JSON.stringify(user));\n\n\n    return res.status(200).json(user);\n  } catch (error) {\n    console.error(\"Error handling profile data:\", error);\n    return res.status(500).json({\n      message: \"Internal Server Error\"\n    });\n  } finally {\n    if (client) {\n      client.close();\n    }\n  }\n}\n\nexport default handler; // import { getSession } from \"next-auth/client\";\n// import { connectToDatabase } from \"../../../lib/db\";\n// async function handler(req, res) {\n//   if (req.method === \"GET\") {\n//     const session = await getSession({ req: req });\n//     if (!session) {\n//       res.status(401).json({ message: \"Not authenticated!\" });\n//       return;\n//     }\n//     //console.log(session);\n//     const userEmail = session.user.email;\n//     const client = await connectToDatabase();\n//     const usersCollection = client.db().collection(\"users\");\n//     const user = await usersCollection.findOne(\n//       { email: userEmail },\n//       { projection: { password: 0 } }\n//     );\n//     if (!user) {\n//       res.status(404).json({ message: \"User not found.\" });\n//       client.close();\n//       return;\n//     }\n//     const Profiledata = JSON.parse(JSON.stringify(user));\n//     res.status(200).json(Profiledata);\n//     client.close();\n//   }\n// }\n// export default handler;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/profile/profiledata.js"],"names":["getSession","connectToDatabase","handler","req","res","method","status","json","message","client","session","userEmail","user","email","usersCollection","db","collection","findOne","projection","password","error","console","close"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AACD,QAAMC,MAAM,GAAG,MAAMR,iBAAiB,EAAtC;;AACA,MAAI;AACF,UAAMS,OAAO,GAAG,MAAMV,UAAU,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAAhC;;AAEA,QAAI,CAACO,OAAL,EAAc;AACZ,aAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AAED,UAAMG,SAAS,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAA/B;AAEA,UAAMC,eAAe,GAAGL,MAAM,CAACM,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AACA,UAAMJ,IAAI,GAAG,MAAME,eAAe,CAACG,OAAhB,CACjB;AAAEJ,MAAAA,KAAK,EAAEF;AAAT,KADiB,EAEjB;AAAEO,MAAAA,UAAU,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ;AAAd,KAFiB,CAAnB;;AAKA,QAAI,CAACP,IAAL,EAAW;AACT,aAAOR,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD,KAjBC,CAmBF;;;AAEA,WAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,IAArB,CAAP;AACD,GAtBD,CAsBE,OAAOQ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACA,WAAOhB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD,GAzBD,SAyBU;AACR,QAAIC,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACa,KAAP;AACD;AACF;AACF;;AAED,eAAepB,OAAf,C,CAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["import { getSession } from \"next-auth/client\";\r\nimport { connectToDatabase } from \"../../../lib/db\";\r\n\r\nasync function handler(req, res) {\r\n  if (req.method !== \"GET\") {\r\n    return res.status(405).json({ message: \"Method Not Allowed\" });\r\n  }\r\n  const client = await connectToDatabase();\r\n  try {\r\n    const session = await getSession({ req });\r\n\r\n    if (!session) {\r\n      return res.status(401).json({ message: \"Not authenticated!\" });\r\n    }\r\n\r\n    const userEmail = session.user.email;\r\n\r\n    const usersCollection = client.db().collection(\"users\");\r\n    const user = await usersCollection.findOne(\r\n      { email: userEmail },\r\n      { projection: { password: 0 } }\r\n    );\r\n\r\n    if (!user) {\r\n      return res.status(404).json({ message: \"User not found.\" });\r\n    }\r\n\r\n    //const profileData = JSON.parse(JSON.stringify(user));\r\n\r\n    return res.status(200).json(user);\r\n  } catch (error) {\r\n    console.error(\"Error handling profile data:\", error);\r\n    return res.status(500).json({ message: \"Internal Server Error\" });\r\n  } finally {\r\n    if (client) {\r\n      client.close();\r\n    }\r\n  }\r\n}\r\n\r\nexport default handler;\r\n\r\n// import { getSession } from \"next-auth/client\";\r\n// import { connectToDatabase } from \"../../../lib/db\";\r\n\r\n// async function handler(req, res) {\r\n//   if (req.method === \"GET\") {\r\n//     const session = await getSession({ req: req });\r\n\r\n//     if (!session) {\r\n//       res.status(401).json({ message: \"Not authenticated!\" });\r\n//       return;\r\n//     }\r\n\r\n//     //console.log(session);\r\n//     const userEmail = session.user.email;\r\n//     const client = await connectToDatabase();\r\n//     const usersCollection = client.db().collection(\"users\");\r\n//     const user = await usersCollection.findOne(\r\n//       { email: userEmail },\r\n//       { projection: { password: 0 } }\r\n//     );\r\n//     if (!user) {\r\n//       res.status(404).json({ message: \"User not found.\" });\r\n//       client.close();\r\n//       return;\r\n//     }\r\n//     const Profiledata = JSON.parse(JSON.stringify(user));\r\n\r\n//     res.status(200).json(Profiledata);\r\n//     client.close();\r\n//   }\r\n// }\r\n\r\n// export default handler;\r\n"]},"metadata":{},"sourceType":"module"}