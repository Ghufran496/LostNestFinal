{"ast":null,"code":"//https://www.youtube.com/watch?v=-qQjyxbla-k\n//--------https://www.youtube.com/watch?v=t2LvPXHLrek\n//https://www.youtube.com/watch?v=t2LvPXHLrek&t=1s\n\n/*const nodemailer = require(\"nodemailer\");\r\n// import nodemailer from \"nodemailer\";\r\n\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"gcch1122@gmail.com\",\r\n      pass: \"1a08b1992c\",\r\n    },\r\n  });\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  let mailOptions = {\r\n    from: emailsender,\r\n    to: to,\r\n    subject: subject,\r\n    text: message,\r\n  };\r\n  try {\r\n    const result = await transporter.sendMail(mailOptions);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}*/\nconst nodemailer = require(\"nodemailer\"); //https://mailtrap.io/inboxes/2499902/messages/3867662540\n\n\nimport { fetchallemails } from \"../../../lib/db\";\nimport { getSession } from \"next-auth/client\";\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method Not Allowed\"\n    });\n  }\n\n  const {\n    subject,\n    message\n  } = req.body;\n  const session = await getSession({\n    req: req\n  });\n  const emailsender = session.user.email;\n\n  if (!subject || !message) {\n    return res.status(400).json({\n      error: \"Missing required parameters\"\n    });\n  }\n\n  const transporter = nodemailer.createTransport({\n    port: 587,\n    secure: false,\n    host: \"sandbox.smtp.mailtrap.io\",\n    auth: {\n      user: \"6bb4922c65d9b2\",\n      pass: \"1e9e125d684fac\"\n    }\n  });\n  const to = (await fetchallemails()).map(user => user.email); // Set up email options\n\n  const mailOptions = {\n    from: emailsender,\n    to,\n    subject: subject,\n    text: \"This is a test email from Nodemailer in Node.js.\"\n  }; //const to = await fetchallemails();\n\n  try {\n    const info = await transporter.sendMail(mailOptions);\n    console.log(\"Email sent: \");\n    res.status(200).json({\n      success: true\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n}\n/*\r\n\r\n\r\n// api/sendEmail.js\r\nrequire(\"dotenv\").config();\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nconst { SG_API_KEY, FROM_EMAIL, TO_EMAIL } = process.env;\r\n//import { fetchallemails } from \"../../../lib/db\";\r\n//import { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  //const session = await getSession({ req: req });\r\n\r\n  //const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //   const apikey =\r\n  //     \"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\";\r\n\r\n  sgMail.setApiKey(SG_API_KEY);\r\n\r\n  //const to = await fetchallemails();\r\n  //const to = (await fetchallemails()).map((user) => user.email);\r\n  console.log(SG_API_KEY);\r\n  const msg = {\r\n    to: FROM_EMAIL, // Ensure to is an array\r\n    from: FROM_EMAIL, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  console.log(msg);\r\n\r\n  try {\r\n    const reslt = await sgMail.send(msg);\r\n    console.log(reslt + \"send it\");\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/email/sendEmail.js"],"names":["nodemailer","require","fetchallemails","getSession","handler","req","res","method","status","json","error","subject","message","body","session","emailsender","user","email","transporter","createTransport","port","secure","host","auth","pass","to","map","mailOptions","from","text","info","sendMail","console","log","success"],"mappings":"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","sourcesContent":["//https://www.youtube.com/watch?v=-qQjyxbla-k\r\n//--------https://www.youtube.com/watch?v=t2LvPXHLrek\r\n//https://www.youtube.com/watch?v=t2LvPXHLrek&t=1s\r\n/*const nodemailer = require(\"nodemailer\");\r\n// import nodemailer from \"nodemailer\";\r\n\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"gcch1122@gmail.com\",\r\n      pass: \"1a08b1992c\",\r\n    },\r\n  });\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  let mailOptions = {\r\n    from: emailsender,\r\n    to: to,\r\n    subject: subject,\r\n    text: message,\r\n  };\r\n  try {\r\n    const result = await transporter.sendMail(mailOptions);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}*/\r\nconst nodemailer = require(\"nodemailer\");\r\n//https://mailtrap.io/inboxes/2499902/messages/3867662540\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    port: 587,\r\n    secure: false,\r\n    host: \"sandbox.smtp.mailtrap.io\",\r\n    auth: {\r\n      user: \"6bb4922c65d9b2\",\r\n      pass: \"1e9e125d684fac\",\r\n    },\r\n  });\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n  // Set up email options\r\n  const mailOptions = {\r\n    from: emailsender,\r\n    to,\r\n    subject: subject,\r\n    text: \"This is a test email from Nodemailer in Node.js.\",\r\n  };\r\n\r\n  //const to = await fetchallemails();\r\n\r\n  try {\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(\"Email sent: \");\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n\r\n/*\r\n\r\n\r\n// api/sendEmail.js\r\nrequire(\"dotenv\").config();\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nconst { SG_API_KEY, FROM_EMAIL, TO_EMAIL } = process.env;\r\n//import { fetchallemails } from \"../../../lib/db\";\r\n//import { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  //const session = await getSession({ req: req });\r\n\r\n  //const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //   const apikey =\r\n  //     \"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\";\r\n\r\n  sgMail.setApiKey(SG_API_KEY);\r\n\r\n  //const to = await fetchallemails();\r\n  //const to = (await fetchallemails()).map((user) => user.email);\r\n  console.log(SG_API_KEY);\r\n  const msg = {\r\n    to: FROM_EMAIL, // Ensure to is an array\r\n    from: FROM_EMAIL, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  console.log(msg);\r\n\r\n  try {\r\n    const reslt = await sgMail.send(msg);\r\n    console.log(reslt + \"send it\");\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}