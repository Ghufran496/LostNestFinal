{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport classes from \"./Form.module.css\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\"; // http://localhost:3000/dashboard/654bc2921efc6c1070461e13\n\nfunction Form(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const answerInputRef = useRef();\n\n  async function sendQuestionData(enteredAnswer, postID, ItemTitle, Question, combinedDateTime) {\n    const response = await fetch(\"/api/qresponse/QuestionResponse\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        enteredAnswer,\n        postID,\n        ItemTitle,\n        Question,\n        combinedDateTime\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsLoading(false);\n    }\n\n    return data;\n  }\n\n  const postID = props.data2._id;\n  const ItemTitle = props.data2.Title;\n  const Question = props.data2.Question;\n  const currentDate = new Date();\n  const formattedDate = currentDate.toLocaleDateString(\"en-US\");\n  const formattedTime = currentDate.toLocaleTimeString(\"en-US\");\n  const combinedDateTime = `${formattedDate} ${formattedTime}`; //console.log(postID);\n\n  const answerSubmitHandler = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredAnswer = answerInputRef.current.value;\n    const result = await sendQuestionData(enteredAnswer, postID, ItemTitle, Question, combinedDateTime); // console.log(result);\n\n    event.target.reset(); // This resets the form\n\n    setIsLoading(false);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        fontSize: \"1.5rem\"\n      },\n      children: \"Submitting response...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    className: classes.main,\n    onSubmit: answerSubmitHandler,\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      htmlFor: \"question\",\n      className: classes.labels,\n      children: \"Question?\"\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"span\", {\n      id: \"questionContent\",\n      className: classes.span1,\n      children: props.data2.Question\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"label\", {\n      htmlFor: \"answer\",\n      className: classes.labels,\n      children: \"Answer\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      type: \"text\",\n      id: \"answer\",\n      className: classes.inputfield,\n      ref: answerInputRef,\n      required: true\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.btndiv,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: classes.button89,\n        type: \"button\",\n        role: \"button\",\n        onClick: props.oncancle,\n        children: \"Close\"\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: classes.button89,\n        type: \"submit\",\n        role: \"button\",\n        children: \"Submit\"\n      })]\n    })]\n  });\n}\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}