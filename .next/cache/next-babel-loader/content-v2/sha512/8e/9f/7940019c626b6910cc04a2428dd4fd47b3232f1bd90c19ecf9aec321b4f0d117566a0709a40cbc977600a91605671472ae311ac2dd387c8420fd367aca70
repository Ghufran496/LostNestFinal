{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\auth\\\\auth-form.js\";\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loader from \"../UI/Loader\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport { ErrorMessage } from \"@hookform/error-message\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm(props) {\n  const {\n    0: toggleForms,\n    1: setToggleForms\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n\n  const toggleForm = () => {\n    setToggleForms(prev => !prev);\n  };\n\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const {\n    0: isLogin,\n    1: setIsLogin\n  } = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(prevState => !prevState);\n  }\n\n  function errorContent(message) {\n    props.onAddError(message);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        console.log(result + \"Login success\");\n        setIsLoading(false);\n      }\n\n      if (result.error) {\n        console.log(result.error);\n        errorContent(result.error);\n        setIsLoading(false);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value; // optional: Add validation\n\n    try {\n      const result = await createUser(enteredEmail, enteredPassword);\n      setIsLoading(false);\n      console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n    }\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.col1,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formbox,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.form,\n        children: [!toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.loginform,\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: classes.mainheading,\n              children: \"Login Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\",\n            ref: loginEmailInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: loginPasswordInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            content: \"LOGIN\",\n            onClick: switchAuthModeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.message,\n            children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.registerform,\n          onSubmit: submitHandlerRegister,\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: classes.mainheading,\n              children: \"Register Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"user name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\",\n            ref: registerEmailInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: registerPasswordInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            content: \"REGISTER\",\n            onClick: switchAuthModeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.message,\n            children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\nexport default AuthForm;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/auth/auth-form.js"],"names":["useState","useRef","signIn","useRouter","Loader","Button","classes","ErrorMessage","createUser","email","password","response","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","AuthForm","props","toggleForms","setToggleForms","isLoading","setIsLoading","isError","setIsError","toggleForm","prev","loginEmailInputRef","loginPasswordInputRef","registerEmailInputRef","registerPasswordInputRef","isLogin","setIsLogin","router","switchAuthModeHandler","prevState","errorContent","onAddError","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","result","redirect","error","replace","console","log","submitHandlerRegister","col1","formbox","form","loginform","mainheading","link","registerform"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loader from \"../UI/Loader\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport { ErrorMessage } from \"@hookform/error-message\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm(props) {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n  function errorContent(message) {\n    props.onAddError(message);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        console.log(result + \"Login success\");\n        setIsLoading(false);\n      }\n      if (result.error) {\n        console.log(result.error);\n        errorContent(result.error);\n        setIsLoading(false);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    try {\n      const result = await createUser(enteredEmail, enteredPassword);\n      setIsLoading(false);\n      console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n    }\n  }\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input type=\"text\" placeholder=\"user name\" />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}