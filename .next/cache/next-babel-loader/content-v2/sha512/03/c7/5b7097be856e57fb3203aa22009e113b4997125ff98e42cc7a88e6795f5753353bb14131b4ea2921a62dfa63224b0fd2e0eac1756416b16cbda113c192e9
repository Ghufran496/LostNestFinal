{"ast":null,"code":"// api/sendEmail.js\nconst sgMail = require(\"@sendgrid/mail\");\n\nimport { fetchallemails } from \"../../../lib/db\";\nimport { getSession } from \"next-auth/client\";\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method Not Allowed\"\n    });\n  }\n\n  const {\n    subject,\n    message\n  } = req.body;\n  const session = await getSession({\n    req: req\n  });\n  const emailsender = session.user.email;\n\n  if (!subject || !message) {\n    return res.status(400).json({\n      error: \"Missing required parameters\"\n    });\n  }\n\n  const apikey = \"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\";\n  sgMail.setApiKey(apikey); //const to = await fetchallemails();\n\n  const to = (await fetchallemails()).map(user => user.email);\n  const msg = {\n    to,\n    // Ensure to is an array\n    from: emailsender,\n    // Replace with your verified SendGrid email\n    subject,\n    text: message\n  };\n\n  try {\n    await sgMail.send(msg);\n    res.status(200).json({\n      success: true\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n}","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/email/sendEmail.js"],"names":["sgMail","require","fetchallemails","getSession","handler","req","res","method","status","json","error","subject","message","body","session","emailsender","user","email","apikey","setApiKey","to","map","msg","from","text","send","success","console"],"mappings":"AAAA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBP,GAAG,CAACQ,IAAjC;AACA,QAAMC,OAAO,GAAG,MAAMX,UAAU,CAAC;AAAEE,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;AAEA,QAAMU,WAAW,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAAjC;;AAEA,MAAI,CAACN,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACxB,WAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,QAAMQ,MAAM,GACV,uEADF;AAGAlB,EAAAA,MAAM,CAACmB,SAAP,CAAiBD,MAAjB,EAjB8C,CAmB9C;;AACA,QAAME,EAAE,GAAG,CAAC,MAAMlB,cAAc,EAArB,EAAyBmB,GAAzB,CAA8BL,IAAD,IAAUA,IAAI,CAACC,KAA5C,CAAX;AAEA,QAAMK,GAAG,GAAG;AACVF,IAAAA,EADU;AACN;AACJG,IAAAA,IAAI,EAAER,WAFI;AAES;AACnBJ,IAAAA,OAHU;AAIVa,IAAAA,IAAI,EAAEZ;AAJI,GAAZ;;AAOA,MAAI;AACF,UAAMZ,MAAM,CAACyB,IAAP,CAAYH,GAAZ,CAAN;AACAhB,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEiB,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GAHD,CAGE,OAAOhB,KAAP,EAAc;AACdiB,IAAAA,OAAO,CAACjB,KAAR,CAAcA,KAAd;AACAJ,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF","sourcesContent":["// api/sendEmail.js\r\n\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  const apikey =\r\n    \"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\";\r\n\r\n  sgMail.setApiKey(apikey);\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  const msg = {\r\n    to, // Ensure to is an array\r\n    from: emailsender, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  try {\r\n    await sgMail.send(msg);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}