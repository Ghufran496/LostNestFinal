{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\store\\\\MongoDBContext.js\";\n// MongoDBContext.js\nimport React, { createContext, useContext } from \"react\";\nconst MongoDBContext = /*#__PURE__*/createContext();\nexport function MongoDBProvider({\n  children\n}) {\n  const [cachedClient, setCachedClient] = React.useState(null);\n\n  const connectToDatabase = async () => {\n    if (cachedClient !== null) {\n      console.log(\"return already stored client\");\n      return cachedClient;\n    }\n\n    try {\n      //   const client = await MongoClient.connect(\"your-mongodb-uri\", {\n      //     useUnifiedTopology: true,\n      //     useNewUrlParser: true,\n      //     connectTimeoutMS: 30000,\n      //   });\n      const client = await MongoClient.connect(\"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\", {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n        connectTimeoutMS: 30000\n      });\n      setCachedClient(client);\n      console.log(\"return new client\");\n      return client;\n    } catch (error) {\n      console.error(\"Error connecting to the database:\", error);\n      throw error;\n    }\n  };\n\n  const value = {\n    connectToDatabase\n  };\n  return /*#__PURE__*/_jsxDEV(MongoDBContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\nexport function useMongoDB() {\n  const context = useContext(MongoDBContext);\n\n  if (!context) {\n    throw new Error(\"useMongoDB must be used within a MongoDBProvider\");\n  }\n\n  return context;\n}","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/store/MongoDBContext.js"],"names":["React","createContext","useContext","MongoDBContext","MongoDBProvider","children","cachedClient","setCachedClient","useState","connectToDatabase","console","log","client","MongoClient","connect","useUnifiedTopology","useNewUrlParser","connectTimeoutMS","error","value","useMongoDB","context","Error"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AAEA,MAAMC,cAAc,gBAAGF,aAAa,EAApC;AAEA,OAAO,SAASG,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAC5C,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAAxC;;AAEA,QAAMC,iBAAiB,GAAG,YAAY;AACpC,QAAIH,YAAY,KAAK,IAArB,EAA2B;AACzBI,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,aAAOL,YAAP;AACD;;AAED,QAAI;AACF;AACA;AACA;AACA;AACA;AACA,YAAMM,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CACnB,mGADmB,EAEnB;AACEC,QAAAA,kBAAkB,EAAE,IADtB;AAEEC,QAAAA,eAAe,EAAE,IAFnB;AAGEC,QAAAA,gBAAgB,EAAE;AAHpB,OAFmB,CAArB;AAQAV,MAAAA,eAAe,CAACK,MAAD,CAAf;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAOC,MAAP;AACD,KAjBD,CAiBE,OAAOM,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAc,mCAAd,EAAmDA,KAAnD;AACA,YAAMA,KAAN;AACD;AACF,GA3BD;;AA6BA,QAAMC,KAAK,GAAG;AACZV,IAAAA;AADY,GAAd;AAIA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEU,KAAhC;AAAA,cAAwCd;AAAxC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;AAED,OAAO,SAASe,UAAT,GAAsB;AAC3B,QAAMC,OAAO,GAAGnB,UAAU,CAACC,cAAD,CAA1B;;AACA,MAAI,CAACkB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD","sourcesContent":["// MongoDBContext.js\r\nimport React, { createContext, useContext } from \"react\";\r\n\r\nconst MongoDBContext = createContext();\r\n\r\nexport function MongoDBProvider({ children }) {\r\n  const [cachedClient, setCachedClient] = React.useState(null);\r\n\r\n  const connectToDatabase = async () => {\r\n    if (cachedClient !== null) {\r\n      console.log(\"return already stored client\");\r\n      return cachedClient;\r\n    }\r\n\r\n    try {\r\n      //   const client = await MongoClient.connect(\"your-mongodb-uri\", {\r\n      //     useUnifiedTopology: true,\r\n      //     useNewUrlParser: true,\r\n      //     connectTimeoutMS: 30000,\r\n      //   });\r\n      const client = await MongoClient.connect(\r\n        \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\r\n        {\r\n          useUnifiedTopology: true,\r\n          useNewUrlParser: true,\r\n          connectTimeoutMS: 30000,\r\n        }\r\n      );\r\n      setCachedClient(client);\r\n      console.log(\"return new client\");\r\n      return client;\r\n    } catch (error) {\r\n      console.error(\"Error connecting to the database:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    connectToDatabase,\r\n  };\r\n\r\n  return (\r\n    <MongoDBContext.Provider value={value}>{children}</MongoDBContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useMongoDB() {\r\n  const context = useContext(MongoDBContext);\r\n  if (!context) {\r\n    throw new Error(\"useMongoDB must be used within a MongoDBProvider\");\r\n  }\r\n  return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}