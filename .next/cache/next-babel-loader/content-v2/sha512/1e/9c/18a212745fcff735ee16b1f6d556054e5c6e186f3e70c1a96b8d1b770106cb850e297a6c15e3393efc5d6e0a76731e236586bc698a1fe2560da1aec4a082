{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\overlayForm\\\\Form.js\";\nimport React from \"react\";\nimport classes from \"./Form.module.css\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\n\nfunction Form(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const answerInputRef = useRef();\n\n  async function sendQuestionData(enteredAnswer, postID) {\n    const response = await fetch(\"/api/qresponse/QuestionResponse\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        enteredAnswer,\n        postID\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsLoading(false);\n    }\n\n    return data;\n  }\n\n  const answerSubmitHandler = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredAnswer = answerInputRef.current.value;\n    const postID = props._id;\n    console.log(postID);\n    const result = await sendQuestionData(enteredAnswer, postID); // console.log(result);\n\n    event.target.reset(); // This resets the form\n\n    setIsLoading(false);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"submiting response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.main,\n    onSubmit: answerSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"question\",\n      className: classes.labels,\n      children: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"questionContent\",\n      className: classes.span1,\n      children: props.data2.Question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"answer\",\n      className: classes.labels,\n      children: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"answer\",\n      className: classes.inputfield,\n      ref: answerInputRef,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"button\",\n        role: \"button\",\n        onClick: props.oncancle,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"submit\",\n        role: \"button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Form;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/overlayForm/Form.js"],"names":["React","classes","useRef","useState","Loading","Form","props","isLoading","setIsLoading","answerInputRef","sendQuestionData","enteredAnswer","postID","response","fetch","method","body","JSON","stringify","headers","data","json","ok","answerSubmitHandler","event","preventDefault","current","value","_id","console","log","result","target","reset","main","labels","span1","data2","Question","inputfield","btndiv","button89","oncancle"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Form.module.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\n\r\nfunction Form(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const answerInputRef = useRef();\r\n\r\n  async function sendQuestionData(enteredAnswer, postID) {\r\n    const response = await fetch(\"/api/qresponse/QuestionResponse\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        enteredAnswer,\r\n        postID,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n    }\r\n\r\n    return data;\r\n  }\r\n  const answerSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredAnswer = answerInputRef.current.value;\r\n    const postID = props._id;\r\n    console.log(postID);\r\n\r\n    const result = await sendQuestionData(enteredAnswer, postID);\r\n\r\n    // console.log(result);\r\n    event.target.reset(); // This resets the form\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>submiting response...</div>;\r\n  }\r\n\r\n  return (\r\n    <form className={classes.main} onSubmit={answerSubmitHandler}>\r\n      <label htmlFor=\"question\" className={classes.labels}>\r\n        Question\r\n      </label>\r\n      <br />\r\n      <span id=\"questionContent\" className={classes.span1}>\r\n        {props.data2.Question}\r\n      </span>\r\n      <br />\r\n      <label htmlFor=\"answer\" className={classes.labels}>\r\n        Answer\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"answer\"\r\n        className={classes.inputfield}\r\n        ref={answerInputRef}\r\n        required\r\n      />\r\n      <br />\r\n      <div className={classes.btndiv}>\r\n        <button\r\n          className={classes.button89}\r\n          type=\"button\"\r\n          role=\"button\"\r\n          onClick={props.oncancle}\r\n        >\r\n          Close\r\n        </button>\r\n        <button className={classes.button89} type=\"submit\" role=\"button\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}