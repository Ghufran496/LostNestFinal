{"ast":null,"code":"import { connectToDatabase } from \"../../../lib/db\";\nimport { getSession } from \"next-auth/client\";\n\nasync function handler(req, res) {\n  if (req.method === \"POST\") {\n    const data = req.body;\n    const {\n      enteredInformations,\n      ItemTitle,\n      PostID,\n      PosterID,\n      Question,\n      combinedDateTime,\n      Answer\n    } = data;\n    const enteredContact = enteredInformations ? enteredInformations : \"Responder has nullified the validation.\";\n\n    if (!enteredContact) {\n      res.status(422).json({\n        message: \"Please Enter Contact details\"\n      });\n      return;\n    }\n\n    const client = await connectToDatabase();\n    const db = client.db();\n    const result = await db.collection(\"ValidationResponse\").insertOne({\n      enteredContact,\n      ItemTitle,\n      PostID,\n      PosterID,\n      Question,\n      ValidatorDateTime: combinedDateTime,\n      Answer\n    });\n    res.status(201).json({\n      message: \"Contact Information stored successfully\"\n    });\n  } else {\n    const session = await getSession({\n      req: req\n    });\n\n    if (!session) {\n      res.status(401).json({\n        message: \"Not authenticated!\"\n      });\n      return;\n    }\n\n    const userEmail = session.user.email;\n\n    try {\n      //const data = await getPostsByEmail(userEmail);\n      const client = await connectToDatabase();\n      const usersCollection = client.db().collection(\"ValidationResponse\");\n      const data = await usersCollection.find({\n        PosterID: userEmail\n      }).toArray();\n      res.status(200).json(data);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      res.status(500).json({\n        message: \"Internal Server Error: Unable to fetch and Display Responses\"\n      });\n      return;\n    }\n  }\n}\n\nexport default handler;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/answers/sendResponse.js"],"names":["connectToDatabase","getSession","handler","req","res","method","data","body","enteredInformations","ItemTitle","PostID","PosterID","Question","combinedDateTime","Answer","enteredContact","status","json","message","client","db","result","collection","insertOne","ValidatorDateTime","session","userEmail","user","email","usersCollection","find","toArray","error","console"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iBAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AACA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,UAAM;AACJC,MAAAA,mBADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,gBANI;AAOJC,MAAAA;AAPI,QAQFR,IARJ;AAUA,UAAMS,cAAc,GAAGP,mBAAmB,GACtCA,mBADsC,GAEtC,yCAFJ;;AAIA,QAAI,CAACO,cAAL,EAAqB;AACnBX,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AADU,OAArB;AAGA;AACD;;AAED,UAAMC,MAAM,GAAG,MAAMnB,iBAAiB,EAAtC;AAEA,UAAMoB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,UAAMC,MAAM,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,oBAAd,EAAoCC,SAApC,CAA8C;AACjER,MAAAA,cADiE;AAEjEN,MAAAA,SAFiE;AAGjEC,MAAAA,MAHiE;AAIjEC,MAAAA,QAJiE;AAKjEC,MAAAA,QALiE;AAMjEY,MAAAA,iBAAiB,EAAEX,gBAN8C;AAOjEC,MAAAA;AAPiE,KAA9C,CAArB;AAUAV,IAAAA,GAAG,CACAY,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFR;AAGD,GAzCD,MAyCO;AACL,UAAMO,OAAO,GAAG,MAAMxB,UAAU,CAAC;AAAEE,MAAAA,GAAG,EAAEA;AAAP,KAAD,CAAhC;;AACA,QAAI,CAACsB,OAAL,EAAc;AACZrB,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AACD;;AACD,UAAMQ,SAAS,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAA/B;;AACA,QAAI;AACF;AACA,YAAMT,MAAM,GAAG,MAAMnB,iBAAiB,EAAtC;AAEA,YAAM6B,eAAe,GAAGV,MAAM,CAACC,EAAP,GAAYE,UAAZ,CAAuB,oBAAvB,CAAxB;AAEA,YAAMhB,IAAI,GAAG,MAAMuB,eAAe,CAC/BC,IADgB,CACX;AACJnB,QAAAA,QAAQ,EAAEe;AADN,OADW,EAIhBK,OAJgB,EAAnB;AAMA3B,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBX,IAArB;AACD,KAbD,CAaE,OAAO0B,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACA5B,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AADU,OAArB;AAGA;AACD;AACF;AACF;;AAED,eAAehB,OAAf","sourcesContent":["import { connectToDatabase } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\nasync function handler(req, res) {\r\n  if (req.method === \"POST\") {\r\n    const data = req.body;\r\n\r\n    const {\r\n      enteredInformations,\r\n      ItemTitle,\r\n      PostID,\r\n      PosterID,\r\n      Question,\r\n      combinedDateTime,\r\n      Answer,\r\n    } = data;\r\n\r\n    const enteredContact = enteredInformations\r\n      ? enteredInformations\r\n      : \"Responder has nullified the validation.\";\r\n\r\n    if (!enteredContact) {\r\n      res.status(422).json({\r\n        message: \"Please Enter Contact details\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const client = await connectToDatabase();\r\n\r\n    const db = client.db();\r\n\r\n    const result = await db.collection(\"ValidationResponse\").insertOne({\r\n      enteredContact,\r\n      ItemTitle,\r\n      PostID,\r\n      PosterID,\r\n      Question,\r\n      ValidatorDateTime: combinedDateTime,\r\n      Answer,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Contact Information stored successfully\" });\r\n  } else {\r\n    const session = await getSession({ req: req });\r\n    if (!session) {\r\n      res.status(401).json({ message: \"Not authenticated!\" });\r\n      return;\r\n    }\r\n    const userEmail = session.user.email;\r\n    try {\r\n      //const data = await getPostsByEmail(userEmail);\r\n      const client = await connectToDatabase();\r\n\r\n      const usersCollection = client.db().collection(\"ValidationResponse\");\r\n\r\n      const data = await usersCollection\r\n        .find({\r\n          PosterID: userEmail,\r\n        })\r\n        .toArray();\r\n\r\n      res.status(200).json(data);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      res.status(500).json({\r\n        message: \"Internal Server Error: Unable to fetch and Display Responses\",\r\n      });\r\n      return;\r\n    }\r\n  }\r\n}\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}