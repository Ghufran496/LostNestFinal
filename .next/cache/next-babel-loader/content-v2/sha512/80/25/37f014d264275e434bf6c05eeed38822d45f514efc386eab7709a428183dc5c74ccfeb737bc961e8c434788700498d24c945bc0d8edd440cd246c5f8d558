{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\overlayForm\\\\Form.js\";\nimport React from \"react\";\nimport classes from \"./Form.module.css\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\n\nfunction Form(props) {\n  // const [isLoading, setIsLoading] = useState(false);\n  // const answerInputRef = useRef();\n  // async function sendQuestionData(\n  //   Type,\n  //   Category,\n  //   Title,\n  //   Description,\n  //   Question,\n  //   Date,\n  //   imageInbase64\n  // ) {\n  //   const response = await fetch(\"/api/post/postitem\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify({\n  //       Type,\n  //       Category,\n  //       Title,\n  //       Description,\n  //       Question,\n  //       Date,\n  //       ReducedImg: imageInbase64,\n  //     }),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //   });\n  //   const data = await response.json();\n  //   if (!response.ok) {\n  //     setIsErrorData(data.message);\n  //     setIsLoading(false);\n  //     setIsError(true);\n  //   }\n  //   return data;\n  // }\n  // const answerSubmitHandler = (event) => {\n  //   event.preventDefault();\n  //   setIsLoading(true);\n  //   const enteredAnswer = answerInputRef.current.value;\n  //   const result = await sendQuestionData(\n  //     enteredAnswer,\n  //     enteredCategory,\n  //     enteredTitle,\n  //     enteredDescription,\n  //     enteredQuestion,\n  //     humanReadableDate,\n  //     isImage\n  //   );\n  //   // console.log(result);\n  //   event.target.reset(); // This resets the form\n  // };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.main,\n    onSubmit: answerSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"question\",\n      className: classes.labels,\n      children: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"questionContent\",\n      className: classes.span1,\n      children: props.data2.Question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"answer\",\n      className: classes.labels,\n      children: \"Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"answer\",\n      className: classes.inputfield,\n      ref: answerInputRef,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"button\",\n        role: \"button\",\n        onClick: props.oncancle,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button89,\n        type: \"submit\",\n        role: \"button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Form;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/overlayForm/Form.js"],"names":["React","classes","useRef","useState","Loading","Form","props","main","answerSubmitHandler","labels","span1","data2","Question","inputfield","answerInputRef","btndiv","button89","oncancle"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,sBACE;AAAM,IAAA,SAAS,EAAEL,OAAO,CAACM,IAAzB;AAA+B,IAAA,QAAQ,EAAEC,mBAAzC;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAA0B,MAAA,SAAS,EAAEP,OAAO,CAACQ,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAM,MAAA,EAAE,EAAC,iBAAT;AAA2B,MAAA,SAAS,EAAER,OAAO,CAACS,KAA9C;AAAA,gBACGJ,KAAK,CAACK,KAAN,CAAYC;AADf;AAAA;AAAA;AAAA;AAAA,YALF,eAQE;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,MAAA,SAAS,EAAEX,OAAO,CAACQ,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAYE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,SAAS,EAAER,OAAO,CAACY,UAHrB;AAIE,MAAA,GAAG,EAAEC,cAJP;AAKE,MAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,YAZF,eAmBE;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBE;AAAK,MAAA,SAAS,EAAEb,OAAO,CAACc,MAAxB;AAAA,8BACE;AACE,QAAA,SAAS,EAAEd,OAAO,CAACe,QADrB;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,OAAO,EAAEV,KAAK,CAACW,QAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAQ,QAAA,SAAS,EAAEhB,OAAO,CAACe,QAA3B;AAAqC,QAAA,IAAI,EAAC,QAA1C;AAAmD,QAAA,IAAI,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;AAED,eAAeX,IAAf","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Form.module.css\";\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\n\r\nfunction Form(props) {\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n  // const answerInputRef = useRef();\r\n\r\n  // async function sendQuestionData(\r\n  //   Type,\r\n  //   Category,\r\n  //   Title,\r\n  //   Description,\r\n  //   Question,\r\n  //   Date,\r\n  //   imageInbase64\r\n  // ) {\r\n  //   const response = await fetch(\"/api/post/postitem\", {\r\n  //     method: \"POST\",\r\n  //     body: JSON.stringify({\r\n  //       Type,\r\n  //       Category,\r\n  //       Title,\r\n  //       Description,\r\n  //       Question,\r\n  //       Date,\r\n  //       ReducedImg: imageInbase64,\r\n  //     }),\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //     },\r\n  //   });\r\n\r\n  //   const data = await response.json();\r\n\r\n  //   if (!response.ok) {\r\n  //     setIsErrorData(data.message);\r\n  //     setIsLoading(false);\r\n  //     setIsError(true);\r\n  //   }\r\n\r\n  //   return data;\r\n  // }\r\n  // const answerSubmitHandler = (event) => {\r\n  //   event.preventDefault();\r\n  //   setIsLoading(true);\r\n\r\n  //   const enteredAnswer = answerInputRef.current.value;\r\n\r\n  //   const result = await sendQuestionData(\r\n  //     enteredAnswer,\r\n  //     enteredCategory,\r\n  //     enteredTitle,\r\n  //     enteredDescription,\r\n  //     enteredQuestion,\r\n  //     humanReadableDate,\r\n  //     isImage\r\n  //   );\r\n\r\n  //   // console.log(result);\r\n  //   event.target.reset(); // This resets the form\r\n  // };\r\n\r\n  return (\r\n    <form className={classes.main} onSubmit={answerSubmitHandler}>\r\n      <label htmlFor=\"question\" className={classes.labels}>\r\n        Question\r\n      </label>\r\n      <br />\r\n      <span id=\"questionContent\" className={classes.span1}>\r\n        {props.data2.Question}\r\n      </span>\r\n      <br />\r\n      <label htmlFor=\"answer\" className={classes.labels}>\r\n        Answer\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"answer\"\r\n        className={classes.inputfield}\r\n        ref={answerInputRef}\r\n        required\r\n      />\r\n      <br />\r\n      <div className={classes.btndiv}>\r\n        <button\r\n          className={classes.button89}\r\n          type=\"button\"\r\n          role=\"button\"\r\n          onClick={props.oncancle}\r\n        >\r\n          Close\r\n        </button>\r\n        <button className={classes.button89} type=\"submit\" role=\"button\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}