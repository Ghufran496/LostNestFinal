{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\");\n    return cachedClient;\n  }\n\n  let client;\n  const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n\n  try {\n    client = await MongoClient.connect(connectionString, {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000\n    });\n  } catch (error) {\n    console.error(\"Error connecting to the database:\", error);\n  } // Handle the 'close' event for potential reconnection\n\n\n  client.on(\"close\", () => {\n    console.log(\"Connection closed. Reconnecting...\"); // Implement reconnection logic here, such as calling connectToDatabase()\n\n    connectToDatabase();\n  });\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n} // import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// let cachedClient = null;\n// let clientSet = false;\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n//   let client;\n//   const connectionString = `mongodb+srv://${process.env.mongodb_username}:${process.env.mongodb_password}@${process.env.mongodb_clustername}.psik2ae.mongodb.net/${process.env.mongodb_database}?retryWrites=true&w=majority`;\n//   client = await MongoClient.connect(connectionString, {\n//     useUnifiedTopology: true,\n//     useNewUrlParser: true,\n//     connectTimeoutMS: 30000,\n//   });\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n//   return client;\n// }\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  return data;\n}\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n  const user = await usersCollection.findOne({\n    _id: postobjectId\n  });\n  return user;\n}\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"QAnswers\");\n  const user = await usersCollection.find({\n    PostID: id\n  }).toArray();\n  return user;\n}\n/*\n\n\nimport { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\n\nlet cachedClient = null;\nlet clientSet = false;\n\nexport async function connectToDatabase() {\n  if (clientSet) {\n    console.log(\"return already stored client\" + cachedClient);\n    return cachedClient;\n  }\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n    {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000,\n    }\n  );\n\n  if (!clientSet) {\n    cachedClient = client;\n    clientSet = true;\n    console.log(\"return new client\");\n  }\n\n  return client;\n}\n\n\n*/\n// export async function getPostsByEmail(email) {\n//   //console.log(email);\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts);\n//   // return allPosts.find((event) => event.posterEmail === email);\n//   return allPosts.filter((event) => event.posterEmail === email);\n// }\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n// export async function getResponseDataById(id) {\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"QAnswers\").find({}).toArray();\n//   //console.log(data);\n//   return data.filter((event) => event.PostID === id);\n// }\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// class Database {\n//   constructor() {\n//     if (!Database.instance) {\n//       this.client = null;\n//       this.clientSet = false;\n//       Database.instance = this;\n//     }\n//     return Database.instance;\n//   }\n//   async connect() {\n//     if (this.clientSet) {\n//       console.log(\"return already stored client\");\n//       return this.client;\n//     }\n//     this.client = await MongoClient.connect(\n//       \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//       {\n//         useUnifiedTopology: true,\n//         useNewUrlParser: true,\n//         connectTimeoutMS: 30000,\n//       }\n//     );\n//     if (!this.clientSet) {\n//       this.clientSet = true;\n//       console.log(\"return new client\");\n//     }\n//     return this.client;\n//   }\n// }\n// const database = new Database();\n// export const connectToDatabase = async () => {\n//   try {\n//     return await database.connect();\n//   } catch (error) {\n//     //console.error(\"Error connecting to the database:\", error);\n//     throw error;\n//   }\n// };","map":null,"metadata":{},"sourceType":"module"}