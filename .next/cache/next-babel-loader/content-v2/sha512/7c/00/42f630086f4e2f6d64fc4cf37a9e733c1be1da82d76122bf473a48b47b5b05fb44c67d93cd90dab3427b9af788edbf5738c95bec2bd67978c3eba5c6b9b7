{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\postcomp\\\\PostNewItem.js\";\nimport classes from \"./PostNewItem.module.css\";\nimport React, { Fragment } from \"react\";\nimport Button from \"../UI/Button\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\nimport ErrorComp from \"../UI/ErrorComp\";\nimport Noti from \"../../components/notificationOverlay/noti\";\n\nfunction PostNewItem() {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isImage,\n    1: setIsImage\n  } = useState(\"\");\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  const {\n    0: isErrorData,\n    1: setIsErrorData\n  } = useState(\"Sorry but the page you are looking for does not exist.\");\n  const {\n    0: sendEmail,\n    1: setIsSendEmail\n  } = useState(false);\n  const typeInputRef = useRef();\n  const categoryInputRef = useRef();\n  const titleInputRef = useRef();\n  const descriptionInputRef = useRef();\n  const questionInputRef = useRef();\n  const dateInputRef = useRef();\n\n  async function sendEmails(subject, message) {\n    const response = await fetch(\"/api/email/sendEmail\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        subject,\n        message\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      console.log(\"Response not ok\");\n    } else {\n      setIsSendEmail(true);\n    }\n\n    return data;\n  }\n\n  async function sendPostData(Type, Category, Title, Description, Question, Date, imageInbase64) {\n    const response = await fetch(\"/api/post/postitem\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        Type,\n        Category,\n        Title,\n        Description,\n        Question,\n        Date,\n        ReducedImg: imageInbase64\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsErrorData(data.message);\n      setIsLoading(false);\n      setIsError(true);\n    }\n\n    return data;\n  }\n\n  function converttobase64(e) {\n    // console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n\n    reader.onload = () => {\n      //console.log(reader.result);\n      setIsImage(reader.result);\n    };\n\n    reader.onerror = () => {\n      console.log(\"error\", error);\n    };\n  }\n\n  const postSubmitHandler = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredType = typeInputRef.current.value;\n    const enteredCategory = categoryInputRef.current.value;\n    const enteredTitle = titleInputRef.current.value;\n    const enteredDescription = descriptionInputRef.current.value;\n    const enteredQuestion = questionInputRef.current.value;\n    const enteredDate = dateInputRef.current.value;\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\"en-US\", {\n      day: \"numeric\",\n      month: \"long\",\n      year: \"numeric\"\n    });\n    const message = `${enteredType} ${enteredCategory}\n  \nItem Name: ${enteredTitle}\nDate: ${humanReadableDate}\nDescription: ${enteredDescription}\n\nIf you have any information about the ${enteredType} item, kindly visit the LostNest web application.\n\nThank you\n`;\n    const subject = `${enteredType} : ${enteredTitle}`;\n    const emailres = await sendEmails(subject, message);\n    setIsSendEmail(false);\n    const result = await sendPostData(enteredType, enteredCategory, enteredTitle, enteredDescription, enteredQuestion, humanReadableDate, isImage);\n    event.target.reset(); // This resets the form\n\n    setIsImage(\"\"); // Clear the image state\n\n    setIsLoading(false);\n  }; // if (isLoading) {\n  //   return <Loading />;\n  // }\n\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formstyle3,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: postSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: \"Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.divider,\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"item\",\n              className: classes.inputfield,\n              ref: typeInputRef,\n              children: /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Lost\",\n                children: \"Lost\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              defaultValue: \"Category\",\n              name: \"category\",\n              className: classes.inputfield,\n              ref: categoryInputRef,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Category\",\n                disabled: true,\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Wallet\",\n                children: \"Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"ID Card / Student Card\",\n                children: \"ID Card / Student Card\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Smart Phone / Laptop\",\n                children: \"Smart Phone / Laptop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Keys\",\n                children: \"Keys\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Others\",\n                children: \"Others\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"field3\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Item Name \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"field3\",\n              placeholder: \"Title\",\n              className: classes.inputfield,\n              ref: titleInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"field4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Enter question based on an item.\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"field4\",\n              placeholder: \"Ex:- What is the color of the phone?\",\n              className: classes.inputfield,\n              ref: questionInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Select a Date: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              name: \"date\",\n              id: \"date\",\n              className: classes.customselect,\n              ref: dateInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Description \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.required,\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              name: \"description\",\n              placeholder: \"Description about item (like location etc...)\",\n              className: classes.textareafield,\n              ref: descriptionInputRef,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"image\",\n            name: \"image\",\n            accept: \"image/*\",\n            className: classes.customselect,\n            style: {\n              width: \"100%\"\n            },\n            onChange: converttobase64,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.center,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              content: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), sendEmail && /*#__PURE__*/_jsxDEV(Noti, {\n      data: \"Email Successfully Sent to LostNest Registered Users!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\nexport default PostNewItem;\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/postcomp/PostNewItem.js"],"names":["classes","React","Fragment","Button","useRef","useState","Loading","ErrorComp","Noti","PostNewItem","isLoading","setIsLoading","isImage","setIsImage","isError","setIsError","isErrorData","setIsErrorData","sendEmail","setIsSendEmail","typeInputRef","categoryInputRef","titleInputRef","descriptionInputRef","questionInputRef","dateInputRef","sendEmails","subject","message","response","fetch","method","body","JSON","stringify","headers","data","json","ok","console","log","sendPostData","Type","Category","Title","Description","Question","Date","imageInbase64","ReducedImg","converttobase64","e","reader","FileReader","readAsDataURL","target","files","onload","result","onerror","error","postSubmitHandler","event","preventDefault","enteredType","current","value","enteredCategory","enteredTitle","enteredDescription","enteredQuestion","enteredDate","humanReadableDate","toLocaleDateString","day","month","year","emailres","reset","formstyle3","divider","inputfield","required","customselect","textareafield","width","center"],"mappings":"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":["import classes from \"./PostNewItem.module.css\";\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\nimport Noti from \"../../components/notificationOverlay/noti\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n  const [sendEmail, setIsSendEmail] = useState(false);\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(subject, message) {\r\n    const response = await fetch(\"/api/email/sendEmail\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        subject,\r\n        message,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    } else {\r\n      setIsSendEmail(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n\r\n    const message = `${enteredType} ${enteredCategory}\r\n  \r\nItem Name: ${enteredTitle}\r\nDate: ${humanReadableDate}\r\nDescription: ${enteredDescription}\r\n\r\nIf you have any information about the ${enteredType} item, kindly visit the LostNest web application.\r\n\r\nThank you\r\n`;\r\n\r\n    const subject = `${enteredType} : ${enteredTitle}`;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n    setIsSendEmail(false);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // if (isLoading) {\r\n  //   return <Loading />;\r\n  // }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.formstyle3}>\r\n        <form onSubmit={postSubmitHandler}>\r\n          <fieldset>\r\n            <legend>Data</legend>\r\n            <div className={classes.divider}>\r\n              <select\r\n                name=\"item\"\r\n                className={classes.inputfield}\r\n                ref={typeInputRef}\r\n              >\r\n                <option value=\"Lost\">Lost</option>\r\n              </select>\r\n              <select\r\n                defaultValue=\"Category\"\r\n                name=\"category\"\r\n                className={classes.inputfield}\r\n                ref={categoryInputRef}\r\n                required\r\n              >\r\n                <option value=\"Category\" disabled>\r\n                  Category\r\n                </option>\r\n                <option value=\"Wallet\">Wallet</option>\r\n                <option value=\"ID Card / Student Card\">\r\n                  ID Card / Student Card\r\n                </option>\r\n                <option value=\"Smart Phone / Laptop\">\r\n                  Smart Phone / Laptop\r\n                </option>\r\n                <option value=\"Keys\">Keys</option>\r\n                <option value=\"Others\">Others</option>\r\n              </select>\r\n            </div>\r\n\r\n            <label htmlFor=\"field3\">\r\n              <span>\r\n                Item Name <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"field3\"\r\n                placeholder=\"Title\"\r\n                className={classes.inputfield}\r\n                ref={titleInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n            <label htmlFor=\"field4\">\r\n              <span>\r\n                Enter question based on an item.\r\n                <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"field4\"\r\n                placeholder=\"Ex:- What is the color of the phone?\"\r\n                className={classes.inputfield}\r\n                ref={questionInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n\r\n            <label htmlFor=\"date\">\r\n              <span>\r\n                Select a Date: <span className={classes.required}>*</span>\r\n              </span>\r\n              <input\r\n                type=\"date\"\r\n                name=\"date\"\r\n                id=\"date\"\r\n                className={classes.customselect}\r\n                ref={dateInputRef}\r\n                required\r\n              ></input>\r\n            </label>\r\n          </fieldset>\r\n          <fieldset>\r\n            <legend>Details</legend>\r\n            <label htmlFor=\"description\">\r\n              <span>\r\n                Description <span className={classes.required}>*</span>\r\n              </span>\r\n              <textarea\r\n                type=\"text\"\r\n                name=\"description\"\r\n                placeholder=\"Description about item (like location etc...)\"\r\n                className={classes.textareafield}\r\n                ref={descriptionInputRef}\r\n                required\r\n              ></textarea>\r\n            </label>\r\n            <input\r\n              type=\"file\"\r\n              id=\"image\"\r\n              name=\"image\"\r\n              accept=\"image/*\"\r\n              className={classes.customselect}\r\n              style={{ width: \"100%\" }}\r\n              onChange={converttobase64}\r\n              required\r\n            />\r\n            <div className={classes.center}>\r\n              <Button content=\"Post\"></Button>\r\n            </div>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n      {sendEmail && (\r\n        <Noti data=\"Email Successfully Sent to LostNest Registered Users!\" />\r\n      )}\r\n      {isLoading && <Loading />}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n\r\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}