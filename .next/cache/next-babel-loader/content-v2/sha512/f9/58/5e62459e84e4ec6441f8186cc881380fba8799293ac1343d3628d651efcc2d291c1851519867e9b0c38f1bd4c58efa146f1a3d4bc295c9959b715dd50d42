{"ast":null,"code":"import _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\auth\\\\auth-form.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\n\nfunction createUser(_x, _x2, _x3) {\n  return _createUser.apply(this, arguments);\n}\n\nfunction _createUser() {\n  _createUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(email, password, enteredName) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(\"/api/auth/signup\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                enteredName: enteredName\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || \"Something went wrong!\");\n\n          case 8:\n            return _context3.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createUser.apply(this, arguments);\n}\n\nfunction AuthForm() {\n  _s();\n\n  var _useState = useState(false),\n      toggleForms = _useState[0],\n      setToggleForms = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  var toggleForm = function toggleForm() {\n    setToggleForms(function (prev) {\n      return !prev;\n    });\n  };\n\n  var loginEmailInputRef = useRef();\n  var loginPasswordInputRef = useRef();\n  var registerEmailInputRef = useRef();\n  var registerPasswordInputRef = useRef();\n  var registerNameInputRef = useRef();\n\n  var _useState5 = useState(true),\n      isLogin = _useState5[0],\n      setIsLogin = _useState5[1];\n\n  var router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(function (prevState) {\n      return !prevState;\n    });\n  }\n\n  function submitHandler(_x4) {\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function _submitHandler() {\n    _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var enteredEmail, enteredPassword, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setIsLoading(true);\n              enteredEmail = loginEmailInputRef.current.value;\n              enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n              if (!isLogin) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return signIn(\"credentials\", {\n                redirect: false,\n                email: enteredEmail,\n                password: enteredPassword\n              });\n\n            case 7:\n              result = _context.sent;\n\n              if (!result.error) {\n                router.replace(\"/dashboard\");\n                setIsLoading(false);\n              }\n\n              if (result.error) {\n                setIsLoading(false);\n                setIsErrorData(result.error);\n                setIsError(true);\n                console.log(result.error); // errorContent(result.error);\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function submitHandlerRegister(_x5) {\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  function _submitHandlerRegister() {\n    _submitHandlerRegister = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var enteredEmail, enteredPassword, enteredName, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsLoading(true);\n              event.preventDefault();\n              enteredEmail = registerEmailInputRef.current.value;\n              enteredPassword = registerPasswordInputRef.current.value;\n              enteredName = registerNameInputRef.current.value; // optional: Add validation\n\n              _context2.prev = 5;\n              _context2.next = 8;\n              return createUser(enteredEmail, enteredPassword, enteredName);\n\n            case 8:\n              result = _context2.sent;\n              setIsLoading(false); // console.log(result);\n              //console.log(result);\n\n              _context2.next = 18;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](5);\n              console.log(_context2.t0);\n              setIsLoading(false);\n              setIsError(true);\n              setIsErrorData(\"account already exists\");\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5, 12]]);\n    }));\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.col1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.formbox,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form,\n          children: [!toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.loginform,\n            onSubmit: submitHandler,\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: classes.mainheading,\n                children: \"Login Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: loginEmailInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: loginPasswordInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"LOGIN\",\n              onClick: switchAuthModeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.message,\n              children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.registerform,\n            onSubmit: submitHandlerRegister,\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: classes.mainheading,\n                children: \"Register Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"user name\",\n              ref: registerNameInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: registerEmailInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: registerPasswordInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"REGISTER\",\n              onClick: switchAuthModeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.message,\n              children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthForm, \"TZpbrw6dkgHFirJP2OwSG1nzwY0=\", false, function () {\n  return [useRouter];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/auth/auth-form.js"],"names":["useState","useRef","signIn","useRouter","Loading","Button","classes","Error","Fragment","Footer","createUser","email","password","enteredName","fetch","method","body","JSON","stringify","headers","response","json","data","ok","message","AuthForm","toggleForms","setToggleForms","isLoading","setIsLoading","isError","setIsError","isErrorData","setIsErrorData","toggleForm","prev","loginEmailInputRef","loginPasswordInputRef","registerEmailInputRef","registerPasswordInputRef","registerNameInputRef","isLogin","setIsLogin","router","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","redirect","result","error","replace","console","log","submitHandlerRegister","col1","formbox","form","loginform","mainheading","link","registerform"],"mappings":"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":["import { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\n\nasync function createUser(email, password, enteredName) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password, enteredName }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        router.replace(\"/dashboard\");\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.col1}>\n        <div className={classes.formbox}>\n          <div className={classes.form}>\n            {!toggleForms && (\n              <form className={classes.loginform} onSubmit={submitHandler}>\n                <center>\n                  <h1 className={classes.mainheading}>Login Form</h1>\n                </center>\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={loginEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={loginPasswordInputRef}\n                />\n\n                <Button\n                  content=\"LOGIN\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Not Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Register\n                  </a>\n                </p>\n              </form>\n            )}\n            {toggleForms && (\n              <form\n                className={classes.registerform}\n                onSubmit={submitHandlerRegister}\n              >\n                <center>\n                  <h1 className={classes.mainheading}>Register Form</h1>\n                </center>\n                <input\n                  type=\"text\"\n                  placeholder=\"user name\"\n                  ref={registerNameInputRef}\n                />\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={registerEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={registerPasswordInputRef}\n                />\n\n                <Button\n                  content=\"REGISTER\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Already Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Login\n                  </a>\n                </p>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default AuthForm;\n\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/\n"]},"metadata":{},"sourceType":"module"}