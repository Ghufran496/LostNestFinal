{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\nimport Loading from \"../../components/UI/Loading\";\n\nfunction ItemDetailPage(props) {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(false),\n      showQForm = _useState2[0],\n      setIsShowQForm = _useState2[1];\n\n  var extractedObject = props.extractedObject;\n\n  if (!extractedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this); // Render loading spinner if no data is available\n  }\n\n  useEffect(function () {\n    setIsLoading(true);\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 2000); // Simulate a loading time of 5 seconds\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  var event = extractedObject;\n\n  var changeModeHandler = function changeModeHandler() {\n    setIsShowQForm(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeModeHandler,\n      style: {\n        padding: \"10px\",\n        backgroundColor: \"black\",\n        color: \"white\"\n      },\n      children: \"Claim\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), showQForm && /*#__PURE__*/_jsxDEV(QuestionForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ItemDetailPage, \"Aa7ocyAgYOYgFLKGEof5pFegnRU=\");\n\n_c = ItemDetailPage;\nexport var __N_SSP = true;\nexport default ItemDetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemDetailPage\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useState","useEffect","Head","Fragment","EventSummary","EventLogistics","EventContent","QuestionForm","Loading","ItemDetailPage","props","isLoading","setIsLoading","showQForm","setIsShowQForm","extractedObject","setTimeout","event","changeModeHandler","Title","Description","Date","ReducedImg","Type","Category","padding","backgroundColor","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAGA,OAAOC,OAAP,MAAoB,6BAApB;;AAGA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAAA,kBACKV,QAAQ,CAAC,KAAD,CADb;AAAA,MACtBW,SADsB;AAAA,MACXC,YADW;;AAAA,mBAEOZ,QAAQ,CAAC,KAAD,CAFf;AAAA,MAEtBa,SAFsB;AAAA,MAEXC,cAFW;;AAAA,MAIrBC,eAJqB,GAIDL,KAJC,CAIrBK,eAJqB;;AAM7B,MAAI,CAACA,eAAL,EAAsB;AACpB,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP,CADoB,CACA;AACrB;;AAEDd,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,UAAU,CAAC,YAAM;AACfJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV,CAFc,CAIJ;AACX,GALQ,EAKN,EALM,CAAT;;AAOA,MAAID,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAMM,KAAK,GAAGF,eAAd;;AACA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQG,KAAK,CAACE;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACG;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEH,KAAK,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,cAAD;AACE,MAAA,IAAI,EAAEF,KAAK,CAACI,IADd;AAEE,MAAA,UAAU,EAAEJ,KAAK,CAACK,UAFpB;AAGE,MAAA,KAAK,EAAEL,KAAK,CAACE,KAHf;AAIE,MAAA,IAAI,EAAEF,KAAK,CAACM,IAJd;AAKE,MAAA,QAAQ,EAAEN,KAAK,CAACO;AALlB;AAAA;AAAA;AAAA;AAAA,YANF,eAcE,QAAC,YAAD;AAAA,6BACE;AAAA,kBAAIP,KAAK,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF,eAkBE;AACE,MAAA,OAAO,EAAEF,iBADX;AAEE,MAAA,KAAK,EAAE;AAAEO,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,eAAe,EAAE,OAApC;AAA6CC,QAAAA,KAAK,EAAE;AAApD,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,EAyBGd,SAAS,iBAAI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAzBhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAtDQJ,c;;KAAAA,c;;AA0ET,eAAeA,cAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\r\n\r\nconst { ObjectId } = require(\"mongodb\");\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\n\r\nfunction ItemDetailPage(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showQForm, setIsShowQForm] = useState(false);\r\n\r\n  const { extractedObject } = props;\r\n\r\n  if (!extractedObject) {\r\n    return <Loading />; // Render loading spinner if no data is available\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 2000); // Simulate a loading time of 5 seconds\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n  const event = extractedObject;\r\n  const changeModeHandler = () => {\r\n    setIsShowQForm(true);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n\r\n      <button\r\n        onClick={changeModeHandler}\r\n        style={{ padding: \"10px\", backgroundColor: \"black\", color: \"white\" }}\r\n      >\r\n        Claim\r\n      </button>\r\n\r\n      {showQForm && <QuestionForm />}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}