{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\n// import React, { useState, useEffect } from \"react\";\n// import Head from \"next/head\";\n// import { Fragment } from \"react\";\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\n// const { ObjectId } = require(\"mongodb\");\n// import Loading from \"../../components/UI/Loading\";\n// import { connectToDatabase } from \"../../lib/db\";\n// function ItemDetailPage(props) {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const { extractedObject } = props;\n//   if (!extractedObject) {\n//     return <Loading />; // Render loading spinner if no data is available\n//   }\n//   useEffect(() => {\n//     setIsLoading(true);\n//     setTimeout(() => {\n//       setIsLoading(false);\n//     }, 2000); // Simulate a loading time of 5 seconds\n//   }, []);\n//   if (isLoading) {\n//     return <Loading />;\n//   }\n//   const event = extractedObject;\n//   return (\n//     <Fragment>\n//       <Head>\n//         <title>{event.Title}</title>\n//         <meta name=\"description\" content={event.Description} />\n//       </Head>\n//       <EventSummary Title={event.Title} />\n//       <EventLogistics\n//         Date={event.Date}\n//         ReducedImg={event.ReducedImg}\n//         Title={event.Title}\n//         Type={event.Type}\n//         Category={event.Category}\n//       />\n//       <EventContent>\n//         <p>{event.Description}</p>\n//       </EventContent>\n//     </Fragment>\n//   );\n// }\n// export async function getServerSideProps(context) {\n//   const postId = context.params.itemid;\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\n//   return {\n//     props: {\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\n//     },\n//   };\n// }\n// export default ItemDetailPage;\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport Loading from \"../../components/UI/Loading\";\nimport { connectToDatabase } from \"../../lib/db\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nfunction ItemDetailPage(props) {\n  const {\n    extractedObject\n  } = props;\n\n  if (!extractedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this); // Render loading spinner if no data is available\n  }\n\n  const event = extractedObject;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticProps({\n  params\n}) {\n  const postId = params.itemid;\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const extractedObject = data.find(item => item._id.equals(objectId));\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(extractedObject))\n    },\n    revalidate: 10\n  };\n}\nexport async function getStaticPaths() {\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const paths = data.map(item => ({\n    params: {\n      itemid: item._id.toString()\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: blocking\n  };\n}\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useState","useEffect","Head","Fragment","EventSummary","EventLogistics","EventContent","Loading","connectToDatabase","ObjectId","require","ItemDetailPage","props","extractedObject","event","Title","Description","Date","ReducedImg","Type","Category","getStaticProps","params","postId","itemid","objectId","client","db","data","collection","find","toArray","item","_id","equals","JSON","parse","stringify","revalidate","getStaticPaths","paths","map","toString","fallback","blocking"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,iBAAT,QAAkC,cAAlC;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAsBD,KAA5B;;AAEA,MAAI,CAACC,eAAL,EAAsB;AACpB,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP,CADoB,CACA;AACrB;;AAED,QAAMC,KAAK,GAAGD,eAAd;AAEA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQC,KAAK,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,KAAK,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEF,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,cAAD;AACE,MAAA,IAAI,EAAED,KAAK,CAACG,IADd;AAEE,MAAA,UAAU,EAAEH,KAAK,CAACI,UAFpB;AAGE,MAAA,KAAK,EAAEJ,KAAK,CAACC,KAHf;AAIE,MAAA,IAAI,EAAED,KAAK,CAACK,IAJd;AAKE,MAAA,QAAQ,EAAEL,KAAK,CAACM;AALlB;AAAA;AAAA;AAAA;AAAA,YANF,eAcE,QAAC,YAAD;AAAA,6BACE;AAAA,kBAAIN,KAAK,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;AAED,OAAO,eAAeK,cAAf,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMC,MAAM,GAAGD,MAAM,CAACE,MAAtB;AACA,QAAMC,QAAQ,GAAG,IAAIhB,QAAJ,CAAac,MAAb,CAAjB,CAF+C,CAER;;AAEvC,QAAMG,MAAM,GAAG,MAAMlB,iBAAiB,EAAtC;AACA,QAAMmB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,QAAMlB,eAAe,GAAGe,IAAI,CAACE,IAAL,CAAWE,IAAD,IAAUA,IAAI,CAACC,GAAL,CAASC,MAAT,CAAgBT,QAAhB,CAApB,CAAxB;AAEA,SAAO;AACLb,IAAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,EAAEsB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAexB,eAAf,CAAX;AADZ,KADF;AAILyB,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMb,MAAM,GAAG,MAAMlB,iBAAiB,EAAtC;AACA,QAAMmB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,QAAMS,KAAK,GAAGZ,IAAI,CAACa,GAAL,CAAUT,IAAD,KAAW;AAChCV,IAAAA,MAAM,EAAE;AAAEE,MAAAA,MAAM,EAAEQ,IAAI,CAACC,GAAL,CAASS,QAAT;AAAV;AADwB,GAAX,CAAT,CAAd;AAIA,SAAO;AACLF,IAAAA,KAAK,EAAEA,KADF;AAELG,IAAAA,QAAQ,EAAEC;AAFL,GAAP;AAID;AAED,eAAejC,cAAf","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Head from \"next/head\";\r\n// import { Fragment } from \"react\";\r\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\r\n\r\n// const { ObjectId } = require(\"mongodb\");\r\n// import Loading from \"../../components/UI/Loading\";\r\n// import { connectToDatabase } from \"../../lib/db\";\r\n\r\n// function ItemDetailPage(props) {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const { extractedObject } = props;\r\n\r\n//   if (!extractedObject) {\r\n//     return <Loading />; // Render loading spinner if no data is available\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     setIsLoading(true);\r\n//     setTimeout(() => {\r\n//       setIsLoading(false);\r\n//     }, 2000); // Simulate a loading time of 5 seconds\r\n//   }, []);\r\n\r\n//   if (isLoading) {\r\n//     return <Loading />;\r\n//   }\r\n//   const event = extractedObject;\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <Head>\r\n//         <title>{event.Title}</title>\r\n//         <meta name=\"description\" content={event.Description} />\r\n//       </Head>\r\n//       <EventSummary Title={event.Title} />\r\n//       <EventLogistics\r\n//         Date={event.Date}\r\n//         ReducedImg={event.ReducedImg}\r\n//         Title={event.Title}\r\n//         Type={event.Type}\r\n//         Category={event.Category}\r\n//       />\r\n\r\n//       <EventContent>\r\n//         <p>{event.Description}</p>\r\n//       </EventContent>\r\n//     </Fragment>\r\n//   );\r\n// }\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.itemid;\r\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n//   return {\r\n//     props: {\r\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export default ItemDetailPage;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\n\r\nconst { ObjectId } = require(\"mongodb\");\r\n\r\nfunction ItemDetailPage(props) {\r\n  const { extractedObject } = props;\r\n\r\n  if (!extractedObject) {\r\n    return <Loading />; // Render loading spinner if no data is available\r\n  }\r\n\r\n  const event = extractedObject;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const postId = params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n    revalidate: 10,\r\n  };\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const paths = data.map((item) => ({\r\n    params: { itemid: item._id.toString() },\r\n  }));\r\n\r\n  return {\r\n    paths: paths,\r\n    fallback: blocking,\r\n  };\r\n}\r\n\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}