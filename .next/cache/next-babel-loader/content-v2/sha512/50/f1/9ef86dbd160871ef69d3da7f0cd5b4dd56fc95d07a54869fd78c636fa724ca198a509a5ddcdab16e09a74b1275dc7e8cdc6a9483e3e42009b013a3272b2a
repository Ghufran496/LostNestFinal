{"ast":null,"code":"// api/sendEmail.js\nrequire(\"dotenv\").config();\n\nconst sgMail = require(\"@sendgrid/mail\");\n\nconst {\n  SG_API_KEY,\n  FROM_EMAIL,\n  TO_EMAIL\n} = process.env; //import { fetchallemails } from \"../../../lib/db\";\n//import { getSession } from \"next-auth/client\";\n\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method Not Allowed\"\n    });\n  }\n\n  const {\n    subject,\n    message\n  } = req.body; //const session = await getSession({ req: req });\n  //const emailsender = session.user.email;\n\n  if (!subject || !message) {\n    return res.status(400).json({\n      error: \"Missing required parameters\"\n    });\n  } //   const apikey =\n  //     \"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\";\n\n\n  sgMail.setApiKey(SG_API_KEY); //const to = await fetchallemails();\n  //const to = (await fetchallemails()).map((user) => user.email);\n\n  const msg = {\n    to: FROM_EMAIL,\n    // Ensure to is an array\n    from: FROM_EMAIL,\n    // Replace with your verified SendGrid email\n    subject,\n    text: message\n  };\n\n  try {\n    await sgMail.send(msg);\n    res.status(200).json({\n      success: true\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n}","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/email/sendEmail.js"],"names":["require","config","sgMail","SG_API_KEY","FROM_EMAIL","TO_EMAIL","process","env","handler","req","res","method","status","json","error","subject","message","body","setApiKey","msg","to","from","text","send","success","console"],"mappings":"AAAA;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAM;AAAEG,EAAAA,UAAF;AAAcC,EAAAA,UAAd;AAA0BC,EAAAA;AAA1B,IAAuCC,OAAO,CAACC,GAArD,C,CACA;AACA;;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBP,GAAG,CAACQ,IAAjC,CAL8C,CAM9C;AAEA;;AAEA,MAAI,CAACF,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACxB,WAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD,GAZ6C,CAc9C;AACA;;;AAEAZ,EAAAA,MAAM,CAACgB,SAAP,CAAiBf,UAAjB,EAjB8C,CAmB9C;AACA;;AAEA,QAAMgB,GAAG,GAAG;AACVC,IAAAA,EAAE,EAAEhB,UADM;AACM;AAChBiB,IAAAA,IAAI,EAAEjB,UAFI;AAEQ;AAClBW,IAAAA,OAHU;AAIVO,IAAAA,IAAI,EAAEN;AAJI,GAAZ;;AAOA,MAAI;AACF,UAAMd,MAAM,CAACqB,IAAP,CAAYJ,GAAZ,CAAN;AACAT,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GAHD,CAGE,OAAOV,KAAP,EAAc;AACdW,IAAAA,OAAO,CAACX,KAAR,CAAcA,KAAd;AACAJ,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF","sourcesContent":["// api/sendEmail.js\r\nrequire(\"dotenv\").config();\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nconst { SG_API_KEY, FROM_EMAIL, TO_EMAIL } = process.env;\r\n//import { fetchallemails } from \"../../../lib/db\";\r\n//import { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  //const session = await getSession({ req: req });\r\n\r\n  //const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //   const apikey =\r\n  //     \"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\";\r\n\r\n  sgMail.setApiKey(SG_API_KEY);\r\n\r\n  //const to = await fetchallemails();\r\n  //const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  const msg = {\r\n    to: FROM_EMAIL, // Ensure to is an array\r\n    from: FROM_EMAIL, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  try {\r\n    await sgMail.send(msg);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}