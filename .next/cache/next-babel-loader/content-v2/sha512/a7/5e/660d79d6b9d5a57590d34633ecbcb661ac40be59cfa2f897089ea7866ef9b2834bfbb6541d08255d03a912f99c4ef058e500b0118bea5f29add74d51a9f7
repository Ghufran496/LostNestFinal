{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\profile\\\\index.js\";\nimport { getSession } from \"next-auth/client\";\nimport { connectToDatabase } from \"../../lib/db\";\nimport UserProfile from \"../../components/profile/user-profile\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport Loading from \"../../components/UI/Loading\";\nimport { useEffect } from \"react\";\n\nfunction ProfilePage(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    profileData\n  } = props;\n\n  if (!profileData) {\n    setIsLoading(true); // Render loading spinner if no data is available\n  } //console.log(profileData);\n\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Your Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Your Profile content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"icon\",\n        href: \"/images/logos.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: profileData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getSession({\n    req: context.req\n  });\n\n  if (!session) {\n    return {\n      redirect: {\n        destination: \"/auth\",\n        permanent: false\n      }\n    };\n  }\n\n  const userEmail = session.user.email;\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"users\");\n  const user = await usersCollection.findOne({\n    email: userEmail\n  }, {\n    projection: {\n      password: 0\n    }\n  });\n  return {\n    props: {\n      session,\n      profileData: JSON.parse(JSON.stringify(user))\n    }\n  };\n}\n/*\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n  };\r\n}\r\n\r\n*/\n\nexport default ProfilePage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/profile/index.js"],"names":["getSession","connectToDatabase","UserProfile","Fragment","Head","Loading","useEffect","ProfilePage","props","isLoading","setIsLoading","useState","profileData","name","getServerSideProps","context","session","req","redirect","destination","permanent","userEmail","user","email","client","usersCollection","db","collection","findOne","projection","password","JSON","parse","stringify"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBJ,KAAxB;;AACA,MAAI,CAACI,WAAL,EAAkB;AAChBF,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADgB,CACI;AACrB,GALyB,CAM1B;;;AACA,MAAID,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,GAAG,EAAC,MAAV;AAAiB,QAAA,IAAI,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,gBAAIG,WAAW,CAACC;AAAhB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;AAED,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,OAAO,GAAG,MAAMhB,UAAU,CAAC;AAAEiB,IAAAA,GAAG,EAAEF,OAAO,CAACE;AAAf,GAAD,CAAhC;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO;AACLE,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,OADL;AAERC,QAAAA,SAAS,EAAE;AAFH;AADL,KAAP;AAMD;;AAED,QAAMC,SAAS,GAAGL,OAAO,CAACM,IAAR,CAAaC,KAA/B;AACA,QAAMC,MAAM,GAAG,MAAMvB,iBAAiB,EAAtC;AACA,QAAMwB,eAAe,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAxB;AACA,QAAML,IAAI,GAAG,MAAMG,eAAe,CAACG,OAAhB,CACjB;AAAEL,IAAAA,KAAK,EAAEF;AAAT,GADiB,EAEjB;AAAEQ,IAAAA,UAAU,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AAAd,GAFiB,CAAnB;AAKA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLQ,MAAAA,OADK;AAELJ,MAAAA,WAAW,EAAEmB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeX,IAAf,CAAX;AAFR;AADF,GAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAef,WAAf","sourcesContent":["import { getSession } from \"next-auth/client\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\nimport UserProfile from \"../../components/profile/user-profile\";\r\nimport { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction ProfilePage(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { profileData } = props;\r\n  if (!profileData) {\r\n    setIsLoading(true); // Render loading spinner if no data is available\r\n  }\r\n  //console.log(profileData);\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>Your Profile</title>\r\n        <meta name=\"description\" content=\"Your Profile content\" />\r\n        <link rel=\"icon\" href=\"/images/logos.png\" />\r\n      </Head>\r\n      <p>{profileData.name}</p>\r\n      {/* <UserProfile /> */}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const session = await getSession({ req: context.req });\r\n\r\n  if (!session) {\r\n    return {\r\n      redirect: {\r\n        destination: \"/auth\",\r\n        permanent: false,\r\n      },\r\n    };\r\n  }\r\n\r\n  const userEmail = session.user.email;\r\n  const client = await connectToDatabase();\r\n  const usersCollection = client.db().collection(\"users\");\r\n  const user = await usersCollection.findOne(\r\n    { email: userEmail },\r\n    { projection: { password: 0 } }\r\n  );\r\n\r\n  return {\r\n    props: {\r\n      session,\r\n      profileData: JSON.parse(JSON.stringify(user)),\r\n    },\r\n  };\r\n}\r\n\r\n/*\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n  };\r\n}\r\n\r\n*/\r\n\r\nexport default ProfilePage;\r\n"]},"metadata":{},"sourceType":"module"}