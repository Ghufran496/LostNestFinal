{"ast":null,"code":"//import { hashPassword } from \"../../../lib/auth\";\nimport { hashPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return;\n  }\n\n  const data = req.body;\n  const {\n    email,\n    password,\n    enteredName\n  } = data;\n\n  if (!enteredName) {\n    res.status(422).json({\n      message: \"Username not entered\"\n    });\n    return;\n  }\n\n  if (!email || !email.includes(\"@\")) {\n    res.status(422).json({\n      message: \"Invalid Email\"\n    });\n    return;\n  }\n\n  if (!password || password.trim().length < 7) {\n    res.status(422).json({\n      message: \"Invalid input - password should also be at least 7 characters long.\"\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const existingUser = await db.collection(\"users\").findOne({\n    email: email\n  });\n\n  if (existingUser) {\n    res.status(422).json({\n      message: \"User exists already!\"\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n  const result = await db.collection(\"users\").insertOne({\n    name: enteredName,\n    email: email,\n    password: hashedPassword\n  });\n  res.status(201).json({\n    message: \"Created user!\"\n  });\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/auth/signup.js"],"names":["hashPassword","connectToDatabase","handler","req","res","method","data","body","email","password","enteredName","status","json","message","includes","trim","length","client","db","existingUser","collection","findOne","close","hashedPassword","result","insertOne","name"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB;AACD;;AAED,QAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAmCJ,IAAzC;;AAEA,MAAI,CAACI,WAAL,EAAkB;AAChBN,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AADU,KAArB;AAGA;AACD;;AAED,MAAI,CAACL,KAAD,IAAU,CAACA,KAAK,CAACM,QAAN,CAAe,GAAf,CAAf,EAAoC;AAClCV,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AADU,KAArB;AAGA;AACD;;AAED,MAAI,CAACJ,QAAD,IAAaA,QAAQ,CAACM,IAAT,GAAgBC,MAAhB,GAAyB,CAA1C,EAA6C;AAC3CZ,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACL;AAFiB,KAArB;AAIA;AACD;;AAED,QAAMI,MAAM,GAAG,MAAMhB,iBAAiB,EAAtC;AAEA,QAAMiB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAEb,IAAAA,KAAK,EAAEA;AAAT,GAA/B,CAA3B;;AAEA,MAAIW,YAAJ,EAAkB;AAChBf,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAI,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,cAAc,GAAG,MAAMvB,YAAY,CAACS,QAAD,CAAzC;AAEA,QAAMe,MAAM,GAAG,MAAMN,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBK,SAAvB,CAAiC;AACpDC,IAAAA,IAAI,EAAEhB,WAD8C;AAEpDF,IAAAA,KAAK,EAAEA,KAF6C;AAGpDC,IAAAA,QAAQ,EAAEc;AAH0C,GAAjC,CAArB;AAMAnB,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACAI,EAAAA,MAAM,CAACK,KAAP;AACD;;AAED,eAAepB,OAAf","sourcesContent":["//import { hashPassword } from \"../../../lib/auth\";\nimport { hashPassword } from \"../../../lib/auth\";\nimport { connectToDatabase } from \"../../../lib/db\";\n\nasync function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return;\n  }\n\n  const data = req.body;\n\n  const { email, password, enteredName } = data;\n\n  if (!enteredName) {\n    res.status(422).json({\n      message: \"Username not entered\",\n    });\n    return;\n  }\n\n  if (!email || !email.includes(\"@\")) {\n    res.status(422).json({\n      message: \"Invalid Email\",\n    });\n    return;\n  }\n\n  if (!password || password.trim().length < 7) {\n    res.status(422).json({\n      message:\n        \"Invalid input - password should also be at least 7 characters long.\",\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n\n  const db = client.db();\n\n  const existingUser = await db.collection(\"users\").findOne({ email: email });\n\n  if (existingUser) {\n    res.status(422).json({ message: \"User exists already!\" });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n\n  const result = await db.collection(\"users\").insertOne({\n    name: enteredName,\n    email: email,\n    password: hashedPassword,\n  });\n\n  res.status(201).json({ message: \"Created user!\" });\n  client.close();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}