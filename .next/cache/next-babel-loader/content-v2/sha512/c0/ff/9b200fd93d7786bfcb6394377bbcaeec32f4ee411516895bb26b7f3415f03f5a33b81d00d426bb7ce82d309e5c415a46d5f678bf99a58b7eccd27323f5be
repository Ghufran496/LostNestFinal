{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\"; //import Error from \"../UI/Error\";\n\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\nimport ErrorComp from \"../UI/ErrorComp\"; // async function createUser(email, password, enteredName) {\n//   const response = await fetch(\"/api/auth/signup\", {\n//     method: \"POST\",\n//     body: JSON.stringify({ email, password, enteredName }),\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//   });\n//   const data = await response.json();\n//   // console.log(data.message);\n//   if (!response.ok) {\n//     throw new Error(data.message || \"Something went wrong!\");\n//   }\n//   return data;\n// }\n\nfunction AuthForm() {\n  const {\n    0: toggleForms,\n    1: setToggleForms\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  const {\n    0: isErrorData,\n    1: setIsErrorData\n  } = useState(\"Sorry but the page you are looking for does not exist.\");\n\n  async function createUser(email, password, enteredName) {\n    const response = await fetch(\"/api/auth/signup\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password,\n        enteredName\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      setIsErrorData(data.message);\n      setIsLoading(false);\n      setIsError(true);\n    }\n\n    return data;\n  }\n\n  const toggleForm = () => {\n    setToggleForms(prev => !prev);\n  };\n\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n  const {\n    0: isLogin,\n    1: setIsLogin\n  } = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(prevState => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword\n      });\n\n      if (!result.error) {\n        router.replace(\"/dashboard\");\n        setIsLoading(false);\n      }\n\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value; // optional: Add validation\n\n    const result = await createUser(enteredEmail, enteredPassword, enteredName);\n    setIsLoading(false);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsx(Loading, {});\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsx(ErrorComp, {\n      errorData: isErrorData\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: classes.col1,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: classes.formbox,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: classes.form,\n          children: [!toggleForms && /*#__PURE__*/_jsxs(\"form\", {\n            className: classes.loginform,\n            onSubmit: submitHandler,\n            children: [/*#__PURE__*/_jsx(\"center\", {\n              children: /*#__PURE__*/_jsx(\"h1\", {\n                className: classes.mainheading,\n                children: \"Login Form\"\n              })\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: loginEmailInputRef,\n              required: true\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: loginPasswordInputRef,\n              required: true\n            }), /*#__PURE__*/_jsx(Button, {\n              content: \"LOGIN\",\n              onClick: switchAuthModeHandler\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              className: classes.message,\n              children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsx(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Register\"\n              })]\n            })]\n          }), toggleForms && /*#__PURE__*/_jsxs(\"form\", {\n            className: classes.registerform,\n            onSubmit: submitHandlerRegister,\n            children: [/*#__PURE__*/_jsx(\"center\", {\n              children: /*#__PURE__*/_jsx(\"h1\", {\n                className: classes.mainheading,\n                children: \"Register Form\"\n              })\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"text\",\n              placeholder: \"user name\",\n              ref: registerNameInputRef,\n              required: true\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: registerEmailInputRef,\n              required: true\n            }), /*#__PURE__*/_jsx(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: registerPasswordInputRef,\n              required: true\n            }), /*#__PURE__*/_jsx(Button, {\n              content: \"REGISTER\",\n              onClick: switchAuthModeHandler\n            }), /*#__PURE__*/_jsxs(\"p\", {\n              className: classes.message,\n              children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsx(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Login\"\n              })]\n            })]\n          })]\n        })\n      })\n    }), /*#__PURE__*/_jsx(Footer, {})]\n  });\n}\n\nexport default AuthForm;\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/","map":null,"metadata":{},"sourceType":"module"}