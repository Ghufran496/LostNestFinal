{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nclass Database {\n  constructor() {\n    if (!Database.instance) {\n      this.client = null;\n      this.clientSet = false;\n      Database.instance = this;\n    }\n\n    return Database.instance;\n  }\n\n  async connect() {\n    if (this.clientSet) {\n      console.log(\"return already stored client\" + this.client);\n      return this.client;\n    }\n\n    this.client = await MongoClient.connect(\"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\", {\n      useUnifiedTopology: true,\n      useNewUrlParser: true,\n      connectTimeoutMS: 30000\n    });\n\n    if (!this.clientSet) {\n      this.clientSet = true;\n      console.log(\"return new client\");\n    }\n\n    return this.client;\n  }\n\n}\n\nconst database = new Database();\nexport const connectToDatabase = database.connect.bind(database); // import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n// let cachedClient = null;\n// let clientSet = false;\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true,\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n//   return client;\n// }\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db(); //const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  return data;\n}\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n  const user = await usersCollection.findOne({\n    _id: postobjectId\n  });\n  return user;\n}\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"QAnswers\");\n  const user = await usersCollection.find({\n    PostID: id\n  }).toArray();\n  return user;\n} // export async function getPostsByEmail(email) {\n//   //console.log(email);\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts);\n//   // return allPosts.find((event) => event.posterEmail === email);\n//   return allPosts.filter((event) => event.posterEmail === email);\n// }\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n// export async function getResponseDataById(id) {\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"QAnswers\").find({}).toArray();\n//   //console.log(data);\n//   return data.filter((event) => event.PostID === id);\n// }\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/lib/db.js"],"names":["MongoClient","ObjectId","require","Database","constructor","instance","client","clientSet","connect","console","log","useUnifiedTopology","useNewUrlParser","connectTimeoutMS","database","connectToDatabase","bind","getAllPosts","db","data","collection","find","toArray","getPostDataById","id","usersCollection","postobjectId","user","findOne","_id","getResponseDataById","PostID"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeC,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZ,QAAI,CAACD,QAAQ,CAACE,QAAd,EAAwB;AACtB,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKC,SAAL,GAAiB,KAAjB;AACAJ,MAAAA,QAAQ,CAACE,QAAT,GAAoB,IAApB;AACD;;AAED,WAAOF,QAAQ,CAACE,QAAhB;AACD;;AAED,QAAMG,OAAN,GAAgB;AACd,QAAI,KAAKD,SAAT,EAAoB;AAClBE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiC,KAAKJ,MAAlD;AACA,aAAO,KAAKA,MAAZ;AACD;;AAED,SAAKA,MAAL,GAAc,MAAMN,WAAW,CAACQ,OAAZ,CAClB,mGADkB,EAElB;AACEG,MAAAA,kBAAkB,EAAE,IADtB;AAEEC,MAAAA,eAAe,EAAE,IAFnB;AAGEC,MAAAA,gBAAgB,EAAE;AAHpB,KAFkB,CAApB;;AASA,QAAI,CAAC,KAAKN,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,IAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;;AAED,WAAO,KAAKJ,MAAZ;AACD;;AAhCY;;AAmCf,MAAMQ,QAAQ,GAAG,IAAIX,QAAJ,EAAjB;AACA,OAAO,MAAMY,iBAAiB,GAAGD,QAAQ,CAACN,OAAT,CAAiBQ,IAAjB,CAAsBF,QAAtB,CAA1B,C,CAEP;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,OAAO,eAAeG,WAAf,GAA6B;AAClC,QAAMX,MAAM,GAAG,MAAMS,iBAAiB,EAAtC;AACA,QAAMG,EAAE,GAAGZ,MAAM,CAACY,EAAP,EAAX,CAFkC,CAIlC;;AACA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,SAAOH,IAAP;AACD;AAED,OAAO,eAAeI,eAAf,CAA+BC,EAA/B,EAAmC;AACxC,QAAMlB,MAAM,GAAG,MAAMS,iBAAiB,EAAtC;AACA,QAAMU,eAAe,GAAGnB,MAAM,CAACY,EAAP,GAAYE,UAAZ,CAAuB,YAAvB,CAAxB;AACA,QAAMM,YAAY,GAAG,IAAIzB,QAAJ,CAAauB,EAAb,CAArB;AAEA,QAAMG,IAAI,GAAG,MAAMF,eAAe,CAACG,OAAhB,CAAwB;AACzCC,IAAAA,GAAG,EAAEH;AADoC,GAAxB,CAAnB;AAIA,SAAOC,IAAP;AACD;AAED,OAAO,eAAeG,mBAAf,CAAmCN,EAAnC,EAAuC;AAC5C,QAAMlB,MAAM,GAAG,MAAMS,iBAAiB,EAAtC;AAEA,QAAMU,eAAe,GAAGnB,MAAM,CAACY,EAAP,GAAYE,UAAZ,CAAuB,UAAvB,CAAxB;AAEA,QAAMO,IAAI,GAAG,MAAMF,eAAe,CAC/BJ,IADgB,CACX;AACJU,IAAAA,MAAM,EAAEP;AADJ,GADW,EAIhBF,OAJgB,EAAnB;AAKA,SAAOK,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { MongoClient } from \"mongodb\";\nconst { ObjectId } = require(\"mongodb\");\nclass Database {\n  constructor() {\n    if (!Database.instance) {\n      this.client = null;\n      this.clientSet = false;\n      Database.instance = this;\n    }\n\n    return Database.instance;\n  }\n\n  async connect() {\n    if (this.clientSet) {\n      console.log(\"return already stored client\" + this.client);\n      return this.client;\n    }\n\n    this.client = await MongoClient.connect(\n      \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n      {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n        connectTimeoutMS: 30000,\n      }\n    );\n\n    if (!this.clientSet) {\n      this.clientSet = true;\n      console.log(\"return new client\");\n    }\n\n    return this.client;\n  }\n}\n\nconst database = new Database();\nexport const connectToDatabase = database.connect.bind(database);\n\n// import { MongoClient } from \"mongodb\";\n// const { ObjectId } = require(\"mongodb\");\n\n// let cachedClient = null;\n// let clientSet = false;\n\n// export async function connectToDatabase() {\n//   if (clientSet) {\n//     console.log(\"return already stored client\" + cachedClient);\n//     return cachedClient;\n//   }\n\n//   const client = await MongoClient.connect(\n//     \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\n//     {\n//       useUnifiedTopology: true,\n//       useNewUrlParser: true,\n//       connectTimeoutMS: 30000,\n//     }\n//   );\n\n//   if (!clientSet) {\n//     cachedClient = client;\n//     clientSet = true;\n//     console.log(\"return new client\");\n//   }\n\n//   return client;\n// }\n\nexport async function getAllPosts() {\n  const client = await connectToDatabase();\n  const db = client.db();\n\n  //const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n\n  return data;\n}\n\nexport async function getPostDataById(id) {\n  const client = await connectToDatabase();\n  const usersCollection = client.db().collection(\"PostedItem\");\n  const postobjectId = new ObjectId(id);\n\n  const user = await usersCollection.findOne({\n    _id: postobjectId,\n  });\n\n  return user;\n}\n\nexport async function getResponseDataById(id) {\n  const client = await connectToDatabase();\n\n  const usersCollection = client.db().collection(\"QAnswers\");\n\n  const user = await usersCollection\n    .find({\n      PostID: id,\n    })\n    .toArray();\n  return user;\n}\n\n// export async function getPostsByEmail(email) {\n//   //console.log(email);\n//   const allPosts = await getAllPosts();\n//   //console.log(allPosts);\n//   // return allPosts.find((event) => event.posterEmail === email);\n//   return allPosts.filter((event) => event.posterEmail === email);\n// }\n// export async function getPostDataById(id) {\n//   const allPosts = await getAllPosts(); //w\n\n//   const postobjectId = new ObjectId(id);\n//   //console.log(postobjectId);\n\n//   // return allPosts.find((event) => event._id === postobjectId);\n//   return allPosts.find(\n//     (event) => event._id.toString() === postobjectId.toString()\n//   );\n// }\n// export async function getResponseDataById(id) {\n//   const client = await connectToDatabase();\n//   const db = client.db();\n\n//   const data = await db.collection(\"QAnswers\").find({}).toArray();\n\n//   //console.log(data);\n//   return data.filter((event) => event.PostID === id);\n// }\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   //console.log(allPosts); good\n//   console.log(objectId);\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n// import { ObjectId } from \"mongodb\";\n\n// export async function getPostsByObjectId(objectId) {\n//   const allPosts = await getAllPosts();\n\n//   const data2 = allPosts.find((item) => item._id.equals(objectId));\n//   console.log(data2);\n//   return data2;\n// }\n"]},"metadata":{},"sourceType":"module"}