{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\nimport React, { useState } from \"react\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport Loader from \"../../components/UI/Loader\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nimport { connectToDatabase } from \"../../lib/db\";\n\nfunction ItemDetailPage(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const event = props.extractedObject;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(EventSummary, {\n        Title: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n        Date: event.Date,\n        ReducedImg: event.ReducedImg,\n        Title: event.Title,\n        Type: event.Type,\n        Category: event.Category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: event.Description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.itemid;\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const extractedObject = data.find(item => item._id.equals(objectId));\n  setIsLoading(false); // Set isLoading to false after the data has been fetched\n\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(extractedObject))\n    }\n  };\n}\nexport default ItemDetailPage; // import React from \"react\";\n// import Head from \"next/head\";\n// import { Fragment } from \"react\";\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\n// import Loader from \"../../components/UI/Loader\";\n// import { useState } from \"react\";\n// const { ObjectId } = require(\"mongodb\");\n// import { connectToDatabase } from \"../../lib/db\";\n// function ItemDetailPage(props) {\n//   const event = props.extractedObject;\n//   return (\n//     <Fragment>\n//       <Head>\n//         <title>{event.Title}</title>\n//         <meta name=\"description\" content={event.Description} />\n//       </Head>\n//       <EventSummary Title={event.Title} />\n//       <EventLogistics\n//         Date={event.Date}\n//         ReducedImg={event.ReducedImg}\n//         Title={event.Title}\n//         Type={event.Type}\n//         Category={event.Category}\n//       />\n//       <EventContent>\n//         <p>{event.Description}</p>\n//       </EventContent>\n//     </Fragment>\n//   );\n// }\n// export async function getServerSideProps(context) {\n//   const postId = context.params.itemid;\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\n//   return {\n//     props: {\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\n//     },\n//   };\n// }\n// export default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useState","Head","Fragment","EventSummary","EventLogistics","EventContent","Loader","ObjectId","require","connectToDatabase","ItemDetailPage","props","isLoading","setIsLoading","event","extractedObject","Title","Description","Date","ReducedImg","Type","Category","getServerSideProps","context","postId","params","itemid","objectId","client","db","data","collection","find","toArray","item","_id","equals","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport Loader from \"../../components/UI/Loader\";\r\n\r\nconst { ObjectId } = require(\"mongodb\");\r\n\r\nimport { connectToDatabase } from \"../../lib/db\";\r\n\r\nfunction ItemDetailPage(props) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const event = props.extractedObject;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          <EventSummary Title={event.Title} />\r\n          <EventLogistics\r\n            Date={event.Date}\r\n            ReducedImg={event.ReducedImg}\r\n            Title={event.Title}\r\n            Type={event.Type}\r\n            Category={event.Category}\r\n          />\r\n          <EventContent>\r\n            <p>{event.Description}</p>\r\n          </EventContent>\r\n        </div>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  setIsLoading(false); // Set isLoading to false after the data has been fetched\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default ItemDetailPage;\r\n// import React from \"react\";\r\n// import Head from \"next/head\";\r\n// import { Fragment } from \"react\";\r\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\r\n// import Loader from \"../../components/UI/Loader\";\r\n// import { useState } from \"react\";\r\n\r\n// const { ObjectId } = require(\"mongodb\");\r\n\r\n// import { connectToDatabase } from \"../../lib/db\";\r\n\r\n// function ItemDetailPage(props) {\r\n//   const event = props.extractedObject;\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <Head>\r\n//         <title>{event.Title}</title>\r\n//         <meta name=\"description\" content={event.Description} />\r\n//       </Head>\r\n//       <EventSummary Title={event.Title} />\r\n//       <EventLogistics\r\n//         Date={event.Date}\r\n//         ReducedImg={event.ReducedImg}\r\n//         Title={event.Title}\r\n//         Type={event.Type}\r\n//         Category={event.Category}\r\n//       />\r\n//       <EventContent>\r\n//         <p>{event.Description}</p>\r\n//       </EventContent>\r\n//     </Fragment>\r\n//   );\r\n// }\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.itemid;\r\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n//   return {\r\n//     props: {\r\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}