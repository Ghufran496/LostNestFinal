{"ast":null,"code":"import _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nfunction createUser(_x, _x2, _x3) {\n  return _createUser.apply(this, arguments);\n}\n\nfunction _createUser() {\n  _createUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(email, password, enteredName) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch(\"/api/auth/signup\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                enteredName: enteredName\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.json();\n\n          case 5:\n            data = _context3.sent;\n\n            if (response.ok) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(data.message || \"Something went wrong!\");\n\n          case 8:\n            return _context3.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createUser.apply(this, arguments);\n}\n\nfunction AuthForm() {\n  var _useState = useState(false),\n      toggleForms = _useState[0],\n      setToggleForms = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  var toggleForm = function toggleForm() {\n    setToggleForms(function (prev) {\n      return !prev;\n    });\n  };\n\n  var loginEmailInputRef = useRef();\n  var loginPasswordInputRef = useRef();\n  var registerEmailInputRef = useRef();\n  var registerPasswordInputRef = useRef();\n  var registerNameInputRef = useRef();\n\n  var _useState5 = useState(true),\n      isLogin = _useState5[0],\n      setIsLogin = _useState5[1];\n\n  var router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(function (prevState) {\n      return !prevState;\n    });\n  }\n\n  function submitHandler(_x4) {\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function _submitHandler() {\n    _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var enteredEmail, enteredPassword, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setIsLoading(true);\n              enteredEmail = loginEmailInputRef.current.value;\n              enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n              if (!isLogin) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 7;\n              return signIn(\"credentials\", {\n                redirect: false,\n                email: enteredEmail,\n                password: enteredPassword\n              });\n\n            case 7:\n              result = _context.sent;\n\n              if (!result.error) {\n                // set some auth state\n                router.replace(\"/dashboard\"); // console.log(result + \"Login success\");\n\n                console.log(result);\n                setIsLoading(false);\n              }\n\n              if (result.error) {\n                setIsLoading(false);\n                setIsErrorData(result.error);\n                setIsError(true); //console.log(result.error);\n                // errorContent(result.error);\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function submitHandlerRegister(_x5) {\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  function _submitHandlerRegister() {\n    _submitHandlerRegister = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var enteredEmail, enteredPassword, enteredName, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsLoading(true);\n              event.preventDefault();\n              enteredEmail = registerEmailInputRef.current.value;\n              enteredPassword = registerPasswordInputRef.current.value;\n              enteredName = registerNameInputRef.current.value; // optional: Add validation\n\n              _context2.prev = 5;\n              _context2.next = 8;\n              return createUser(enteredEmail, enteredPassword, enteredName);\n\n            case 8:\n              result = _context2.sent;\n              setIsLoading(false); // console.log(result);\n              //console.log(result);\n\n              _context2.next = 18;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](5);\n              console.log(_context2.t0);\n              setIsLoading(false);\n              setIsError(true);\n              setIsErrorData(\"account already exists\");\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5, 12]]);\n    }));\n    return _submitHandlerRegister.apply(this, arguments);\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsx(Loading, {});\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsx(Error, {\n      errorData: isErrorData\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: classes.col1,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classes.formbox,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: classes.form,\n        children: [!toggleForms && /*#__PURE__*/_jsxs(\"form\", {\n          className: classes.loginform,\n          onSubmit: submitHandler,\n          children: [/*#__PURE__*/_jsx(\"center\", {\n            children: /*#__PURE__*/_jsx(\"h1\", {\n              className: classes.mainheading,\n              children: \"Login Form\"\n            })\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\",\n            ref: loginEmailInputRef\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: loginPasswordInputRef\n          }), /*#__PURE__*/_jsx(Button, {\n            content: \"LOGIN\",\n            onClick: switchAuthModeHandler\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            className: classes.message,\n            children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsx(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Register\"\n            })]\n          })]\n        }), toggleForms && /*#__PURE__*/_jsxs(\"form\", {\n          className: classes.registerform,\n          onSubmit: submitHandlerRegister,\n          children: [/*#__PURE__*/_jsx(\"center\", {\n            children: /*#__PURE__*/_jsx(\"h1\", {\n              className: classes.mainheading,\n              children: \"Register Form\"\n            })\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: \"user name\",\n            ref: registerNameInputRef\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"email\",\n            placeholder: \"email-id\",\n            ref: registerEmailInputRef\n          }), /*#__PURE__*/_jsx(\"input\", {\n            type: \"password\",\n            placeholder: \"password\",\n            ref: registerPasswordInputRef\n          }), /*#__PURE__*/_jsx(Button, {\n            content: \"REGISTER\",\n            onClick: switchAuthModeHandler\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            className: classes.message,\n            children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsx(\"a\", {\n              onClick: toggleForm,\n              className: classes.link,\n              children: \"Login\"\n            })]\n          })]\n        })]\n      })\n    })\n  });\n}\n\nexport default AuthForm;\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/","map":null,"metadata":{},"sourceType":"module"}