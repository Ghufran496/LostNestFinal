{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\n\nconst {\n  ObjectId\n} = require(\"mongodb\");\n\nimport Loading from \"../../components/UI/Loading\";\nimport { connectToDatabase } from \"../../lib/db\";\n\nfunction ItemDetailPage(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: showQForm,\n    1: setIsShowQForm\n  } = useState(false);\n  const {\n    extractedObject\n  } = props;\n\n  if (!extractedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this); // Render loading spinner if no data is available\n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000); // Simulate a loading time of 5 seconds\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  const event = extractedObject;\n\n  const changeModeHandler = () => {\n    setIsShowQForm(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeModeHandler,\n      style: {\n        padding: \"10px\",\n        backgroundColor: \"black\",\n        color: \"white\"\n      },\n      children: \"Claim\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.itemid;\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const extractedObject = data.find(item => item._id.equals(objectId));\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(extractedObject))\n    }\n  };\n}\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useState","useEffect","Head","Fragment","EventSummary","EventLogistics","EventContent","QuestionForm","ObjectId","require","Loading","connectToDatabase","ItemDetailPage","props","isLoading","setIsLoading","showQForm","setIsShowQForm","extractedObject","setTimeout","event","changeModeHandler","Title","Description","Date","ReducedImg","Type","Category","padding","backgroundColor","color","getServerSideProps","context","postId","params","itemid","objectId","client","db","data","collection","find","toArray","item","_id","equals","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\r\n\r\nconst { ObjectId } = require(\"mongodb\");\r\nimport Loading from \"../../components/UI/Loading\";\r\nimport { connectToDatabase } from \"../../lib/db\";\r\n\r\nfunction ItemDetailPage(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showQForm, setIsShowQForm] = useState(false);\r\n\r\n  const { extractedObject } = props;\r\n\r\n  if (!extractedObject) {\r\n    return <Loading />; // Render loading spinner if no data is available\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 2000); // Simulate a loading time of 5 seconds\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n  const event = extractedObject;\r\n  const changeModeHandler = () => {\r\n    setIsShowQForm(true);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n\r\n      <button\r\n        onClick={changeModeHandler}\r\n        style={{ padding: \"10px\", backgroundColor: \"black\", color: \"white\" }}\r\n      >\r\n        Claim\r\n      </button>\r\n\r\n      <QuestionForm />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}