{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport classes from \"./specificid.module.css\";\nimport Loading from \"../../components/UI/Loading\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport { useState, useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport Answer from \"../../components/answers/answer\";\nimport { getSession } from \"next-auth/client\";\nimport { getPostDataById } from \"../../lib/db\";\n\nfunction specificid(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: processedObject,\n    1: setProcessedObject\n  } = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        extractedObject\n      } = props;\n\n      if (typeof extractedObject === \"object\") {\n        setProcessedObject(extractedObject);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n    };\n\n    fetchData();\n  }, [props.extractedObject]);\n\n  if (isLoading || !processedObject) {\n    return /*#__PURE__*/_jsx(Loading, {});\n  }\n\n  const event = processedObject;\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: event.Title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      })]\n    }), /*#__PURE__*/_jsx(EventSummary, {\n      Title: event.Title\n    }), /*#__PURE__*/_jsx(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }), /*#__PURE__*/_jsx(EventContent, {\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: event.Description\n      })\n    }), /*#__PURE__*/_jsx(Answer, {\n      postid: event._id\n    })]\n  });\n}\n\nexport async function getServerSideProps(context) {\n  const {\n    params\n  } = context;\n  const {\n    specificid\n  } = params;\n  const postData = await getPostDataById(specificid);\n  const session = await getSession({\n    req: context.req\n  });\n\n  if (!session) {\n    return {\n      redirect: {\n        destination: \"/auth\",\n        permanent: false\n      }\n    };\n  }\n\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(postData))\n    }\n  };\n} // export async function getServerSideProps(context) {\n//   const session = await getSession({ req: context.req });\n//   if (!session) {\n//     return {\n//       redirect: {\n//         destination: \"/auth\",\n//         permanent: false,\n//       },\n//     };\n//   }\n//   return {\n//     props: { session },\n//   };\n// }\n\nexport default specificid;","map":null,"metadata":{},"sourceType":"module"}