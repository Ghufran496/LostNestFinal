{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\answers\\\\answer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport AnswerList from \"./answer-list\";\nimport classes from \"./answer.module.css\";\n\nfunction Answer(props) {\n  _s();\n\n  var postid = props.postid; //console.log(postid);\n\n  var _useState = useState(false),\n      showResponse = _useState[0],\n      setShowResponse = _useState[1];\n\n  var _useState2 = useState(false),\n      showLoadingContent = _useState2[0],\n      setLoadingContent = _useState2[1];\n\n  var _useState3 = useState([]),\n      response = _useState3[0],\n      setresponse = _useState3[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _response, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setLoadingContent(true);\n\n                if (!showResponse) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.prev = 2;\n                _context.next = 5;\n                return fetch(\"/api/answers/\" + postid);\n\n              case 5:\n                _response = _context.sent;\n                _context.next = 8;\n                return _response.json();\n\n              case 8:\n                data = _context.sent;\n                setresponse(data.responses);\n                setLoadingContent(false);\n                _context.next = 17;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(\"Error fetching data:\", _context.t0); // Handle errors as needed\n\n                setLoadingContent(false);\n\n              case 17:\n                setLoadingContent(false);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, [showResponse, postid, setresponse, setLoadingContent]); // useEffect(() => {\n  //   //setLoadingContent(true);\n  //   if (showResponse) {\n  //     fetch(\"/api/answers/\" + postid)\n  //       .then((response) => response.json())\n  //       .then((data) => setresponse(data.responses));\n  //   }\n  //   setLoadingContent(false);\n  // }, [showResponse, setLoadingContent]);\n\n  function toggleResponseHandler() {\n    setShowResponse(function (prevStatus) {\n      return !prevStatus;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.responses,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleResponseHandler,\n        className: classes.button52,\n        children: [showResponse ? \"Hide\" : \"Show\", \" Responses\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), showLoadingContent && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: \"5rem\"\n      },\n      children: \"No responses yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), showResponse && /*#__PURE__*/_jsxDEV(AnswerList, {\n      ansitems: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Answer, \"BbOgmyP67gNN0QdHBhtOnSCD/0w=\");\n\n_c = Answer;\nexport default Answer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/answers/answer.js"],"names":["useEffect","useState","AnswerList","classes","Answer","props","postid","showResponse","setShowResponse","showLoadingContent","setLoadingContent","response","setresponse","fetchData","fetch","json","data","responses","console","error","toggleResponseHandler","prevStatus","btndiv","button52","marginBottom"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AAAA,MACbC,MADa,GACFD,KADE,CACbC,MADa,EAErB;;AAFqB,kBAGmBL,QAAQ,CAAC,KAAD,CAH3B;AAAA,MAGdM,YAHc;AAAA,MAGAC,eAHA;;AAAA,mBAI2BP,QAAQ,CAAC,KAAD,CAJnC;AAAA,MAIdQ,kBAJc;AAAA,MAIMC,iBAJN;;AAAA,mBAKWT,QAAQ,CAAC,EAAD,CALnB;AAAA,MAKdU,QALc;AAAA,MAKJC,WALI;;AAOrBZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,SAAS;AAAA,0EAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBH,gBAAAA,iBAAiB,CAAC,IAAD,CAAjB;;AADgB,qBAGZH,YAHY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAKWO,KAAK,CAAC,kBAAkBR,MAAnB,CALhB;;AAAA;AAKNK,gBAAAA,SALM;AAAA;AAAA,uBAMOA,SAAQ,CAACI,IAAT,EANP;;AAAA;AAMNC,gBAAAA,IANM;AAOZJ,gBAAAA,WAAW,CAACI,IAAI,CAACC,SAAN,CAAX;AACAP,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;AARY;AAAA;;AAAA;AAAA;AAAA;AAUZQ,gBAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,eAVY,CAWZ;;AACAT,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;;AAZY;AAgBhBA,gBAAAA,iBAAiB,CAAC,KAAD,CAAjB;;AAhBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATG,SAAS;AAAA;AAAA;AAAA,OAAf;;AAmBAA,IAAAA,SAAS;AACV,GArBQ,EAqBN,CAACN,YAAD,EAAeD,MAAf,EAAuBM,WAAvB,EAAoCF,iBAApC,CArBM,CAAT,CAPqB,CA8BrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASU,qBAAT,GAAiC;AAC/BZ,IAAAA,eAAe,CAAC,UAACa,UAAD;AAAA,aAAgB,CAACA,UAAjB;AAAA,KAAD,CAAf;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAElB,OAAO,CAACc,SAA5B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEd,OAAO,CAACmB,MAAxB;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,qBAAjB;AAAwC,QAAA,SAAS,EAAEjB,OAAO,CAACoB,QAA3D;AAAA,mBACGhB,YAAY,GAAG,MAAH,GAAY,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAMGE,kBAAkB,iBACjB;AAAG,MAAA,KAAK,EAAE;AAAEe,QAAAA,YAAY,EAAE;AAAhB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EASGjB,YAAY,iBAAI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEI;AAAtB;AAAA;AAAA;AAAA;AAAA,YATnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAzDQP,M;;KAAAA,M;AA2DT,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport AnswerList from \"./answer-list\";\r\nimport classes from \"./answer.module.css\";\r\n\r\nfunction Answer(props) {\r\n  const { postid } = props;\r\n  //console.log(postid);\r\n  const [showResponse, setShowResponse] = useState(false);\r\n  const [showLoadingContent, setLoadingContent] = useState(false);\r\n  const [response, setresponse] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoadingContent(true);\r\n\r\n      if (showResponse) {\r\n        try {\r\n          const response = await fetch(\"/api/answers/\" + postid);\r\n          const data = await response.json();\r\n          setresponse(data.responses);\r\n          setLoadingContent(false);\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error);\r\n          // Handle errors as needed\r\n          setLoadingContent(false);\r\n        }\r\n      }\r\n\r\n      setLoadingContent(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [showResponse, postid, setresponse, setLoadingContent]);\r\n\r\n  // useEffect(() => {\r\n  //   //setLoadingContent(true);\r\n  //   if (showResponse) {\r\n  //     fetch(\"/api/answers/\" + postid)\r\n  //       .then((response) => response.json())\r\n  //       .then((data) => setresponse(data.responses));\r\n  //   }\r\n  //   setLoadingContent(false);\r\n  // }, [showResponse, setLoadingContent]);\r\n\r\n  function toggleResponseHandler() {\r\n    setShowResponse((prevStatus) => !prevStatus);\r\n  }\r\n\r\n  return (\r\n    <section className={classes.responses}>\r\n      <div className={classes.btndiv}>\r\n        <button onClick={toggleResponseHandler} className={classes.button52}>\r\n          {showResponse ? \"Hide\" : \"Show\"} Responses\r\n        </button>\r\n      </div>\r\n      {showLoadingContent && (\r\n        <p style={{ marginBottom: \"5rem\" }}>No responses yet!</p>\r\n      )}\r\n      {showResponse && <AnswerList ansitems={response} />}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n"]},"metadata":{},"sourceType":"module"}