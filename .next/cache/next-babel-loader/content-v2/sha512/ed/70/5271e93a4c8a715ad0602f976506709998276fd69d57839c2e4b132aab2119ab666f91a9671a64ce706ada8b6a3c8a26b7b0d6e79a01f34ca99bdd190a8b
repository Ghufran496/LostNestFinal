{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\n// import React, { useState, useEffect } from \"react\";\n// import Head from \"next/head\";\n// import { Fragment } from \"react\";\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\n// import QuestionForm from \"../../components/overlayForm/QuestionForm\";\n// import classes from \"./itemid.module.css\";\n// const { ObjectId } = require(\"mongodb\");\n// import Loading from \"../../components/UI/Loading\";\n// import { connectToDatabase } from \"../../lib/db\";\n// function ItemDetailPage(props) {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [showQForm, setIsShowQForm] = useState(false);\n//   const { extractedObject } = props;\n//   if (!extractedObject) {\n//     return <Loading />; // Render loading spinner if no data is available\n//   }\n//   useEffect(() => {\n//     setIsLoading(true);\n//     setTimeout(() => {\n//       setIsLoading(false);\n//     }, 2000); // Simulate a loading time of 5 seconds\n//   }, []);\n//   if (isLoading) {\n//     return <Loading />;\n//   }\n//   const event = extractedObject;\n//   const showModeHandler = () => {\n//     setIsShowQForm(true);\n//   };\n//   const hideModeHandler = () => {\n//     setIsShowQForm(false);\n//   };\n//   return (\n//     <Fragment>\n//       <Head>\n//         <title>{event.Title}</title>\n//         <meta name=\"description\" content={event.Description} />\n//       </Head>\n//       <EventSummary Title={event.Title} />\n//       <EventLogistics\n//         Date={event.Date}\n//         ReducedImg={event.ReducedImg}\n//         Title={event.Title}\n//         Type={event.Type}\n//         Category={event.Category}\n//       />\n//       <EventContent>\n//         <p>{event.Description}</p>\n//       </EventContent>\n//       <div className={classes.btndiv}>\n//         <button\n//           onClick={showModeHandler}\n//           className={classes.button52}\n//           role=\"button\"\n//         >\n//           Claim this {event.Title}\n//         </button>\n//       </div>\n//       {showQForm && <QuestionForm onclose={hideModeHandler} data={event} />}\n//     </Fragment>\n//   );\n// }\n// export async function getServerSideProps(context) {\n//   const postId = context.params.itemid;\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\n//   return {\n//     props: {\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\n//     },\n//   };\n// }\n// export default ItemDetailPage;\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\nimport classes from \"./itemid.module.css\";\nimport { getPostDataById } from \"../../lib/db\";\nimport Loading from \"../../components/UI/Loading\";\n\nfunction ItemDetailPage(props) {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: showQForm,\n    1: setIsShowQForm\n  } = useState(false);\n  const {\n    0: processedObject,\n    1: setProcessedObject\n  } = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        extractedObject\n      } = props;\n\n      if (typeof extractedObject === \"object\") {\n        setProcessedObject(extractedObject);\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n    };\n\n    fetchData();\n  }, [props.extractedObject]);\n\n  if (isLoading || !processedObject) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 12\n    }, this);\n  }\n\n  const event = processedObject;\n\n  const showModeHandler = () => {\n    setIsShowQForm(true);\n  };\n\n  const hideModeHandler = () => {\n    setIsShowQForm(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: event.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventSummary, {\n      Title: event.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      Date: event.Date,\n      ReducedImg: event.ReducedImg,\n      Title: event.Title,\n      Type: event.Type,\n      Category: event.Category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showModeHandler,\n        className: classes.button52,\n        role: \"button\",\n        children: [\"Claim this \", event.Title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), showQForm && /*#__PURE__*/_jsxDEV(QuestionForm, {\n      onclose: hideModeHandler,\n      data: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.itemid;\n  const postData = await getPostDataById(postId); //console.log(postData);\n\n  return {\n    props: {\n      extractedObject: JSON.parse(JSON.stringify(postData))\n    }\n  };\n}\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useState","useEffect","Head","Fragment","EventSummary","EventLogistics","EventContent","QuestionForm","classes","getPostDataById","Loading","ItemDetailPage","props","isLoading","setIsLoading","showQForm","setIsShowQForm","processedObject","setProcessedObject","fetchData","extractedObject","event","showModeHandler","hideModeHandler","Title","Description","Date","ReducedImg","Type","Category","btndiv","button52","getServerSideProps","context","postId","params","itemid","postData","JSON","parse","stringify"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,OAAOC,OAAP,MAAoB,6BAApB;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACe,SAAD;AAAA,OAAYC;AAAZ,MAA8BhB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,eAAD;AAAA,OAAkBC;AAAlB,MAAwClB,QAAQ,CAAC,IAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,SAAS,GAAG,YAAY;AAC5B,YAAM;AAAEC,QAAAA;AAAF,UAAsBR,KAA5B;;AAEA,UAAI,OAAOQ,eAAP,KAA2B,QAA/B,EAAyC;AACvCF,QAAAA,kBAAkB,CAACE,eAAD,CAAlB;AACAN,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAHD,MAGO;AACLA,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,KATD;;AAWAK,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACP,KAAK,CAACQ,eAAP,CAbM,CAAT;;AAeA,MAAIP,SAAS,IAAI,CAACI,eAAlB,EAAmC;AACjC,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMI,KAAK,GAAGJ,eAAd;;AAEA,QAAMK,eAAe,GAAG,MAAM;AAC5BN,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAGA,QAAMO,eAAe,GAAG,MAAM;AAC5BP,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQK,KAAK,CAACG;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEH,KAAK,CAACI;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEJ,KAAK,CAACG;AAA3B;AAAA;AAAA;AAAA;AAAA,YALF,eAOE,QAAC,cAAD;AACE,MAAA,IAAI,EAAEH,KAAK,CAACK,IADd;AAEE,MAAA,UAAU,EAAEL,KAAK,CAACM,UAFpB;AAGE,MAAA,KAAK,EAAEN,KAAK,CAACG,KAHf;AAIE,MAAA,IAAI,EAAEH,KAAK,CAACO,IAJd;AAKE,MAAA,QAAQ,EAAEP,KAAK,CAACQ;AALlB;AAAA;AAAA;AAAA;AAAA,YAPF,eAeE,QAAC,YAAD;AAAA,6BACE;AAAA,kBAAIR,KAAK,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF,eAkBE;AAAK,MAAA,SAAS,EAAEjB,OAAO,CAACsB,MAAxB;AAAA,6BACE;AACE,QAAA,OAAO,EAAER,eADX;AAEE,QAAA,SAAS,EAAEd,OAAO,CAACuB,QAFrB;AAGE,QAAA,IAAI,EAAC,QAHP;AAAA,kCAKcV,KAAK,CAACG,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF,EA4BGT,SAAS,iBAAI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEQ,eAAvB;AAAwC,MAAA,IAAI,EAAEF;AAA9C;AAAA;AAAA;AAAA;AAAA,YA5BhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;AAED,OAAO,eAAeW,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeC,MAA9B;AACA,QAAMC,QAAQ,GAAG,MAAM5B,eAAe,CAACyB,MAAD,CAAtC,CAFgD,CAGhD;;AAEA,SAAO;AACLtB,IAAAA,KAAK,EAAE;AACLQ,MAAAA,eAAe,EAAEkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,QAAf,CAAX;AADZ;AADF,GAAP;AAKD;AAED,eAAe1B,cAAf","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Head from \"next/head\";\r\n// import { Fragment } from \"react\";\r\n// import EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\n// import EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\n// import EventContent from \"../../components/feed/FeedDetails/event-content\";\r\n// import QuestionForm from \"../../components/overlayForm/QuestionForm\";\r\n// import classes from \"./itemid.module.css\";\r\n\r\n// const { ObjectId } = require(\"mongodb\");\r\n// import Loading from \"../../components/UI/Loading\";\r\n// import { connectToDatabase } from \"../../lib/db\";\r\n\r\n// function ItemDetailPage(props) {\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [showQForm, setIsShowQForm] = useState(false);\r\n\r\n//   const { extractedObject } = props;\r\n\r\n//   if (!extractedObject) {\r\n//     return <Loading />; // Render loading spinner if no data is available\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     setIsLoading(true);\r\n//     setTimeout(() => {\r\n//       setIsLoading(false);\r\n//     }, 2000); // Simulate a loading time of 5 seconds\r\n//   }, []);\r\n\r\n//   if (isLoading) {\r\n//     return <Loading />;\r\n//   }\r\n//   const event = extractedObject;\r\n\r\n//   const showModeHandler = () => {\r\n//     setIsShowQForm(true);\r\n//   };\r\n//   const hideModeHandler = () => {\r\n//     setIsShowQForm(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <Head>\r\n//         <title>{event.Title}</title>\r\n//         <meta name=\"description\" content={event.Description} />\r\n//       </Head>\r\n//       <EventSummary Title={event.Title} />\r\n\r\n//       <EventLogistics\r\n//         Date={event.Date}\r\n//         ReducedImg={event.ReducedImg}\r\n//         Title={event.Title}\r\n//         Type={event.Type}\r\n//         Category={event.Category}\r\n//       />\r\n\r\n//       <EventContent>\r\n//         <p>{event.Description}</p>\r\n//       </EventContent>\r\n//       <div className={classes.btndiv}>\r\n//         <button\r\n//           onClick={showModeHandler}\r\n//           className={classes.button52}\r\n//           role=\"button\"\r\n//         >\r\n//           Claim this {event.Title}\r\n//         </button>\r\n//       </div>\r\n\r\n//       {showQForm && <QuestionForm onclose={hideModeHandler} data={event} />}\r\n//     </Fragment>\r\n//   );\r\n// }\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.itemid;\r\n//   const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   const extractedObject = data.find((item) => item._id.equals(objectId));\r\n\r\n//   return {\r\n//     props: {\r\n//       extractedObject: JSON.parse(JSON.stringify(extractedObject)),\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export default ItemDetailPage;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\nimport EventSummary from \"../../components/feed/FeedDetails/event-summary\";\r\nimport EventLogistics from \"../../components/feed/FeedDetails/event-logistics\";\r\nimport EventContent from \"../../components/feed/FeedDetails/event-content\";\r\nimport QuestionForm from \"../../components/overlayForm/QuestionForm\";\r\nimport classes from \"./itemid.module.css\";\r\nimport { getPostDataById } from \"../../lib/db\";\r\n\r\nimport Loading from \"../../components/UI/Loading\";\r\n\r\nfunction ItemDetailPage(props) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showQForm, setIsShowQForm] = useState(false);\r\n  const [processedObject, setProcessedObject] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { extractedObject } = props;\r\n\r\n      if (typeof extractedObject === \"object\") {\r\n        setProcessedObject(extractedObject);\r\n        setIsLoading(false);\r\n      } else {\r\n        setIsLoading(true);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [props.extractedObject]);\r\n\r\n  if (isLoading || !processedObject) {\r\n    return <Loading />;\r\n  }\r\n\r\n  const event = processedObject;\r\n\r\n  const showModeHandler = () => {\r\n    setIsShowQForm(true);\r\n  };\r\n  const hideModeHandler = () => {\r\n    setIsShowQForm(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{event.Title}</title>\r\n        <meta name=\"description\" content={event.Description} />\r\n      </Head>\r\n      <EventSummary Title={event.Title} />\r\n\r\n      <EventLogistics\r\n        Date={event.Date}\r\n        ReducedImg={event.ReducedImg}\r\n        Title={event.Title}\r\n        Type={event.Type}\r\n        Category={event.Category}\r\n      />\r\n\r\n      <EventContent>\r\n        <p>{event.Description}</p>\r\n      </EventContent>\r\n      <div className={classes.btndiv}>\r\n        <button\r\n          onClick={showModeHandler}\r\n          className={classes.button52}\r\n          role=\"button\"\r\n        >\r\n          Claim this {event.Title}\r\n        </button>\r\n      </div>\r\n\r\n      {showQForm && <QuestionForm onclose={hideModeHandler} data={event} />}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const postData = await getPostDataById(postId);\r\n  //console.log(postData);\r\n\r\n  return {\r\n    props: {\r\n      extractedObject: JSON.parse(JSON.stringify(postData)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}