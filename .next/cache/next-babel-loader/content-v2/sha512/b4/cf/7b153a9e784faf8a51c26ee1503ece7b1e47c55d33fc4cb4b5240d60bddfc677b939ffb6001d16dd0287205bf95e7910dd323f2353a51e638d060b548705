{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\auth\\\\auth-form.js\";\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\nimport ErrorComp from \"../UI/ErrorComp\";\n\nasync function createUser(email, password, enteredName) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password,\n      enteredName\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const {\n    0: toggleForms,\n    1: setToggleForms\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n  const {\n    0: isErrorData,\n    1: setIsErrorData\n  } = useState(\"Sorry but the page you are looking for does not exist.\");\n\n  const toggleForm = () => {\n    setToggleForms(prev => !prev);\n  };\n\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n  const {\n    0: isLogin,\n    1: setIsLogin\n  } = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin(prevState => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value; // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword\n      });\n\n      if (!result.error) {\n        router.replace(\"/dashboard\");\n        setIsLoading(false);\n      }\n\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value; // optional: Add validation\n\n    try {\n      const result = await createUser(enteredEmail, enteredPassword, enteredName);\n      setIsLoading(false); // console.log(result);\n      //console.log(result);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData,\n      moveto: \"/auth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.col1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.formbox,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form,\n          children: [!toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.loginform,\n            onSubmit: submitHandler,\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: classes.mainheading,\n                children: \"Login Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: loginEmailInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: loginPasswordInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"LOGIN\",\n              onClick: switchAuthModeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.message,\n              children: [\"Not Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), toggleForms && /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.registerform,\n            onSubmit: submitHandlerRegister,\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: classes.mainheading,\n                children: \"Register Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"user name\",\n              ref: registerNameInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"email-id\",\n              ref: registerEmailInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"password\",\n              ref: registerPasswordInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"REGISTER\",\n              onClick: switchAuthModeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.message,\n              children: [\"Already Registered\\xA0?\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: toggleForm,\n                className: classes.link,\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\nexport default AuthForm;\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/auth/auth-form.js"],"names":["useState","useRef","signIn","useRouter","Loading","Button","classes","Error","Fragment","Footer","ErrorComp","createUser","email","password","enteredName","response","fetch","method","body","JSON","stringify","headers","data","json","ok","message","AuthForm","toggleForms","setToggleForms","isLoading","setIsLoading","isError","setIsError","isErrorData","setIsErrorData","toggleForm","prev","loginEmailInputRef","loginPasswordInputRef","registerEmailInputRef","registerPasswordInputRef","registerNameInputRef","isLogin","setIsLogin","router","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","result","redirect","error","replace","submitHandlerRegister","console","log","col1","formbox","form","loginform","mainheading","link","registerform"],"mappings":"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":["import { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\nimport { Fragment } from \"react\";\nimport Footer from \"../Global/Footer\";\nimport ErrorComp from \"../UI/ErrorComp\";\n\nasync function createUser(email, password, enteredName) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password, enteredName }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        router.replace(\"/dashboard\");\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <ErrorComp errorData={isErrorData} moveto=\"/auth\" />;\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.col1}>\n        <div className={classes.formbox}>\n          <div className={classes.form}>\n            {!toggleForms && (\n              <form className={classes.loginform} onSubmit={submitHandler}>\n                <center>\n                  <h1 className={classes.mainheading}>Login Form</h1>\n                </center>\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={loginEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={loginPasswordInputRef}\n                />\n\n                <Button\n                  content=\"LOGIN\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Not Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Register\n                  </a>\n                </p>\n              </form>\n            )}\n            {toggleForms && (\n              <form\n                className={classes.registerform}\n                onSubmit={submitHandlerRegister}\n              >\n                <center>\n                  <h1 className={classes.mainheading}>Register Form</h1>\n                </center>\n                <input\n                  type=\"text\"\n                  placeholder=\"user name\"\n                  ref={registerNameInputRef}\n                />\n                <input\n                  type=\"email\"\n                  placeholder=\"email-id\"\n                  ref={registerEmailInputRef}\n                />\n                <input\n                  type=\"password\"\n                  placeholder=\"password\"\n                  ref={registerPasswordInputRef}\n                />\n\n                <Button\n                  content=\"REGISTER\"\n                  onClick={switchAuthModeHandler}\n                ></Button>\n\n                <p className={classes.message}>\n                  Already Registered&nbsp;?&nbsp;\n                  <a onClick={toggleForm} className={classes.link}>\n                    Login\n                  </a>\n                </p>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default AuthForm;\n\n/*\nimport { useState, useRef } from \"react\";\nimport { signIn } from \"next-auth/client\";\nimport { useRouter } from \"next/router\";\nimport Loading from \"../UI/Loading\";\nimport Button from \"../UI/Button\";\nimport classes from \"./auth-form.module.css\";\nimport Error from \"../UI/Error\";\n\nasync function createUser(email, password) {\n  const response = await fetch(\"/api/auth/signup\", {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Something went wrong!\");\n  }\n\n  return data;\n}\n\nfunction AuthForm() {\n  const [toggleForms, setToggleForms] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isErrorData, setIsErrorData] = useState(\n    \"Sorry but the page you are looking for does not exist.\"\n  );\n\n  const toggleForm = () => {\n    setToggleForms((prev) => !prev);\n  };\n  const loginEmailInputRef = useRef();\n  const loginPasswordInputRef = useRef();\n\n  const registerEmailInputRef = useRef();\n  const registerPasswordInputRef = useRef();\n  const registerNameInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const router = useRouter();\n\n  function switchAuthModeHandler() {\n    setIsLogin((prevState) => !prevState);\n  }\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const enteredEmail = loginEmailInputRef.current.value;\n    const enteredPassword = loginPasswordInputRef.current.value;\n\n    // optional: Add validation\n\n    if (isLogin) {\n      const result = await signIn(\"credentials\", {\n        redirect: false,\n        email: enteredEmail,\n        password: enteredPassword,\n      });\n\n      if (!result.error) {\n        // set some auth state\n        router.replace(\"/dashboard\");\n        // console.log(result + \"Login success\");\n        console.log(result);\n        setIsLoading(false);\n      }\n      if (result.error) {\n        setIsLoading(false);\n        setIsErrorData(result.error);\n        setIsError(true);\n        //console.log(result.error);\n        // errorContent(result.error);\n      }\n    }\n  }\n\n  async function submitHandlerRegister(event) {\n    setIsLoading(true);\n    event.preventDefault();\n\n    const enteredEmail = registerEmailInputRef.current.value;\n    const enteredPassword = registerPasswordInputRef.current.value;\n    const enteredName = registerNameInputRef.current.value;\n    // optional: Add validation\n\n    try {\n      const result = await createUser(\n        enteredEmail,\n        enteredPassword,\n        enteredName\n      );\n      setIsLoading(false);\n      // console.log(result);\n      //console.log(result);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsLoading(false);\n      setIsError(true);\n      setIsErrorData(\"account already exists\");\n    }\n  }\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  if (isError) {\n    return <Error errorData={isErrorData} />;\n  }\n\n  return (\n    <div className={classes.col1}>\n      <div className={classes.formbox}>\n        <div className={classes.form}>\n          {!toggleForms && (\n            <form className={classes.loginform} onSubmit={submitHandler}>\n              <center>\n                <h1 className={classes.mainheading}>Login Form</h1>\n              </center>\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={loginEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={loginPasswordInputRef}\n              />\n\n              <Button content=\"LOGIN\" onClick={switchAuthModeHandler}></Button>\n\n              <p className={classes.message}>\n                Not Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Register\n                </a>\n              </p>\n            </form>\n          )}\n          {toggleForms && (\n            <form\n              className={classes.registerform}\n              onSubmit={submitHandlerRegister}\n            >\n              <center>\n                <h1 className={classes.mainheading}>Register Form</h1>\n              </center>\n              <input\n                type=\"text\"\n                placeholder=\"user name\"\n                ref={registerNameInputRef}\n              />\n              <input\n                type=\"email\"\n                placeholder=\"email-id\"\n                ref={registerEmailInputRef}\n              />\n              <input\n                type=\"password\"\n                placeholder=\"password\"\n                ref={registerPasswordInputRef}\n              />\n\n              <Button\n                content=\"REGISTER\"\n                onClick={switchAuthModeHandler}\n              ></Button>\n\n              <p className={classes.message}>\n                Already Registered&nbsp;?&nbsp;\n                <a onClick={toggleForm} className={classes.link}>\n                  Login\n                </a>\n              </p>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthForm;\n*/\n"]},"metadata":{},"sourceType":"module"}