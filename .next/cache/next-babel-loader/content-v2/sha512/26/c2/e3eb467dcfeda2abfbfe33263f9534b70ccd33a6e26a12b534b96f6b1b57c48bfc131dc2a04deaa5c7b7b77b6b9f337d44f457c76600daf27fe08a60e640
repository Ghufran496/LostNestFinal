{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\answers\\\\answer.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport AnswerList from \"./answer-list\";\nimport classes from \"./answer.module.css\";\nimport Button from \"../UI/Button\"; //http://localhost:3000/mylistings/654bc2921efc6c1070461e13\n\nfunction Answer(props) {\n  _s();\n\n  var postid = props.postid;\n  console.log(postid);\n\n  var _useState = useState(false),\n      showResponse = _useState[0],\n      setShowResponse = _useState[1];\n\n  var _useState2 = useState(false),\n      showLoadingContent = _useState2[0],\n      setLoadingContent = _useState2[1];\n\n  var _useState3 = useState([]),\n      response = _useState3[0],\n      setresponse = _useState3[1];\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _response, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!showResponse) {\n                  _context.next = 18;\n                  break;\n                }\n\n                setLoadingContent(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return fetch(\"/api/answers/\" + postid);\n\n              case 5:\n                _response = _context.sent;\n                _context.next = 8;\n                return _response.json();\n\n              case 8:\n                data = _context.sent;\n                setresponse(data.responses);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                console.error(\"Error fetching data:\", _context.t0); // Handle errors as needed\n\n              case 15:\n                _context.prev = 15;\n                setLoadingContent(false);\n                return _context.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12, 15, 18]]);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // Only fetch data if showResponse is true and responses are not already available\n\n\n    if (showResponse && response.length === 0) {\n      fetchData();\n    }\n  }, [showResponse]);\n\n  function toggleResponseHandler() {\n    setShowResponse(function (prevStatus) {\n      return !prevStatus;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.responses,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.btndiv,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: toggleResponseHandler,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), showLoadingContent && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        fontSize: \"1.5rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"No responses yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), response.length === 0 && !showLoadingContent && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginBottom: \"1rem\",\n        fontSize: \"1.5rem\",\n        textTransform: \"capitalize\"\n      },\n      children: \"Noone has responded yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), showResponse && /*#__PURE__*/_jsxDEV(AnswerList, {\n      ansitems: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Answer, \"BbOgmyP67gNN0QdHBhtOnSCD/0w=\");\n\n_c = Answer;\nexport default Answer; // useEffect(() => {\n//   const fetchData = async () => {\n//     if (showResponse) {\n//       setLoadingContent(true);\n//       try {\n//         const response = await fetch(\"/api/answers/\" + postid);\n//         const data = await response.json();\n//         setresponse(data.responses);\n//         if (data.responses) {\n//           setLoadingContent(false);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         // Handle errors as needed\n//         setLoadingContent(false);\n//       }\n//     }\n//     setLoadingContent(false);\n//   };\n//   fetchData();\n//   //setLoadingContent(false);\n// }, [showResponse, postid, setresponse, setLoadingContent]);\n// useEffect(() => {\n//   //setLoadingContent(true);\n//   if (showResponse) {\n//     fetch(\"/api/answers/\" + postid)\n//       .then((response) => response.json())\n//       .then((data) => setresponse(data.responses));\n//   }\n//   setLoadingContent(false);\n// }, [showResponse, setLoadingContent]);\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/answers/answer.js"],"names":["useEffect","useState","AnswerList","classes","Button","Answer","props","postid","console","log","showResponse","setShowResponse","showLoadingContent","setLoadingContent","response","setresponse","fetchData","fetch","json","data","responses","error","length","toggleResponseHandler","prevStatus","btndiv","marginBottom","fontSize","textTransform"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport AnswerList from \"./answer-list\";\r\nimport classes from \"./answer.module.css\";\r\nimport Button from \"../UI/Button\";\r\n//http://localhost:3000/mylistings/654bc2921efc6c1070461e13\r\nfunction Answer(props) {\r\n  const { postid } = props;\r\n  console.log(postid);\r\n  const [showResponse, setShowResponse] = useState(false);\r\n  const [showLoadingContent, setLoadingContent] = useState(false);\r\n  const [response, setresponse] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (showResponse) {\r\n        setLoadingContent(true);\r\n        try {\r\n          const response = await fetch(\"/api/answers/\" + postid);\r\n          const data = await response.json();\r\n          setresponse(data.responses);\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error);\r\n          // Handle errors as needed\r\n        } finally {\r\n          setLoadingContent(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Only fetch data if showResponse is true and responses are not already available\r\n    if (showResponse && response.length === 0) {\r\n      fetchData();\r\n    }\r\n  }, [showResponse]);\r\n\r\n  function toggleResponseHandler() {\r\n    setShowResponse((prevStatus) => !prevStatus);\r\n  }\r\n\r\n  return (\r\n    <section className={classes.responses}>\r\n      <div className={classes.btndiv}>\r\n        {/* <button onClick={toggleResponseHandler} className={classes.button52}>\r\n          {showResponse ? \"Hide\" : \"Show\"} Responses\r\n        </button> */}\r\n        <a onClick={toggleResponseHandler}>\r\n          <Button content=\"Login\"></Button>\r\n        </a>\r\n      </div>\r\n      {showLoadingContent && (\r\n        <p\r\n          style={{\r\n            marginBottom: \"1rem\",\r\n\r\n            fontSize: \"1.5rem\",\r\n            textTransform: \"capitalize\",\r\n          }}\r\n        >\r\n          No responses yet!\r\n        </p>\r\n      )}\r\n      {response.length === 0 && !showLoadingContent && (\r\n        <p\r\n          style={{\r\n            marginBottom: \"1rem\",\r\n\r\n            fontSize: \"1.5rem\",\r\n            textTransform: \"capitalize\",\r\n          }}\r\n        >\r\n          Noone has responded yet!\r\n        </p>\r\n      )}\r\n      {showResponse && <AnswerList ansitems={response} />}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n\r\n// useEffect(() => {\r\n//   const fetchData = async () => {\r\n//     if (showResponse) {\r\n//       setLoadingContent(true);\r\n//       try {\r\n//         const response = await fetch(\"/api/answers/\" + postid);\r\n//         const data = await response.json();\r\n//         setresponse(data.responses);\r\n//         if (data.responses) {\r\n//           setLoadingContent(false);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching data:\", error);\r\n//         // Handle errors as needed\r\n//         setLoadingContent(false);\r\n//       }\r\n//     }\r\n\r\n//     setLoadingContent(false);\r\n//   };\r\n\r\n//   fetchData();\r\n//   //setLoadingContent(false);\r\n// }, [showResponse, postid, setresponse, setLoadingContent]);\r\n\r\n// useEffect(() => {\r\n//   //setLoadingContent(true);\r\n//   if (showResponse) {\r\n//     fetch(\"/api/answers/\" + postid)\r\n//       .then((response) => response.json())\r\n//       .then((data) => setresponse(data.responses));\r\n//   }\r\n//   setLoadingContent(false);\r\n// }, [showResponse, setLoadingContent]);\r\n"]},"metadata":{},"sourceType":"module"}