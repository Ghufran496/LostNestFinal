{"ast":null,"code":"//https://www.youtube.com/watch?v=-qQjyxbla-k\n//--------https://www.youtube.com/watch?v=t2LvPXHLrek\nconst nodemailer = require(\"nodemailer\"); // import nodemailer from \"nodemailer\";\n\n\nimport { fetchallemails } from \"../../../lib/db\";\nimport { getSession } from \"next-auth/client\";\nexport default async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    return res.status(405).json({\n      error: \"Method Not Allowed\"\n    });\n  }\n\n  const {\n    subject,\n    message\n  } = req.body;\n  const session = await getSession({\n    req: req\n  });\n  const emailsender = session.user.email;\n  const transporter = nodemailer.createTransport({\n    service: \"gmail\",\n    auth: {\n      user: \"gcch1122@gmail.com\",\n      pass: \"1a08b1992c\"\n    }\n  });\n\n  if (!subject || !message) {\n    return res.status(400).json({\n      error: \"Missing required parameters\"\n    });\n  } //const to = await fetchallemails();\n\n\n  const to = (await fetchallemails()).map(user => user.email);\n  let mailOptions = {\n    from: emailsender,\n    to: to,\n    subject: subject,\n    text: message\n  };\n\n  try {\n    const result = await transporter.sendMail(mailOptions);\n    res.status(200).json({\n      success: true\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: \"Internal Server Error\"\n    });\n  }\n}\n/*const sgMail = require(\"@sendgrid/mail\");\r\nconst nodemailer = require(\"nodemailer\");\r\nimport nodemailer from \"nodemailer\";\r\n\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"gcch1122@gmail.com\",\r\n      pass: \"1a08b1992c\",\r\n    },\r\n  });\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  const apikey =\r\n    \"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\";\r\n\r\n  sgMail.setApiKey(apikey);\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  const msg = {\r\n    to, // Ensure to is an array\r\n    from: emailsender, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  try {\r\n    await sgMail.send(msg);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/\n\n/*\r\n\r\n\r\n// api/sendEmail.js\r\nrequire(\"dotenv\").config();\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nconst { SG_API_KEY, FROM_EMAIL, TO_EMAIL } = process.env;\r\n//import { fetchallemails } from \"../../../lib/db\";\r\n//import { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  //const session = await getSession({ req: req });\r\n\r\n  //const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //   const apikey =\r\n  //     \"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\";\r\n\r\n  sgMail.setApiKey(SG_API_KEY);\r\n\r\n  //const to = await fetchallemails();\r\n  //const to = (await fetchallemails()).map((user) => user.email);\r\n  console.log(SG_API_KEY);\r\n  const msg = {\r\n    to: FROM_EMAIL, // Ensure to is an array\r\n    from: FROM_EMAIL, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  console.log(msg);\r\n\r\n  try {\r\n    const reslt = await sgMail.send(msg);\r\n    console.log(reslt + \"send it\");\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/api/email/sendEmail.js"],"names":["nodemailer","require","fetchallemails","getSession","handler","req","res","method","status","json","error","subject","message","body","session","emailsender","user","email","transporter","createTransport","service","auth","pass","to","map","mailOptions","from","text","result","sendMail","success","console"],"mappings":"AAAA;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B,C,CACA;;;AAEA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBP,GAAG,CAACQ,IAAjC;AACA,QAAMC,OAAO,GAAG,MAAMX,UAAU,CAAC;AAAEE,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;AAEA,QAAMU,WAAW,GAAGD,OAAO,CAACE,IAAR,CAAaC,KAAjC;AAEA,QAAMC,WAAW,GAAGlB,UAAU,CAACmB,eAAX,CAA2B;AAC7CC,IAAAA,OAAO,EAAE,OADoC;AAE7CC,IAAAA,IAAI,EAAE;AACJL,MAAAA,IAAI,EAAE,oBADF;AAEJM,MAAAA,IAAI,EAAE;AAFF;AAFuC,GAA3B,CAApB;;AAQA,MAAI,CAACX,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACxB,WAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD,GApB6C,CAsB9C;;;AACA,QAAMa,EAAE,GAAG,CAAC,MAAMrB,cAAc,EAArB,EAAyBsB,GAAzB,CAA8BR,IAAD,IAAUA,IAAI,CAACC,KAA5C,CAAX;AAEA,MAAIQ,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAEX,WADU;AAEhBQ,IAAAA,EAAE,EAAEA,EAFY;AAGhBZ,IAAAA,OAAO,EAAEA,OAHO;AAIhBgB,IAAAA,IAAI,EAAEf;AAJU,GAAlB;;AAMA,MAAI;AACF,UAAMgB,MAAM,GAAG,MAAMV,WAAW,CAACW,QAAZ,CAAqBJ,WAArB,CAArB;AACAnB,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEqB,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD,GAHD,CAGE,OAAOpB,KAAP,EAAc;AACdqB,IAAAA,OAAO,CAACrB,KAAR,CAAcA,KAAd;AACAJ,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArsourcesContent":["//https://www.youtube.com/watch?v=-qQjyxbla-k\r\n//--------https://www.youtube.com/watch?v=t2LvPXHLrek\r\n\r\nconst nodemailer = require(\"nodemailer\");\r\n// import nodemailer from \"nodemailer\";\r\n\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"gcch1122@gmail.com\",\r\n      pass: \"1a08b1992c\",\r\n    },\r\n  });\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  let mailOptions = {\r\n    from: emailsender,\r\n    to: to,\r\n    subject: subject,\r\n    text: message,\r\n  };\r\n  try {\r\n    const result = await transporter.sendMail(mailOptions);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n/*const sgMail = require(\"@sendgrid/mail\");\r\nconst nodemailer = require(\"nodemailer\");\r\nimport nodemailer from \"nodemailer\";\r\n\r\nimport { fetchallemails } from \"../../../lib/db\";\r\nimport { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  const session = await getSession({ req: req });\r\n\r\n  const emailsender = session.user.email;\r\n\r\n  const transporter = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"gcch1122@gmail.com\",\r\n      pass: \"1a08b1992c\",\r\n    },\r\n  });\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  const apikey =\r\n    \"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\";\r\n\r\n  sgMail.setApiKey(apikey);\r\n\r\n  //const to = await fetchallemails();\r\n  const to = (await fetchallemails()).map((user) => user.email);\r\n\r\n  const msg = {\r\n    to, // Ensure to is an array\r\n    from: emailsender, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  try {\r\n    await sgMail.send(msg);\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/\r\n/*\r\n\r\n\r\n// api/sendEmail.js\r\nrequire(\"dotenv\").config();\r\nconst sgMail = require(\"@sendgrid/mail\");\r\nconst { SG_API_KEY, FROM_EMAIL, TO_EMAIL } = process.env;\r\n//import { fetchallemails } from \"../../../lib/db\";\r\n//import { getSession } from \"next-auth/client\";\r\n\r\nexport default async function handler(req, res) {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method Not Allowed\" });\r\n  }\r\n\r\n  const { subject, message } = req.body;\r\n  //const session = await getSession({ req: req });\r\n\r\n  //const emailsender = session.user.email;\r\n\r\n  if (!subject || !message) {\r\n    return res.status(400).json({ error: \"Missing required parameters\" });\r\n  }\r\n\r\n  //   const apikey =\r\n  //     \"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\";\r\n\r\n  sgMail.setApiKey(SG_API_KEY);\r\n\r\n  //const to = await fetchallemails();\r\n  //const to = (await fetchallemails()).map((user) => user.email);\r\n  console.log(SG_API_KEY);\r\n  const msg = {\r\n    to: FROM_EMAIL, // Ensure to is an array\r\n    from: FROM_EMAIL, // Replace with your verified SendGrid email\r\n    subject,\r\n    text: message,\r\n  };\r\n\r\n  console.log(msg);\r\n\r\n  try {\r\n    const reslt = await sgMail.send(msg);\r\n    console.log(reslt + \"send it\");\r\n    res.status(200).json({ success: true });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: \"Internal Server Error\" });\r\n  }\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}