{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\pages\\\\dashboard\\\\[itemid].js\";\nimport React, { useEffect } from \"react\"; //import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\n//import { connectToDatabase } from \"../../lib/db\";\n\nfunction ItemDetailPage(props) {\n  // const event = props.post;\n  //console.log(event);\n  // console.log(event.Title);\n  // console.log(event[0].Title);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"I am details page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n}\n\nasync function connectToDatabase() {\n  const client = await MongoClient.connect(\"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true // Pass the useUnifiedTopology option here\n\n  });\n  return client;\n}\n\nexport async function getServerSideProps(context) {\n  const postId = context.params.itemid;\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\n  const extractedObject = data.find(item => item._id.equals(objectId)); // Use .equals to compare ObjectId\n\n  return {\n    props: {\n      extractedObject\n    }\n  };\n} // export async function getServerSideProps(context) {\n//   const postId = context.params.itemid;\n//   const client = await connectToDatabase();\n//   const db = client.db();\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\n//   const extractedObject = data.find((item) => item._id === postId);\n//   return {\n//     props: {\n//       extractedObject,\n//     },\n//   };\n// }\n// export async function getStaticPaths() {\n//   const events = await getAllPosts();\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\n//   return {\n//     paths: paths,\n//     fallback: \"blocking\",\n//   };\n// }\n\nexport default ItemDetailPage;","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/pages/dashboard/[itemid].js"],"names":["React","useEffect","ItemDetailPage","props","connectToDatabase","client","MongoClient","connect","useUnifiedTopology","getServerSideProps","context","postId","params","itemid","objectId","ObjectId","db","data","collection","find","toArray","extractedObject","item","_id","equals"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B;AAEA;AACA;AACA;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,eAAeC,iBAAf,GAAmC;AACjC,QAAMC,MAAM,GAAG,MAAMC,WAAW,CAACC,OAAZ,CACnB,mGADmB,EAEnB;AACEC,IAAAA,kBAAkB,EAAE,IADtB,CAC4B;;AAD5B,GAFmB,CAArB;AAOA,SAAOH,MAAP;AACD;;AAED,OAAO,eAAeI,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMC,MAAM,GAAGD,OAAO,CAACE,MAAR,CAAeC,MAA9B;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaJ,MAAb,CAAjB,CAFgD,CAET;;AAEvC,QAAMN,MAAM,GAAG,MAAMD,iBAAiB,EAAtC;AACA,QAAMY,EAAE,GAAGX,MAAM,CAACW,EAAP,EAAX;AAEA,QAAMC,IAAI,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,YAAd,EAA4BC,IAA5B,CAAiC,EAAjC,EAAqCC,OAArC,EAAnB;AAEA,QAAMC,eAAe,GAAGJ,IAAI,CAACE,IAAL,CAAWG,IAAD,IAAUA,IAAI,CAACC,GAAL,CAASC,MAAT,CAAgBV,QAAhB,CAApB,CAAxB,CATgD,CASwB;;AAExE,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLkB,MAAAA;AADK;AADF,GAAP;AAKD,C,CAED;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAenB,cAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n//import { getPostsById, getAllPosts } from \"../../components/helpers/api-util\";\r\n//import { connectToDatabase } from \"../../lib/db\";\r\n\r\nfunction ItemDetailPage(props) {\r\n  // const event = props.post;\r\n\r\n  //console.log(event);\r\n  // console.log(event.Title);\r\n  // console.log(event[0].Title);\r\n  return <div>I am details page</div>;\r\n}\r\nasync function connectToDatabase() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\r\n    {\r\n      useUnifiedTopology: true, // Pass the useUnifiedTopology option here\r\n    }\r\n  );\r\n\r\n  return client;\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const postId = context.params.itemid;\r\n  const objectId = new ObjectId(postId); // Convert postId to ObjectId\r\n\r\n  const client = await connectToDatabase();\r\n  const db = client.db();\r\n\r\n  const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n  const extractedObject = data.find((item) => item._id.equals(objectId)); // Use .equals to compare ObjectId\r\n\r\n  return {\r\n    props: {\r\n      extractedObject,\r\n    },\r\n  };\r\n}\r\n\r\n// export async function getServerSideProps(context) {\r\n//   const postId = context.params.itemid;\r\n\r\n//   const client = await connectToDatabase();\r\n//   const db = client.db();\r\n\r\n//   const data = await db.collection(\"PostedItem\").find({}).toArray();\r\n\r\n//   const extractedObject = data.find((item) => item._id === postId);\r\n\r\n//   return {\r\n//     props: {\r\n//       extractedObject,\r\n//     },\r\n//   };\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n//   const events = await getAllPosts();\r\n//   const paths = events.map((event) => ({ params: { eventId: event.id } }));\r\n//   return {\r\n//     paths: paths,\r\n//     fallback: \"blocking\",\r\n//   };\r\n// }\r\nexport default ItemDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}