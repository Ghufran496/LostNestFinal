{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\MyResponse\\\\AllResponses.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport ErrorComp from \"../UI/ErrorComp\";\nimport Loading from \"../UI/Loading\";\nimport ResponseGrid from \"./ResponseGrid\";\n\nvar AllResponses = function AllResponses() {\n  _s();\n\n  var _useState = useState(\"\"),\n      isData = _useState[0],\n      setIsData = _useState[1];\n\n  var _useState2 = useState(false),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  useEffect(function () {\n    var isMounted = true; // Flag to track if the component is mounted\n\n    setIsLoading(true);\n    fetch(\"/api/answers/sendResponse\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      //console.log(\"data in client\" + data);\n      if (isMounted) {\n        setIsData(data);\n\n        if (data.message) {\n          setIsErrorData(data.message);\n          setIsError(true);\n        }\n\n        setIsLoading(false);\n      }\n    })[\"catch\"](function (error) {\n      if (isMounted) {\n        setIsError(true);\n        setIsErrorData(\"An error occurred while fetching data.\");\n        setIsLoading(false);\n      }\n\n      console.error(\"Fetch error:\", error);\n    }); //Cleanup function\n\n    return function () {\n      isMounted = false; // Set flag to false when component is unmounted\n    };\n  }, []);\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isData.length === 0 && !isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"2rem\",\n        display: \"flex\",\n        marginTop: \"1rem\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: \"No Responses Found...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(ResponseGrid, {\n      data: isData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, _this), isLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AllResponses, \"u9Pdcpvk3j9H2eg7IiQ8vroAKGM=\");\n\n_c = AllResponses;\nexport default AllResponses;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllResponses\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/MyResponse/AllResponses.js"],"names":["React","useEffect","useState","ErrorComp","Loading","ResponseGrid","AllResponses","isData","setIsData","isLoading","setIsLoading","isError","setIsError","isErrorData","setIsErrorData","isMounted","fetch","then","response","json","data","message","error","console","length","fontSize","display","marginTop","justifyContent","alignItems"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AAAA,kBACGJ,QAAQ,CAAC,EAAD,CADX;AAAA,MAClBK,MADkB;AAAA,MACVC,SADU;;AAAA,mBAESN,QAAQ,CAAC,KAAD,CAFjB;AAAA,MAElBO,SAFkB;AAAA,MAEPC,YAFO;;AAAA,mBAGKR,QAAQ,CAAC,KAAD,CAHb;AAAA,MAGlBS,OAHkB;AAAA,MAGTC,UAHS;;AAAA,mBAIaV,QAAQ,CAC5C,wDAD4C,CAJrB;AAAA,MAIlBW,WAJkB;AAAA,MAILC,cAJK;;AAQzBb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,SAAS,GAAG,IAAhB,CADc,CACQ;;AAEtBL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAM,IAAAA,KAAK,CAAC,2BAAD,CAAL,CACGC,IADH,CACQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADR,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;AACd;AACA,UAAIL,SAAJ,EAAe;AACbP,QAAAA,SAAS,CAACY,IAAD,CAAT;;AACA,YAAIA,IAAI,CAACC,OAAT,EAAkB;AAChBP,UAAAA,cAAc,CAACM,IAAI,CAACC,OAAN,CAAd;AACAT,UAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACDF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAZH,WAaS,UAACY,KAAD,EAAW;AAChB,UAAIP,SAAJ,EAAe;AACbH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,cAAc,CAAC,wCAAD,CAAd;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AACDa,MAAAA,OAAO,CAACD,KAAR,CAAc,cAAd,EAA8BA,KAA9B;AACD,KApBH,EALc,CA2Bd;;AACA,WAAO,YAAM;AACXP,MAAAA,SAAS,GAAG,KAAZ,CADW,CACQ;AACpB,KAFD;AAGD,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,MAAIJ,OAAJ,EAAa;AACX,wBAAO,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEE;AAAtB;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;;AAED,sBACE;AAAA,eACGN,MAAM,CAACiB,MAAP,KAAkB,CAAlB,IAAuB,CAACf,SAAxB,gBACC;AACE,MAAA,KAAK,EAAE;AACLgB,QAAAA,QAAQ,EAAE,MADL;AAELC,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,SAAS,EAAE,MAHN;AAILC,QAAAA,cAAc,EAAE,QAJX;AAKLC,QAAAA,UAAU,EAAE;AALP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,gBAaC,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEtB;AAApB;AAAA;AAAA;AAAA;AAAA,aAdJ,EAgBGE,SAAS,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,aAhBhB;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAoBD,CAjED;;GAAMH,Y;;KAAAA,Y;AAmEN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ResponseGrid from \"./ResponseGrid\";\r\n\r\nconst AllResponses = () => {\r\n  const [isData, setIsData] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // Flag to track if the component is mounted\r\n\r\n    setIsLoading(true);\r\n\r\n    fetch(\"/api/answers/sendResponse\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //console.log(\"data in client\" + data);\r\n        if (isMounted) {\r\n          setIsData(data);\r\n          if (data.message) {\r\n            setIsErrorData(data.message);\r\n            setIsError(true);\r\n          }\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (isMounted) {\r\n          setIsError(true);\r\n          setIsErrorData(\"An error occurred while fetching data.\");\r\n          setIsLoading(false);\r\n        }\r\n        console.error(\"Fetch error:\", error);\r\n      });\r\n\r\n    //Cleanup function\r\n    return () => {\r\n      isMounted = false; // Set flag to false when component is unmounted\r\n    };\r\n  }, []);\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isData.length === 0 && !isLoading ? (\r\n        <p\r\n          style={{\r\n            fontSize: \"2rem\",\r\n            display: \"flex\",\r\n            marginTop: \"1rem\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          No Responses Found...\r\n        </p>\r\n      ) : (\r\n        <ResponseGrid data={isData} />\r\n      )}\r\n      {isLoading && <Loading />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllResponses;\r\n"]},"metadata":{},"sourceType":"module"}