{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\store\\\\MongoDBContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// MongoDBContext.js\nimport React, { createContext, useContext } from \"react\";\nimport { MongoClient } from \"mongodb\";\nvar MongoDBContext = /*#__PURE__*/createContext();\nexport function MongoDBProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cachedClient = _React$useState2[0],\n      setCachedClient = _React$useState2[1];\n\n  var connectToDatabase2 = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(cachedClient !== null)) {\n                _context.next = 3;\n                break;\n              }\n\n              console.log(\"return already stored client\");\n              return _context.abrupt(\"return\", cachedClient);\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return MongoClient.connect(\"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\", {\n                useUnifiedTopology: true,\n                useNewUrlParser: true,\n                connectTimeoutMS: 30000\n              });\n\n            case 6:\n              client = _context.sent;\n              setCachedClient(client);\n              console.log(\"return new client\");\n              return _context.abrupt(\"return\", client);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(\"Error connecting to the database:\", _context.t0);\n              throw _context.t0;\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 12]]);\n    }));\n\n    return function connectToDatabase2() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var value = {\n    connectToDatabase2: connectToDatabase2\n  };\n  return /*#__PURE__*/_jsxDEV(MongoDBContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MongoDBProvider, \"fEDcAzI1155Ca4p+rYrCvb/JRaM=\");\n\n_c = MongoDBProvider;\nexport function useMongoDB() {\n  _s2();\n\n  var context = useContext(MongoDBContext);\n\n  if (!context) {\n    throw new Error(\"useMongoDB must be used within a MongoDBProvider\");\n  }\n\n  return context;\n}\n\n_s2(useMongoDB, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MongoDBProvider\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/store/MongoDBContext.js"],"names":["React","createContext","useContext","MongoClient","MongoDBContext","MongoDBProvider","children","useState","cachedClient","setCachedClient","connectToDatabase2","console","log","connect","useUnifiedTopology","useNewUrlParser","connectTimeoutMS","client","error","value","useMongoDB","context","Error"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,IAAMC,cAAc,gBAAGH,aAAa,EAApC;AAEA,OAAO,SAASI,eAAT,OAAuC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,wBACJN,KAAK,CAACO,QAAN,CAAe,IAAf,CADI;AAAA;AAAA,MACrCC,YADqC;AAAA,MACvBC,eADuB;;AAG5C,MAAMC,kBAAkB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACrBF,YAAY,KAAK,IADI;AAAA;AAAA;AAAA;;AAEvBG,cAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAFuB,+CAGhBJ,YAHgB;;AAAA;AAAA;AAAA;AAAA,qBAYFL,WAAW,CAACU,OAAZ,CACnB,mGADmB,EAEnB;AACEC,gBAAAA,kBAAkB,EAAE,IADtB;AAEEC,gBAAAA,eAAe,EAAE,IAFnB;AAGEC,gBAAAA,gBAAgB,EAAE;AAHpB,eAFmB,CAZE;;AAAA;AAYjBC,cAAAA,MAZiB;AAoBvBR,cAAAA,eAAe,CAACQ,MAAD,CAAf;AACAN,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AArBuB,+CAsBhBK,MAtBgB;;AAAA;AAAA;AAAA;AAwBvBN,cAAAA,OAAO,CAACO,KAAR,CAAc,mCAAd;AAxBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBR,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AA6BA,MAAMS,KAAK,GAAG;AACZT,IAAAA,kBAAkB,EAAlBA;AADY,GAAd;AAIA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAES,KAAhC;AAAA,cAAwCb;AAAxC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAvCeD,e;;KAAAA,e;AAyChB,OAAO,SAASe,UAAT,GAAsB;AAAA;;AAC3B,MAAMC,OAAO,GAAGnB,UAAU,CAACE,cAAD,CAA1B;;AACA,MAAI,CAACiB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD;;IANeD,U","sourcesContent":["// MongoDBContext.js\r\nimport React, { createContext, useContext } from \"react\";\r\nimport { MongoClient } from \"mongodb\";\r\nconst MongoDBContext = createContext();\r\n\r\nexport function MongoDBProvider({ children }) {\r\n  const [cachedClient, setCachedClient] = React.useState(null);\r\n\r\n  const connectToDatabase2 = async () => {\r\n    if (cachedClient !== null) {\r\n      console.log(\"return already stored client\");\r\n      return cachedClient;\r\n    }\r\n\r\n    try {\r\n      //   const client = await MongoClient.connect(\"your-mongodb-uri\", {\r\n      //     useUnifiedTopology: true,\r\n      //     useNewUrlParser: true,\r\n      //     connectTimeoutMS: 30000,\r\n      //   });\r\n      const client = await MongoClient.connect(\r\n        \"mongodb+srv://ghufran:Allahis1@cluster0.psik2ae.mongodb.net/authSec14?retryWrites=true&w=majority\",\r\n        {\r\n          useUnifiedTopology: true,\r\n          useNewUrlParser: true,\r\n          connectTimeoutMS: 30000,\r\n        }\r\n      );\r\n      setCachedClient(client);\r\n      console.log(\"return new client\");\r\n      return client;\r\n    } catch (error) {\r\n      console.error(\"Error connecting to the database:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    connectToDatabase2,\r\n  };\r\n\r\n  return (\r\n    <MongoDBContext.Provider value={value}>{children}</MongoDBContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useMongoDB() {\r\n  const context = useContext(MongoDBContext);\r\n  if (!context) {\r\n    throw new Error(\"useMongoDB must be used within a MongoDBProvider\");\r\n  }\r\n  return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}