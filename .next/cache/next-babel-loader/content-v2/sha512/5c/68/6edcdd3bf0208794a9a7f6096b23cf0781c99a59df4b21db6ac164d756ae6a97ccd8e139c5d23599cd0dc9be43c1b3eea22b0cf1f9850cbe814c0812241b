{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport classes from \"./Form.module.css\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\"; // http://localhost:3000/dashboard/654bc2921efc6c1070461e13\n\nfunction Form(props) {\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var answerInputRef = useRef();\n\n  function sendQuestionData(_x, _x2, _x3, _x4, _x5) {\n    return _sendQuestionData.apply(this, arguments);\n  }\n\n  function _sendQuestionData() {\n    _sendQuestionData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(enteredAnswer, postID, ItemTitle, Question, combinedDateTime) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"/api/qresponse/QuestionResponse\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  enteredAnswer: enteredAnswer,\n                  postID: postID,\n                  ItemTitle: ItemTitle,\n                  Question: Question,\n                  combinedDateTime: combinedDateTime\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context2.sent;\n\n              if (!response.ok) {\n                setIsLoading(false);\n              }\n\n              return _context2.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _sendQuestionData.apply(this, arguments);\n  }\n\n  var postID = props.data2._id;\n  var ItemTitle = props.data2.Title;\n  var Question = props.data2.Question;\n  var currentDate = new Date();\n  var formattedDate = currentDate.toLocaleDateString(\"en-US\");\n  var formattedTime = currentDate.toLocaleTimeString(\"en-US\");\n  var combinedDateTime = \"\".concat(formattedDate, \" \").concat(formattedTime); //console.log(postID);\n\n  var answerSubmitHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var enteredAnswer, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setIsLoading(true);\n              enteredAnswer = answerInputRef.current.value;\n              _context.next = 5;\n              return sendQuestionData(enteredAnswer, postID, ItemTitle, Question, combinedDateTime);\n\n            case 5:\n              result = _context.sent;\n              // console.log(result);\n              event.target.reset(); // This resets the form\n\n              setIsLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function answerSubmitHandler(_x6) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        fontSize: \"1.5rem\"\n      },\n      children: \"Submitting response...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    className: classes.main,\n    onSubmit: answerSubmitHandler,\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      htmlFor: \"question\",\n      className: classes.labels,\n      children: \"Question?\"\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"span\", {\n      id: \"questionContent\",\n      className: classes.span1,\n      children: props.data2.Question\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"label\", {\n      htmlFor: \"answer\",\n      className: classes.labels,\n      children: \"Answer\"\n    }), /*#__PURE__*/_jsx(\"input\", {\n      type: \"text\",\n      id: \"answer\",\n      className: classes.inputfield,\n      ref: answerInputRef,\n      required: true\n    }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.btndiv,\n      children: [/*#__PURE__*/_jsx(\"button\", {\n        className: classes.button89,\n        type: \"button\",\n        role: \"button\",\n        onClick: props.oncancle,\n        children: \"Close\"\n      }), /*#__PURE__*/_jsx(\"button\", {\n        className: classes.button89,\n        type: \"submit\",\n        role: \"button\",\n        children: \"Submit\"\n      })]\n    })]\n  });\n}\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}