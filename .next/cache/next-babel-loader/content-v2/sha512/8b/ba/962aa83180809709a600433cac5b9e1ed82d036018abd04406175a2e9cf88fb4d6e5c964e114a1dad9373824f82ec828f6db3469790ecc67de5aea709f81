{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"G:/FYP/LostNestfyp/lostnestprj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"G:\\\\FYP\\\\LostNestfyp\\\\lostnestprj\\\\components\\\\postcomp\\\\PostNewItem.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./PostNewItem.module.css\";\nimport React from \"react\";\nimport Button from \"../UI/Button\";\nimport { useRef, useState } from \"react\";\nimport Loading from \"../UI/Loading\";\nimport ErrorComp from \"../UI/ErrorComp\";\n\nfunction PostNewItem() {\n  _s();\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      isImage = _useState2[0],\n      setIsImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      isError = _useState3[0],\n      setIsError = _useState3[1];\n\n  var _useState4 = useState(\"Sorry but the page you are looking for does not exist.\"),\n      isErrorData = _useState4[0],\n      setIsErrorData = _useState4[1];\n\n  var typeInputRef = useRef();\n  var categoryInputRef = useRef();\n  var titleInputRef = useRef();\n  var descriptionInputRef = useRef();\n  var questionInputRef = useRef();\n  var dateInputRef = useRef();\n\n  function sendEmails(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _sendEmails.apply(this, arguments);\n  }\n\n  function _sendEmails() {\n    _sendEmails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(Type, Category, Title, Description, Question, Date, imageInbase64) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"/api/post/postitem\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  Type: Type,\n                  Category: Category,\n                  Title: Title,\n                  Description: Description,\n                  Question: Question,\n                  Date: Date,\n                  ReducedImg: imageInbase64\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context2.sent;\n\n              if (!response.ok) {\n                console.log(\"Response not ok\");\n              }\n\n              return _context2.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _sendEmails.apply(this, arguments);\n  }\n\n  function sendPostData(_x8, _x9, _x10, _x11, _x12, _x13, _x14) {\n    return _sendPostData.apply(this, arguments);\n  }\n\n  function _sendPostData() {\n    _sendPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(Type, Category, Title, Description, Question, Date, imageInbase64) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"/api/post/postitem\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  Type: Type,\n                  Category: Category,\n                  Title: Title,\n                  Description: Description,\n                  Question: Question,\n                  Date: Date,\n                  ReducedImg: imageInbase64\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 2:\n              response = _context3.sent;\n              _context3.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context3.sent;\n\n              if (!response.ok) {\n                setIsErrorData(data.message);\n                setIsLoading(false);\n                setIsError(true);\n              }\n\n              return _context3.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _sendPostData.apply(this, arguments);\n  }\n\n  function converttobase64(e) {\n    // console.log(e);\n    var reader = new FileReader();\n    reader.readAsDataURL(e.target.files[0]);\n\n    reader.onload = function () {\n      //console.log(reader.result);\n      setIsImage(reader.result);\n    };\n\n    reader.onerror = function () {\n      console.log(\"error\", error);\n    };\n  }\n\n  var postSubmitHandler = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var enteredType, enteredCategory, enteredTitle, enteredDescription, enteredQuestion, enteredDate, humanReadableDate, message, emailres, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setIsLoading(true);\n              enteredType = typeInputRef.current.value;\n              enteredCategory = categoryInputRef.current.value;\n              enteredTitle = titleInputRef.current.value;\n              enteredDescription = descriptionInputRef.current.value;\n              enteredQuestion = questionInputRef.current.value;\n              enteredDate = dateInputRef.current.value;\n              humanReadableDate = new Date(enteredDate).toLocaleDateString(\"en-US\", {\n                day: \"numeric\",\n                month: \"long\",\n                year: \"numeric\"\n              });\n              message = \"\";\n              _context.next = 12;\n              return sendEmails(subject, message);\n\n            case 12:\n              emailres = _context.sent;\n              _context.next = 15;\n              return sendPostData(enteredType, enteredCategory, enteredTitle, enteredDescription, enteredQuestion, humanReadableDate, isImage);\n\n            case 15:\n              result = _context.sent;\n              event.target.reset(); // This resets the form\n\n              setIsImage(\"\"); // Clear the image state\n\n              setIsLoading(false);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function postSubmitHandler(_x15) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(ErrorComp, {\n      errorData: isErrorData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.formstyle3,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: postSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.divider,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"item\",\n            className: classes.inputfield,\n            ref: typeInputRef,\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Lost\",\n              children: \"Lost\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            defaultValue: \"Category\",\n            name: \"category\",\n            className: classes.inputfield,\n            ref: categoryInputRef,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Category\",\n              disabled: true,\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Wallet\",\n              children: \"Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ID Card / Student Card\",\n              children: \"ID Card / Student Card\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Smart Phone / Laptop\",\n              children: \"Smart Phone / Laptop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Keys\",\n              children: \"Keys\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Others\",\n              children: \"Others\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"field3\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Item Name \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.required,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"field3\",\n            placeholder: \"Title\",\n            className: classes.inputfield,\n            ref: titleInputRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"field4\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Enter question based on an item.\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.required,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"field4\",\n            placeholder: \"Ex:- What is the color of the phone?\",\n            className: classes.inputfield,\n            ref: questionInputRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Select a Date: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.required,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            name: \"date\",\n            id: \"date\",\n            className: classes.customselect,\n            ref: dateInputRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Description \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes.required,\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            name: \"description\",\n            placeholder: \"Description about item (like location etc...)\",\n            className: classes.textareafield,\n            ref: descriptionInputRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"image\",\n          name: \"image\",\n          accept: \"image/*\",\n          className: classes.customselect,\n          style: {\n            width: \"100%\"\n          },\n          onChange: converttobase64,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.center,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            content: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostNewItem, \"vpDc7St7ZLX3Vjdte79j8wT1xrM=\");\n\n_c = PostNewItem;\nexport default PostNewItem;\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PostNewItem\");","map":{"version":3,"sources":["G:/FYP/LostNestfyp/lostnestprj/components/postcomp/PostNewItem.js"],"names":["classes","React","Button","useRef","useState","Loading","ErrorComp","PostNewItem","isLoading","setIsLoading","isImage","setIsImage","isError","setIsError","isErrorData","setIsErrorData","typeInputRef","categoryInputRef","titleInputRef","descriptionInputRef","questionInputRef","dateInputRef","sendEmails","Type","Category","Title","Description","Question","Date","imageInbase64","fetch","method","body","JSON","stringify","ReducedImg","headers","response","json","data","ok","console","log","sendPostData","message","converttobase64","e","reader","FileReader","readAsDataURL","target","files","onload","result","onerror","error","postSubmitHandler","event","preventDefault","enteredType","current","value","enteredCategory","enteredTitle","enteredDescription","enteredQuestion","enteredDate","humanReadableDate","toLocaleDateString","day","month","year","subject","emailres","reset","formstyle3","divider","inputfield","required","customselect","textareafield","width","center"],"mappings":"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":["import classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n\r\n/*\r\n\r\nimport classes from \"./PostNewItem.module.css\";\r\n\r\nimport React from \"react\";\r\nimport Button from \"../UI/Button\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport Loading from \"../UI/Loading\";\r\nimport ErrorComp from \"../UI/ErrorComp\";\r\n\r\nfunction PostNewItem() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isImage, setIsImage] = useState(\"\");\r\n  const [isError, setIsError] = useState(false);\r\n  const [isErrorData, setIsErrorData] = useState(\r\n    \"Sorry but the page you are looking for does not exist.\"\r\n  );\r\n\r\n  const typeInputRef = useRef();\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const questionInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  async function sendEmails(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      console.log(\"Response not ok\");\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async function sendPostData(\r\n    Type,\r\n    Category,\r\n    Title,\r\n    Description,\r\n    Question,\r\n    Date,\r\n    imageInbase64\r\n  ) {\r\n    const response = await fetch(\"/api/post/postitem\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type,\r\n        Category,\r\n        Title,\r\n        Description,\r\n        Question,\r\n        Date,\r\n        ReducedImg: imageInbase64,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsErrorData(data.message);\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  function converttobase64(e) {\r\n    // console.log(e);\r\n\r\n    var reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n\r\n    reader.onload = () => {\r\n      //console.log(reader.result);\r\n      setIsImage(reader.result);\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.log(\"error\", error);\r\n    };\r\n  }\r\n  const postSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n\r\n    const enteredType = typeInputRef.current.value;\r\n    const enteredCategory = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredQuestion = questionInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const humanReadableDate = new Date(enteredDate).toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n      }\r\n    );\r\n    const message = ``;\r\n\r\n    const emailres = await sendEmails(subject, message);\r\n\r\n    const result = await sendPostData(\r\n      enteredType,\r\n      enteredCategory,\r\n      enteredTitle,\r\n      enteredDescription,\r\n      enteredQuestion,\r\n      humanReadableDate,\r\n      isImage\r\n    );\r\n\r\n    event.target.reset(); // This resets the form\r\n    setIsImage(\"\"); // Clear the image state\r\n    setIsLoading(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (isError) {\r\n    return <ErrorComp errorData={isErrorData} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.formstyle3}>\r\n      <form onSubmit={postSubmitHandler}>\r\n        <fieldset>\r\n          <legend>Data</legend>\r\n          <div className={classes.divider}>\r\n            <select\r\n              name=\"item\"\r\n              className={classes.inputfield}\r\n              ref={typeInputRef}\r\n            >\r\n              <option value=\"Lost\">Lost</option>\r\n            </select>\r\n            <select\r\n              defaultValue=\"Category\"\r\n              name=\"category\"\r\n              className={classes.inputfield}\r\n              ref={categoryInputRef}\r\n              required\r\n            >\r\n              <option value=\"Category\" disabled>\r\n                Category\r\n              </option>\r\n              <option value=\"Wallet\">Wallet</option>\r\n              <option value=\"ID Card / Student Card\">\r\n                ID Card / Student Card\r\n              </option>\r\n              <option value=\"Smart Phone / Laptop\">Smart Phone / Laptop</option>\r\n              <option value=\"Keys\">Keys</option>\r\n              <option value=\"Others\">Others</option>\r\n            </select>\r\n          </div>\r\n\r\n          <label htmlFor=\"field3\">\r\n            <span>\r\n              Item Name <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field3\"\r\n              placeholder=\"Title\"\r\n              className={classes.inputfield}\r\n              ref={titleInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n          <label htmlFor=\"field4\">\r\n            <span>\r\n              Enter question based on an item.\r\n              <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"text\"\r\n              name=\"field4\"\r\n              placeholder=\"Ex:- What is the color of the phone?\"\r\n              className={classes.inputfield}\r\n              ref={questionInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n\r\n          <label htmlFor=\"date\">\r\n            <span>\r\n              Select a Date: <span className={classes.required}>*</span>\r\n            </span>\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              id=\"date\"\r\n              className={classes.customselect}\r\n              ref={dateInputRef}\r\n              required\r\n            ></input>\r\n          </label>\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Details</legend>\r\n          <label htmlFor=\"description\">\r\n            <span>\r\n              Description <span className={classes.required}>*</span>\r\n            </span>\r\n            <textarea\r\n              type=\"text\"\r\n              name=\"description\"\r\n              placeholder=\"Description about item (like location etc...)\"\r\n              className={classes.textareafield}\r\n              ref={descriptionInputRef}\r\n              required\r\n            ></textarea>\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            name=\"image\"\r\n            accept=\"image/*\"\r\n            className={classes.customselect}\r\n            style={{ width: \"100%\" }}\r\n            onChange={converttobase64}\r\n            required\r\n          />\r\n          <div className={classes.center}>\r\n            <Button content=\"Post\"></Button>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostNewItem;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}